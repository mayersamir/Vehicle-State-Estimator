
ComAppMcu1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00007784  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000014e  00800060  00007784  00007818  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000006c  008001ae  008001ae  00007966  2**0
                  ALLOC
  3 .stab         00006a74  00000000  00000000  00007968  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000028ad  00000000  00000000  0000e3dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001e0  00000000  00000000  00010c89  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000230  00000000  00000000  00010e69  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002d67  00000000  00000000  00011099  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001615  00000000  00000000  00013e00  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000014ad  00000000  00000000  00015415  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000200  00000000  00000000  000168c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000374  00000000  00000000  00016ac4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000018ab  00000000  00000000  00016e38  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000068  00000000  00000000  000186e3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 59 25 	jmp	0x4ab2	; 0x4ab2 <__vector_1>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 28 1f 	jmp	0x3e50	; 0x3e50 <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 3d 1a 	jmp	0x347a	; 0x347a <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 90 16 	jmp	0x2d20	; 0x2d20 <__vector_11>
      30:	0c 94 ca 22 	jmp	0x4594	; 0x4594 <__vector_12>
      34:	0c 94 fc 11 	jmp	0x23f8	; 0x23f8 <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 a7 11 	jmp	0x234e	; 0x234e <__vector_15>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e8       	ldi	r30, 0x84	; 132
      68:	f7 e7       	ldi	r31, 0x77	; 119
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 3a       	cpi	r26, 0xAE	; 174
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	ae ea       	ldi	r26, 0xAE	; 174
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 31       	cpi	r26, 0x1A	; 26
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 24 3b 	call	0x7648	; 0x7648 <main>
      8a:	0c 94 c0 3b 	jmp	0x7780	; 0x7780 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__muldi3>:
      92:	a0 e3       	ldi	r26, 0x30	; 48
      94:	b0 e0       	ldi	r27, 0x00	; 0
      96:	ef e4       	ldi	r30, 0x4F	; 79
      98:	f0 e0       	ldi	r31, 0x00	; 0
      9a:	0c 94 89 3b 	jmp	0x7712	; 0x7712 <__prologue_saves__>
      9e:	a8 e0       	ldi	r26, 0x08	; 8
      a0:	4e 01       	movw	r8, r28
      a2:	08 94       	sec
      a4:	81 1c       	adc	r8, r1
      a6:	91 1c       	adc	r9, r1
      a8:	f4 01       	movw	r30, r8
      aa:	ba 2f       	mov	r27, r26
      ac:	11 92       	st	Z+, r1
      ae:	ba 95       	dec	r27
      b0:	e9 f7       	brne	.-6      	; 0xac <__muldi3+0x1a>
      b2:	29 83       	std	Y+1, r18	; 0x01
      b4:	3a 83       	std	Y+2, r19	; 0x02
      b6:	4b 83       	std	Y+3, r20	; 0x03
      b8:	5c 83       	std	Y+4, r21	; 0x04
      ba:	6d 83       	std	Y+5, r22	; 0x05
      bc:	7e 83       	std	Y+6, r23	; 0x06
      be:	8f 83       	std	Y+7, r24	; 0x07
      c0:	98 87       	std	Y+8, r25	; 0x08
      c2:	ce 01       	movw	r24, r28
      c4:	09 96       	adiw	r24, 0x09	; 9
      c6:	fc 01       	movw	r30, r24
      c8:	11 92       	st	Z+, r1
      ca:	aa 95       	dec	r26
      cc:	e9 f7       	brne	.-6      	; 0xc8 <__muldi3+0x36>
      ce:	a9 86       	std	Y+9, r10	; 0x09
      d0:	ba 86       	std	Y+10, r11	; 0x0a
      d2:	cb 86       	std	Y+11, r12	; 0x0b
      d4:	dc 86       	std	Y+12, r13	; 0x0c
      d6:	ed 86       	std	Y+13, r14	; 0x0d
      d8:	fe 86       	std	Y+14, r15	; 0x0e
      da:	0f 87       	std	Y+15, r16	; 0x0f
      dc:	18 8b       	std	Y+16, r17	; 0x10
      de:	29 81       	ldd	r18, Y+1	; 0x01
      e0:	3a 81       	ldd	r19, Y+2	; 0x02
      e2:	4b 81       	ldd	r20, Y+3	; 0x03
      e4:	5c 81       	ldd	r21, Y+4	; 0x04
      e6:	2d a7       	std	Y+45, r18	; 0x2d
      e8:	3e a7       	std	Y+46, r19	; 0x2e
      ea:	4f a7       	std	Y+47, r20	; 0x2f
      ec:	58 ab       	std	Y+48, r21	; 0x30
      ee:	79 01       	movw	r14, r18
      f0:	8a 01       	movw	r16, r20
      f2:	8f ef       	ldi	r24, 0xFF	; 255
      f4:	9f ef       	ldi	r25, 0xFF	; 255
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b0 e0       	ldi	r27, 0x00	; 0
      fa:	e8 22       	and	r14, r24
      fc:	f9 22       	and	r15, r25
      fe:	0a 23       	and	r16, r26
     100:	1b 23       	and	r17, r27
     102:	1a 01       	movw	r2, r20
     104:	44 24       	eor	r4, r4
     106:	55 24       	eor	r5, r5
     108:	29 85       	ldd	r18, Y+9	; 0x09
     10a:	3a 85       	ldd	r19, Y+10	; 0x0a
     10c:	4b 85       	ldd	r20, Y+11	; 0x0b
     10e:	5c 85       	ldd	r21, Y+12	; 0x0c
     110:	29 a7       	std	Y+41, r18	; 0x29
     112:	3a a7       	std	Y+42, r19	; 0x2a
     114:	4b a7       	std	Y+43, r20	; 0x2b
     116:	5c a7       	std	Y+44, r21	; 0x2c
     118:	59 01       	movw	r10, r18
     11a:	6a 01       	movw	r12, r20
     11c:	a8 22       	and	r10, r24
     11e:	b9 22       	and	r11, r25
     120:	ca 22       	and	r12, r26
     122:	db 22       	and	r13, r27
     124:	3a 01       	movw	r6, r20
     126:	88 24       	eor	r8, r8
     128:	99 24       	eor	r9, r9
     12a:	c6 01       	movw	r24, r12
     12c:	b5 01       	movw	r22, r10
     12e:	a8 01       	movw	r20, r16
     130:	97 01       	movw	r18, r14
     132:	0e 94 34 3b 	call	0x7668	; 0x7668 <__mulsi3>
     136:	6d a3       	std	Y+37, r22	; 0x25
     138:	7e a3       	std	Y+38, r23	; 0x26
     13a:	8f a3       	std	Y+39, r24	; 0x27
     13c:	98 a7       	std	Y+40, r25	; 0x28
     13e:	c4 01       	movw	r24, r8
     140:	b3 01       	movw	r22, r6
     142:	0e 94 34 3b 	call	0x7668	; 0x7668 <__mulsi3>
     146:	69 a3       	std	Y+33, r22	; 0x21
     148:	7a a3       	std	Y+34, r23	; 0x22
     14a:	8b a3       	std	Y+35, r24	; 0x23
     14c:	9c a3       	std	Y+36, r25	; 0x24
     14e:	c6 01       	movw	r24, r12
     150:	b5 01       	movw	r22, r10
     152:	a2 01       	movw	r20, r4
     154:	91 01       	movw	r18, r2
     156:	0e 94 34 3b 	call	0x7668	; 0x7668 <__mulsi3>
     15a:	7b 01       	movw	r14, r22
     15c:	8c 01       	movw	r16, r24
     15e:	c4 01       	movw	r24, r8
     160:	b3 01       	movw	r22, r6
     162:	0e 94 34 3b 	call	0x7668	; 0x7668 <__mulsi3>
     166:	5b 01       	movw	r10, r22
     168:	6c 01       	movw	r12, r24
     16a:	89 a1       	ldd	r24, Y+33	; 0x21
     16c:	9a a1       	ldd	r25, Y+34	; 0x22
     16e:	ab a1       	ldd	r26, Y+35	; 0x23
     170:	bc a1       	ldd	r27, Y+36	; 0x24
     172:	8e 0d       	add	r24, r14
     174:	9f 1d       	adc	r25, r15
     176:	a0 1f       	adc	r26, r16
     178:	b1 1f       	adc	r27, r17
     17a:	89 a3       	std	Y+33, r24	; 0x21
     17c:	9a a3       	std	Y+34, r25	; 0x22
     17e:	ab a3       	std	Y+35, r26	; 0x23
     180:	bc a3       	std	Y+36, r27	; 0x24
     182:	2d a1       	ldd	r18, Y+37	; 0x25
     184:	3e a1       	ldd	r19, Y+38	; 0x26
     186:	4f a1       	ldd	r20, Y+39	; 0x27
     188:	58 a5       	ldd	r21, Y+40	; 0x28
     18a:	ca 01       	movw	r24, r20
     18c:	aa 27       	eor	r26, r26
     18e:	bb 27       	eor	r27, r27
     190:	29 a1       	ldd	r18, Y+33	; 0x21
     192:	3a a1       	ldd	r19, Y+34	; 0x22
     194:	4b a1       	ldd	r20, Y+35	; 0x23
     196:	5c a1       	ldd	r21, Y+36	; 0x24
     198:	28 0f       	add	r18, r24
     19a:	39 1f       	adc	r19, r25
     19c:	4a 1f       	adc	r20, r26
     19e:	5b 1f       	adc	r21, r27
     1a0:	29 a3       	std	Y+33, r18	; 0x21
     1a2:	3a a3       	std	Y+34, r19	; 0x22
     1a4:	4b a3       	std	Y+35, r20	; 0x23
     1a6:	5c a3       	std	Y+36, r21	; 0x24
     1a8:	2e 15       	cp	r18, r14
     1aa:	3f 05       	cpc	r19, r15
     1ac:	40 07       	cpc	r20, r16
     1ae:	51 07       	cpc	r21, r17
     1b0:	40 f4       	brcc	.+16     	; 0x1c2 <__muldi3+0x130>
     1b2:	80 e0       	ldi	r24, 0x00	; 0
     1b4:	90 e0       	ldi	r25, 0x00	; 0
     1b6:	a1 e0       	ldi	r26, 0x01	; 1
     1b8:	b0 e0       	ldi	r27, 0x00	; 0
     1ba:	a8 0e       	add	r10, r24
     1bc:	b9 1e       	adc	r11, r25
     1be:	ca 1e       	adc	r12, r26
     1c0:	db 1e       	adc	r13, r27
     1c2:	89 a1       	ldd	r24, Y+33	; 0x21
     1c4:	9a a1       	ldd	r25, Y+34	; 0x22
     1c6:	ab a1       	ldd	r26, Y+35	; 0x23
     1c8:	bc a1       	ldd	r27, Y+36	; 0x24
     1ca:	9d 01       	movw	r18, r26
     1cc:	44 27       	eor	r20, r20
     1ce:	55 27       	eor	r21, r21
     1d0:	2a 0d       	add	r18, r10
     1d2:	3b 1d       	adc	r19, r11
     1d4:	4c 1d       	adc	r20, r12
     1d6:	5d 1d       	adc	r21, r13
     1d8:	2d 8f       	std	Y+29, r18	; 0x1d
     1da:	3e 8f       	std	Y+30, r19	; 0x1e
     1dc:	4f 8f       	std	Y+31, r20	; 0x1f
     1de:	58 a3       	std	Y+32, r21	; 0x20
     1e0:	6c 01       	movw	r12, r24
     1e2:	bb 24       	eor	r11, r11
     1e4:	aa 24       	eor	r10, r10
     1e6:	8d a1       	ldd	r24, Y+37	; 0x25
     1e8:	9e a1       	ldd	r25, Y+38	; 0x26
     1ea:	af a1       	ldd	r26, Y+39	; 0x27
     1ec:	b8 a5       	ldd	r27, Y+40	; 0x28
     1ee:	a0 70       	andi	r26, 0x00	; 0
     1f0:	b0 70       	andi	r27, 0x00	; 0
     1f2:	a8 0e       	add	r10, r24
     1f4:	b9 1e       	adc	r11, r25
     1f6:	ca 1e       	adc	r12, r26
     1f8:	db 1e       	adc	r13, r27
     1fa:	a9 8e       	std	Y+25, r10	; 0x19
     1fc:	ba 8e       	std	Y+26, r11	; 0x1a
     1fe:	cb 8e       	std	Y+27, r12	; 0x1b
     200:	dc 8e       	std	Y+28, r13	; 0x1c
     202:	9a 8c       	ldd	r9, Y+26	; 0x1a
     204:	8b 8c       	ldd	r8, Y+27	; 0x1b
     206:	7c 8c       	ldd	r7, Y+28	; 0x1c
     208:	9e 8d       	ldd	r25, Y+30	; 0x1e
     20a:	6f 8d       	ldd	r22, Y+31	; 0x1f
     20c:	78 a1       	ldd	r23, Y+32	; 0x20
     20e:	fe 01       	movw	r30, r28
     210:	71 96       	adiw	r30, 0x11	; 17
     212:	88 e0       	ldi	r24, 0x08	; 8
     214:	df 01       	movw	r26, r30
     216:	1d 92       	st	X+, r1
     218:	8a 95       	dec	r24
     21a:	e9 f7       	brne	.-6      	; 0x216 <__muldi3+0x184>
     21c:	2d 8b       	std	Y+21, r18	; 0x15
     21e:	9e 8b       	std	Y+22, r25	; 0x16
     220:	6f 8b       	std	Y+23, r22	; 0x17
     222:	78 8f       	std	Y+24, r23	; 0x18
     224:	2d 85       	ldd	r18, Y+13	; 0x0d
     226:	3e 85       	ldd	r19, Y+14	; 0x0e
     228:	4f 85       	ldd	r20, Y+15	; 0x0f
     22a:	58 89       	ldd	r21, Y+16	; 0x10
     22c:	6d a5       	ldd	r22, Y+45	; 0x2d
     22e:	7e a5       	ldd	r23, Y+46	; 0x2e
     230:	8f a5       	ldd	r24, Y+47	; 0x2f
     232:	98 a9       	ldd	r25, Y+48	; 0x30
     234:	0e 94 34 3b 	call	0x7668	; 0x7668 <__mulsi3>
     238:	7b 01       	movw	r14, r22
     23a:	8c 01       	movw	r16, r24
     23c:	2d 81       	ldd	r18, Y+5	; 0x05
     23e:	3e 81       	ldd	r19, Y+6	; 0x06
     240:	4f 81       	ldd	r20, Y+7	; 0x07
     242:	58 85       	ldd	r21, Y+8	; 0x08
     244:	69 a5       	ldd	r22, Y+41	; 0x29
     246:	7a a5       	ldd	r23, Y+42	; 0x2a
     248:	8b a5       	ldd	r24, Y+43	; 0x2b
     24a:	9c a5       	ldd	r25, Y+44	; 0x2c
     24c:	0e 94 34 3b 	call	0x7668	; 0x7668 <__mulsi3>
     250:	e6 0e       	add	r14, r22
     252:	f7 1e       	adc	r15, r23
     254:	08 1f       	adc	r16, r24
     256:	19 1f       	adc	r17, r25
     258:	6d 89       	ldd	r22, Y+21	; 0x15
     25a:	7e 89       	ldd	r23, Y+22	; 0x16
     25c:	8f 89       	ldd	r24, Y+23	; 0x17
     25e:	98 8d       	ldd	r25, Y+24	; 0x18
     260:	6e 0d       	add	r22, r14
     262:	7f 1d       	adc	r23, r15
     264:	80 1f       	adc	r24, r16
     266:	91 1f       	adc	r25, r17
     268:	6d 8b       	std	Y+21, r22	; 0x15
     26a:	7e 8b       	std	Y+22, r23	; 0x16
     26c:	8f 8b       	std	Y+23, r24	; 0x17
     26e:	98 8f       	std	Y+24, r25	; 0x18
     270:	ee 89       	ldd	r30, Y+22	; 0x16
     272:	2a 2d       	mov	r18, r10
     274:	39 2d       	mov	r19, r9
     276:	48 2d       	mov	r20, r8
     278:	57 2d       	mov	r21, r7
     27a:	7e 2f       	mov	r23, r30
     27c:	8f 89       	ldd	r24, Y+23	; 0x17
     27e:	98 8d       	ldd	r25, Y+24	; 0x18
     280:	e0 96       	adiw	r28, 0x30	; 48
     282:	e2 e1       	ldi	r30, 0x12	; 18
     284:	0c 94 a5 3b 	jmp	0x774a	; 0x774a <__epilogue_restores__>

00000288 <__fixunssfsi>:
     288:	ef 92       	push	r14
     28a:	ff 92       	push	r15
     28c:	0f 93       	push	r16
     28e:	1f 93       	push	r17
     290:	7b 01       	movw	r14, r22
     292:	8c 01       	movw	r16, r24
     294:	20 e0       	ldi	r18, 0x00	; 0
     296:	30 e0       	ldi	r19, 0x00	; 0
     298:	40 e0       	ldi	r20, 0x00	; 0
     29a:	5f e4       	ldi	r21, 0x4F	; 79
     29c:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <__gesf2>
     2a0:	88 23       	and	r24, r24
     2a2:	8c f0       	brlt	.+34     	; 0x2c6 <__fixunssfsi+0x3e>
     2a4:	c8 01       	movw	r24, r16
     2a6:	b7 01       	movw	r22, r14
     2a8:	20 e0       	ldi	r18, 0x00	; 0
     2aa:	30 e0       	ldi	r19, 0x00	; 0
     2ac:	40 e0       	ldi	r20, 0x00	; 0
     2ae:	5f e4       	ldi	r21, 0x4F	; 79
     2b0:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <__subsf3>
     2b4:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <__fixsfsi>
     2b8:	9b 01       	movw	r18, r22
     2ba:	ac 01       	movw	r20, r24
     2bc:	20 50       	subi	r18, 0x00	; 0
     2be:	30 40       	sbci	r19, 0x00	; 0
     2c0:	40 40       	sbci	r20, 0x00	; 0
     2c2:	50 48       	sbci	r21, 0x80	; 128
     2c4:	06 c0       	rjmp	.+12     	; 0x2d2 <__fixunssfsi+0x4a>
     2c6:	c8 01       	movw	r24, r16
     2c8:	b7 01       	movw	r22, r14
     2ca:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <__fixsfsi>
     2ce:	9b 01       	movw	r18, r22
     2d0:	ac 01       	movw	r20, r24
     2d2:	b9 01       	movw	r22, r18
     2d4:	ca 01       	movw	r24, r20
     2d6:	1f 91       	pop	r17
     2d8:	0f 91       	pop	r16
     2da:	ff 90       	pop	r15
     2dc:	ef 90       	pop	r14
     2de:	08 95       	ret

000002e0 <__divdi3>:
     2e0:	a2 e7       	ldi	r26, 0x72	; 114
     2e2:	b0 e0       	ldi	r27, 0x00	; 0
     2e4:	e6 e7       	ldi	r30, 0x76	; 118
     2e6:	f1 e0       	ldi	r31, 0x01	; 1
     2e8:	0c 94 89 3b 	jmp	0x7712	; 0x7712 <__prologue_saves__>
     2ec:	98 2e       	mov	r9, r24
     2ee:	89 2e       	mov	r8, r25
     2f0:	71 2e       	mov	r7, r17
     2f2:	88 e0       	ldi	r24, 0x08	; 8
     2f4:	fe 01       	movw	r30, r28
     2f6:	31 96       	adiw	r30, 0x01	; 1
     2f8:	df 01       	movw	r26, r30
     2fa:	68 2e       	mov	r6, r24
     2fc:	1d 92       	st	X+, r1
     2fe:	6a 94       	dec	r6
     300:	e9 f7       	brne	.-6      	; 0x2fc <__divdi3+0x1c>
     302:	29 83       	std	Y+1, r18	; 0x01
     304:	3a 83       	std	Y+2, r19	; 0x02
     306:	4b 83       	std	Y+3, r20	; 0x03
     308:	5c 83       	std	Y+4, r21	; 0x04
     30a:	6d 83       	std	Y+5, r22	; 0x05
     30c:	7e 83       	std	Y+6, r23	; 0x06
     30e:	9f 82       	std	Y+7, r9	; 0x07
     310:	98 87       	std	Y+8, r25	; 0x08
     312:	fe 01       	movw	r30, r28
     314:	39 96       	adiw	r30, 0x09	; 9
     316:	df 01       	movw	r26, r30
     318:	1d 92       	st	X+, r1
     31a:	8a 95       	dec	r24
     31c:	e9 f7       	brne	.-6      	; 0x318 <__divdi3+0x38>
     31e:	a9 86       	std	Y+9, r10	; 0x09
     320:	ba 86       	std	Y+10, r11	; 0x0a
     322:	cb 86       	std	Y+11, r12	; 0x0b
     324:	dc 86       	std	Y+12, r13	; 0x0c
     326:	ed 86       	std	Y+13, r14	; 0x0d
     328:	fe 86       	std	Y+14, r15	; 0x0e
     32a:	0f 87       	std	Y+15, r16	; 0x0f
     32c:	18 8b       	std	Y+16, r17	; 0x10
     32e:	8d 81       	ldd	r24, Y+5	; 0x05
     330:	9e 81       	ldd	r25, Y+6	; 0x06
     332:	af 81       	ldd	r26, Y+7	; 0x07
     334:	b8 85       	ldd	r27, Y+8	; 0x08
     336:	b7 fd       	sbrc	r27, 7
     338:	07 c0       	rjmp	.+14     	; 0x348 <__divdi3+0x68>
     33a:	e1 96       	adiw	r28, 0x31	; 49
     33c:	1c ae       	std	Y+60, r1	; 0x3c
     33e:	1d ae       	std	Y+61, r1	; 0x3d
     340:	1e ae       	std	Y+62, r1	; 0x3e
     342:	1f ae       	std	Y+63, r1	; 0x3f
     344:	e1 97       	sbiw	r28, 0x31	; 49
     346:	64 c0       	rjmp	.+200    	; 0x410 <__divdi3+0x130>
     348:	21 95       	neg	r18
     34a:	81 e0       	ldi	r24, 0x01	; 1
     34c:	12 16       	cp	r1, r18
     34e:	08 f0       	brcs	.+2      	; 0x352 <__divdi3+0x72>
     350:	80 e0       	ldi	r24, 0x00	; 0
     352:	31 95       	neg	r19
     354:	91 e0       	ldi	r25, 0x01	; 1
     356:	13 16       	cp	r1, r19
     358:	08 f0       	brcs	.+2      	; 0x35c <__divdi3+0x7c>
     35a:	90 e0       	ldi	r25, 0x00	; 0
     35c:	b3 2f       	mov	r27, r19
     35e:	b8 1b       	sub	r27, r24
     360:	81 e0       	ldi	r24, 0x01	; 1
     362:	3b 17       	cp	r19, r27
     364:	08 f0       	brcs	.+2      	; 0x368 <__divdi3+0x88>
     366:	80 e0       	ldi	r24, 0x00	; 0
     368:	98 2b       	or	r25, r24
     36a:	41 95       	neg	r20
     36c:	31 e0       	ldi	r19, 0x01	; 1
     36e:	14 16       	cp	r1, r20
     370:	08 f0       	brcs	.+2      	; 0x374 <__divdi3+0x94>
     372:	30 e0       	ldi	r19, 0x00	; 0
     374:	a4 2f       	mov	r26, r20
     376:	a9 1b       	sub	r26, r25
     378:	81 e0       	ldi	r24, 0x01	; 1
     37a:	4a 17       	cp	r20, r26
     37c:	08 f0       	brcs	.+2      	; 0x380 <__divdi3+0xa0>
     37e:	80 e0       	ldi	r24, 0x00	; 0
     380:	38 2b       	or	r19, r24
     382:	51 95       	neg	r21
     384:	91 e0       	ldi	r25, 0x01	; 1
     386:	15 16       	cp	r1, r21
     388:	08 f0       	brcs	.+2      	; 0x38c <__divdi3+0xac>
     38a:	90 e0       	ldi	r25, 0x00	; 0
     38c:	f5 2f       	mov	r31, r21
     38e:	f3 1b       	sub	r31, r19
     390:	81 e0       	ldi	r24, 0x01	; 1
     392:	5f 17       	cp	r21, r31
     394:	08 f0       	brcs	.+2      	; 0x398 <__divdi3+0xb8>
     396:	80 e0       	ldi	r24, 0x00	; 0
     398:	98 2b       	or	r25, r24
     39a:	61 95       	neg	r22
     39c:	31 e0       	ldi	r19, 0x01	; 1
     39e:	16 16       	cp	r1, r22
     3a0:	08 f0       	brcs	.+2      	; 0x3a4 <__divdi3+0xc4>
     3a2:	30 e0       	ldi	r19, 0x00	; 0
     3a4:	e6 2f       	mov	r30, r22
     3a6:	e9 1b       	sub	r30, r25
     3a8:	81 e0       	ldi	r24, 0x01	; 1
     3aa:	6e 17       	cp	r22, r30
     3ac:	08 f0       	brcs	.+2      	; 0x3b0 <__divdi3+0xd0>
     3ae:	80 e0       	ldi	r24, 0x00	; 0
     3b0:	38 2b       	or	r19, r24
     3b2:	71 95       	neg	r23
     3b4:	41 e0       	ldi	r20, 0x01	; 1
     3b6:	17 16       	cp	r1, r23
     3b8:	08 f0       	brcs	.+2      	; 0x3bc <__divdi3+0xdc>
     3ba:	40 e0       	ldi	r20, 0x00	; 0
     3bc:	57 2f       	mov	r21, r23
     3be:	53 1b       	sub	r21, r19
     3c0:	81 e0       	ldi	r24, 0x01	; 1
     3c2:	75 17       	cp	r23, r21
     3c4:	08 f0       	brcs	.+2      	; 0x3c8 <__divdi3+0xe8>
     3c6:	80 e0       	ldi	r24, 0x00	; 0
     3c8:	48 2b       	or	r20, r24
     3ca:	89 2d       	mov	r24, r9
     3cc:	81 95       	neg	r24
     3ce:	91 e0       	ldi	r25, 0x01	; 1
     3d0:	18 16       	cp	r1, r24
     3d2:	08 f0       	brcs	.+2      	; 0x3d6 <__divdi3+0xf6>
     3d4:	90 e0       	ldi	r25, 0x00	; 0
     3d6:	68 2e       	mov	r6, r24
     3d8:	64 1a       	sub	r6, r20
     3da:	46 2d       	mov	r20, r6
     3dc:	31 e0       	ldi	r19, 0x01	; 1
     3de:	86 15       	cp	r24, r6
     3e0:	08 f0       	brcs	.+2      	; 0x3e4 <__divdi3+0x104>
     3e2:	30 e0       	ldi	r19, 0x00	; 0
     3e4:	93 2b       	or	r25, r19
     3e6:	88 2d       	mov	r24, r8
     3e8:	81 95       	neg	r24
     3ea:	89 1b       	sub	r24, r25
     3ec:	29 83       	std	Y+1, r18	; 0x01
     3ee:	ba 83       	std	Y+2, r27	; 0x02
     3f0:	ab 83       	std	Y+3, r26	; 0x03
     3f2:	fc 83       	std	Y+4, r31	; 0x04
     3f4:	ed 83       	std	Y+5, r30	; 0x05
     3f6:	5e 83       	std	Y+6, r21	; 0x06
     3f8:	4f 83       	std	Y+7, r20	; 0x07
     3fa:	88 87       	std	Y+8, r24	; 0x08
     3fc:	2f ef       	ldi	r18, 0xFF	; 255
     3fe:	3f ef       	ldi	r19, 0xFF	; 255
     400:	4f ef       	ldi	r20, 0xFF	; 255
     402:	5f ef       	ldi	r21, 0xFF	; 255
     404:	e1 96       	adiw	r28, 0x31	; 49
     406:	2c af       	std	Y+60, r18	; 0x3c
     408:	3d af       	std	Y+61, r19	; 0x3d
     40a:	4e af       	std	Y+62, r20	; 0x3e
     40c:	5f af       	std	Y+63, r21	; 0x3f
     40e:	e1 97       	sbiw	r28, 0x31	; 49
     410:	8d 85       	ldd	r24, Y+13	; 0x0d
     412:	9e 85       	ldd	r25, Y+14	; 0x0e
     414:	af 85       	ldd	r26, Y+15	; 0x0f
     416:	b8 89       	ldd	r27, Y+16	; 0x10
     418:	b7 ff       	sbrs	r27, 7
     41a:	6a c0       	rjmp	.+212    	; 0x4f0 <__divdi3+0x210>
     41c:	e1 96       	adiw	r28, 0x31	; 49
     41e:	4c ad       	ldd	r20, Y+60	; 0x3c
     420:	5d ad       	ldd	r21, Y+61	; 0x3d
     422:	6e ad       	ldd	r22, Y+62	; 0x3e
     424:	7f ad       	ldd	r23, Y+63	; 0x3f
     426:	e1 97       	sbiw	r28, 0x31	; 49
     428:	40 95       	com	r20
     42a:	50 95       	com	r21
     42c:	60 95       	com	r22
     42e:	70 95       	com	r23
     430:	e1 96       	adiw	r28, 0x31	; 49
     432:	4c af       	std	Y+60, r20	; 0x3c
     434:	5d af       	std	Y+61, r21	; 0x3d
     436:	6e af       	std	Y+62, r22	; 0x3e
     438:	7f af       	std	Y+63, r23	; 0x3f
     43a:	e1 97       	sbiw	r28, 0x31	; 49
     43c:	a1 94       	neg	r10
     43e:	81 e0       	ldi	r24, 0x01	; 1
     440:	1a 14       	cp	r1, r10
     442:	08 f0       	brcs	.+2      	; 0x446 <__divdi3+0x166>
     444:	80 e0       	ldi	r24, 0x00	; 0
     446:	b1 94       	neg	r11
     448:	91 e0       	ldi	r25, 0x01	; 1
     44a:	1b 14       	cp	r1, r11
     44c:	08 f0       	brcs	.+2      	; 0x450 <__divdi3+0x170>
     44e:	90 e0       	ldi	r25, 0x00	; 0
     450:	6b 2d       	mov	r22, r11
     452:	68 1b       	sub	r22, r24
     454:	81 e0       	ldi	r24, 0x01	; 1
     456:	b6 16       	cp	r11, r22
     458:	08 f0       	brcs	.+2      	; 0x45c <__divdi3+0x17c>
     45a:	80 e0       	ldi	r24, 0x00	; 0
     45c:	98 2b       	or	r25, r24
     45e:	c1 94       	neg	r12
     460:	21 e0       	ldi	r18, 0x01	; 1
     462:	1c 14       	cp	r1, r12
     464:	08 f0       	brcs	.+2      	; 0x468 <__divdi3+0x188>
     466:	20 e0       	ldi	r18, 0x00	; 0
     468:	5c 2d       	mov	r21, r12
     46a:	59 1b       	sub	r21, r25
     46c:	81 e0       	ldi	r24, 0x01	; 1
     46e:	c5 16       	cp	r12, r21
     470:	08 f0       	brcs	.+2      	; 0x474 <__divdi3+0x194>
     472:	80 e0       	ldi	r24, 0x00	; 0
     474:	28 2b       	or	r18, r24
     476:	d1 94       	neg	r13
     478:	91 e0       	ldi	r25, 0x01	; 1
     47a:	1d 14       	cp	r1, r13
     47c:	08 f0       	brcs	.+2      	; 0x480 <__divdi3+0x1a0>
     47e:	90 e0       	ldi	r25, 0x00	; 0
     480:	4d 2d       	mov	r20, r13
     482:	42 1b       	sub	r20, r18
     484:	81 e0       	ldi	r24, 0x01	; 1
     486:	d4 16       	cp	r13, r20
     488:	08 f0       	brcs	.+2      	; 0x48c <__divdi3+0x1ac>
     48a:	80 e0       	ldi	r24, 0x00	; 0
     48c:	98 2b       	or	r25, r24
     48e:	e1 94       	neg	r14
     490:	21 e0       	ldi	r18, 0x01	; 1
     492:	1e 14       	cp	r1, r14
     494:	08 f0       	brcs	.+2      	; 0x498 <__divdi3+0x1b8>
     496:	20 e0       	ldi	r18, 0x00	; 0
     498:	3e 2d       	mov	r19, r14
     49a:	39 1b       	sub	r19, r25
     49c:	81 e0       	ldi	r24, 0x01	; 1
     49e:	e3 16       	cp	r14, r19
     4a0:	08 f0       	brcs	.+2      	; 0x4a4 <__divdi3+0x1c4>
     4a2:	80 e0       	ldi	r24, 0x00	; 0
     4a4:	28 2b       	or	r18, r24
     4a6:	f1 94       	neg	r15
     4a8:	91 e0       	ldi	r25, 0x01	; 1
     4aa:	1f 14       	cp	r1, r15
     4ac:	08 f0       	brcs	.+2      	; 0x4b0 <__divdi3+0x1d0>
     4ae:	90 e0       	ldi	r25, 0x00	; 0
     4b0:	7f 2d       	mov	r23, r15
     4b2:	72 1b       	sub	r23, r18
     4b4:	27 2f       	mov	r18, r23
     4b6:	81 e0       	ldi	r24, 0x01	; 1
     4b8:	f7 16       	cp	r15, r23
     4ba:	08 f0       	brcs	.+2      	; 0x4be <__divdi3+0x1de>
     4bc:	80 e0       	ldi	r24, 0x00	; 0
     4be:	98 2b       	or	r25, r24
     4c0:	01 95       	neg	r16
     4c2:	11 e0       	ldi	r17, 0x01	; 1
     4c4:	10 16       	cp	r1, r16
     4c6:	08 f0       	brcs	.+2      	; 0x4ca <__divdi3+0x1ea>
     4c8:	10 e0       	ldi	r17, 0x00	; 0
     4ca:	80 2f       	mov	r24, r16
     4cc:	89 1b       	sub	r24, r25
     4ce:	98 2f       	mov	r25, r24
     4d0:	81 e0       	ldi	r24, 0x01	; 1
     4d2:	09 17       	cp	r16, r25
     4d4:	08 f0       	brcs	.+2      	; 0x4d8 <__divdi3+0x1f8>
     4d6:	80 e0       	ldi	r24, 0x00	; 0
     4d8:	18 2b       	or	r17, r24
     4da:	87 2d       	mov	r24, r7
     4dc:	81 95       	neg	r24
     4de:	81 1b       	sub	r24, r17
     4e0:	a9 86       	std	Y+9, r10	; 0x09
     4e2:	6a 87       	std	Y+10, r22	; 0x0a
     4e4:	5b 87       	std	Y+11, r21	; 0x0b
     4e6:	4c 87       	std	Y+12, r20	; 0x0c
     4e8:	3d 87       	std	Y+13, r19	; 0x0d
     4ea:	2e 87       	std	Y+14, r18	; 0x0e
     4ec:	9f 87       	std	Y+15, r25	; 0x0f
     4ee:	88 8b       	std	Y+16, r24	; 0x10
     4f0:	99 81       	ldd	r25, Y+1	; 0x01
     4f2:	2a 81       	ldd	r18, Y+2	; 0x02
     4f4:	3b 81       	ldd	r19, Y+3	; 0x03
     4f6:	4c 81       	ldd	r20, Y+4	; 0x04
     4f8:	5d 81       	ldd	r21, Y+5	; 0x05
     4fa:	6e 81       	ldd	r22, Y+6	; 0x06
     4fc:	7f 81       	ldd	r23, Y+7	; 0x07
     4fe:	a8 85       	ldd	r26, Y+8	; 0x08
     500:	b9 85       	ldd	r27, Y+9	; 0x09
     502:	1a 85       	ldd	r17, Y+10	; 0x0a
     504:	0b 85       	ldd	r16, Y+11	; 0x0b
     506:	fc 84       	ldd	r15, Y+12	; 0x0c
     508:	ed 84       	ldd	r14, Y+13	; 0x0d
     50a:	de 84       	ldd	r13, Y+14	; 0x0e
     50c:	cf 84       	ldd	r12, Y+15	; 0x0f
     50e:	b8 88       	ldd	r11, Y+16	; 0x10
     510:	88 e0       	ldi	r24, 0x08	; 8
     512:	e1 e1       	ldi	r30, 0x11	; 17
     514:	8e 2e       	mov	r8, r30
     516:	91 2c       	mov	r9, r1
     518:	8c 0e       	add	r8, r28
     51a:	9d 1e       	adc	r9, r29
     51c:	f4 01       	movw	r30, r8
     51e:	68 2e       	mov	r6, r24
     520:	11 92       	st	Z+, r1
     522:	6a 94       	dec	r6
     524:	e9 f7       	brne	.-6      	; 0x520 <__divdi3+0x240>
     526:	99 8b       	std	Y+17, r25	; 0x11
     528:	2a 8b       	std	Y+18, r18	; 0x12
     52a:	3b 8b       	std	Y+19, r19	; 0x13
     52c:	4c 8b       	std	Y+20, r20	; 0x14
     52e:	5d 8b       	std	Y+21, r21	; 0x15
     530:	6e 8b       	std	Y+22, r22	; 0x16
     532:	7f 8b       	std	Y+23, r23	; 0x17
     534:	a8 8f       	std	Y+24, r26	; 0x18
     536:	9e 01       	movw	r18, r28
     538:	27 5e       	subi	r18, 0xE7	; 231
     53a:	3f 4f       	sbci	r19, 0xFF	; 255
     53c:	f9 01       	movw	r30, r18
     53e:	11 92       	st	Z+, r1
     540:	8a 95       	dec	r24
     542:	e9 f7       	brne	.-6      	; 0x53e <__divdi3+0x25e>
     544:	b9 8f       	std	Y+25, r27	; 0x19
     546:	1a 8f       	std	Y+26, r17	; 0x1a
     548:	0b 8f       	std	Y+27, r16	; 0x1b
     54a:	fc 8e       	std	Y+28, r15	; 0x1c
     54c:	ed 8e       	std	Y+29, r14	; 0x1d
     54e:	de 8e       	std	Y+30, r13	; 0x1e
     550:	cf 8e       	std	Y+31, r12	; 0x1f
     552:	b8 a2       	std	Y+32, r11	; 0x20
     554:	29 8c       	ldd	r2, Y+25	; 0x19
     556:	3a 8c       	ldd	r3, Y+26	; 0x1a
     558:	4b 8c       	ldd	r4, Y+27	; 0x1b
     55a:	5c 8c       	ldd	r5, Y+28	; 0x1c
     55c:	ed 8c       	ldd	r14, Y+29	; 0x1d
     55e:	fe 8c       	ldd	r15, Y+30	; 0x1e
     560:	0f 8d       	ldd	r16, Y+31	; 0x1f
     562:	18 a1       	ldd	r17, Y+32	; 0x20
     564:	69 88       	ldd	r6, Y+17	; 0x11
     566:	7a 88       	ldd	r7, Y+18	; 0x12
     568:	8b 88       	ldd	r8, Y+19	; 0x13
     56a:	9c 88       	ldd	r9, Y+20	; 0x14
     56c:	21 96       	adiw	r28, 0x01	; 1
     56e:	6c ae       	std	Y+60, r6	; 0x3c
     570:	7d ae       	std	Y+61, r7	; 0x3d
     572:	8e ae       	std	Y+62, r8	; 0x3e
     574:	9f ae       	std	Y+63, r9	; 0x3f
     576:	21 97       	sbiw	r28, 0x01	; 1
     578:	6d 88       	ldd	r6, Y+21	; 0x15
     57a:	7e 88       	ldd	r7, Y+22	; 0x16
     57c:	8f 88       	ldd	r8, Y+23	; 0x17
     57e:	98 8c       	ldd	r9, Y+24	; 0x18
     580:	e1 14       	cp	r14, r1
     582:	f1 04       	cpc	r15, r1
     584:	01 05       	cpc	r16, r1
     586:	11 05       	cpc	r17, r1
     588:	09 f0       	breq	.+2      	; 0x58c <__divdi3+0x2ac>
     58a:	d9 c3       	rjmp	.+1970   	; 0xd3e <__stack+0x4df>
     58c:	62 14       	cp	r6, r2
     58e:	73 04       	cpc	r7, r3
     590:	84 04       	cpc	r8, r4
     592:	95 04       	cpc	r9, r5
     594:	08 f0       	brcs	.+2      	; 0x598 <__divdi3+0x2b8>
     596:	57 c1       	rjmp	.+686    	; 0x846 <__divdi3+0x566>
     598:	00 e0       	ldi	r16, 0x00	; 0
     59a:	20 16       	cp	r2, r16
     59c:	00 e0       	ldi	r16, 0x00	; 0
     59e:	30 06       	cpc	r3, r16
     5a0:	01 e0       	ldi	r16, 0x01	; 1
     5a2:	40 06       	cpc	r4, r16
     5a4:	00 e0       	ldi	r16, 0x00	; 0
     5a6:	50 06       	cpc	r5, r16
     5a8:	88 f4       	brcc	.+34     	; 0x5cc <__divdi3+0x2ec>
     5aa:	1f ef       	ldi	r17, 0xFF	; 255
     5ac:	21 16       	cp	r2, r17
     5ae:	31 04       	cpc	r3, r1
     5b0:	41 04       	cpc	r4, r1
     5b2:	51 04       	cpc	r5, r1
     5b4:	39 f0       	breq	.+14     	; 0x5c4 <__divdi3+0x2e4>
     5b6:	30 f0       	brcs	.+12     	; 0x5c4 <__divdi3+0x2e4>
     5b8:	48 e0       	ldi	r20, 0x08	; 8
     5ba:	e4 2e       	mov	r14, r20
     5bc:	f1 2c       	mov	r15, r1
     5be:	01 2d       	mov	r16, r1
     5c0:	11 2d       	mov	r17, r1
     5c2:	18 c0       	rjmp	.+48     	; 0x5f4 <__divdi3+0x314>
     5c4:	ee 24       	eor	r14, r14
     5c6:	ff 24       	eor	r15, r15
     5c8:	87 01       	movw	r16, r14
     5ca:	14 c0       	rjmp	.+40     	; 0x5f4 <__divdi3+0x314>
     5cc:	20 e0       	ldi	r18, 0x00	; 0
     5ce:	22 16       	cp	r2, r18
     5d0:	20 e0       	ldi	r18, 0x00	; 0
     5d2:	32 06       	cpc	r3, r18
     5d4:	20 e0       	ldi	r18, 0x00	; 0
     5d6:	42 06       	cpc	r4, r18
     5d8:	21 e0       	ldi	r18, 0x01	; 1
     5da:	52 06       	cpc	r5, r18
     5dc:	30 f0       	brcs	.+12     	; 0x5ea <__divdi3+0x30a>
     5de:	38 e1       	ldi	r19, 0x18	; 24
     5e0:	e3 2e       	mov	r14, r19
     5e2:	f1 2c       	mov	r15, r1
     5e4:	01 2d       	mov	r16, r1
     5e6:	11 2d       	mov	r17, r1
     5e8:	05 c0       	rjmp	.+10     	; 0x5f4 <__divdi3+0x314>
     5ea:	20 e1       	ldi	r18, 0x10	; 16
     5ec:	e2 2e       	mov	r14, r18
     5ee:	f1 2c       	mov	r15, r1
     5f0:	01 2d       	mov	r16, r1
     5f2:	11 2d       	mov	r17, r1
     5f4:	d2 01       	movw	r26, r4
     5f6:	c1 01       	movw	r24, r2
     5f8:	0e 2c       	mov	r0, r14
     5fa:	04 c0       	rjmp	.+8      	; 0x604 <__divdi3+0x324>
     5fc:	b6 95       	lsr	r27
     5fe:	a7 95       	ror	r26
     600:	97 95       	ror	r25
     602:	87 95       	ror	r24
     604:	0a 94       	dec	r0
     606:	d2 f7       	brpl	.-12     	; 0x5fc <__divdi3+0x31c>
     608:	88 59       	subi	r24, 0x98	; 152
     60a:	9f 4f       	sbci	r25, 0xFF	; 255
     60c:	dc 01       	movw	r26, r24
     60e:	2c 91       	ld	r18, X
     610:	80 e2       	ldi	r24, 0x20	; 32
     612:	90 e0       	ldi	r25, 0x00	; 0
     614:	a0 e0       	ldi	r26, 0x00	; 0
     616:	b0 e0       	ldi	r27, 0x00	; 0
     618:	8e 19       	sub	r24, r14
     61a:	9f 09       	sbc	r25, r15
     61c:	a0 0b       	sbc	r26, r16
     61e:	b1 0b       	sbc	r27, r17
     620:	7c 01       	movw	r14, r24
     622:	8d 01       	movw	r16, r26
     624:	e2 1a       	sub	r14, r18
     626:	f1 08       	sbc	r15, r1
     628:	01 09       	sbc	r16, r1
     62a:	11 09       	sbc	r17, r1
     62c:	e1 14       	cp	r14, r1
     62e:	f1 04       	cpc	r15, r1
     630:	01 05       	cpc	r16, r1
     632:	11 05       	cpc	r17, r1
     634:	d1 f1       	breq	.+116    	; 0x6aa <__divdi3+0x3ca>
     636:	0e 2c       	mov	r0, r14
     638:	04 c0       	rjmp	.+8      	; 0x642 <__divdi3+0x362>
     63a:	22 0c       	add	r2, r2
     63c:	33 1c       	adc	r3, r3
     63e:	44 1c       	adc	r4, r4
     640:	55 1c       	adc	r5, r5
     642:	0a 94       	dec	r0
     644:	d2 f7       	brpl	.-12     	; 0x63a <__divdi3+0x35a>
     646:	a4 01       	movw	r20, r8
     648:	93 01       	movw	r18, r6
     64a:	0e 2c       	mov	r0, r14
     64c:	04 c0       	rjmp	.+8      	; 0x656 <__divdi3+0x376>
     64e:	22 0f       	add	r18, r18
     650:	33 1f       	adc	r19, r19
     652:	44 1f       	adc	r20, r20
     654:	55 1f       	adc	r21, r21
     656:	0a 94       	dec	r0
     658:	d2 f7       	brpl	.-12     	; 0x64e <__divdi3+0x36e>
     65a:	80 e2       	ldi	r24, 0x20	; 32
     65c:	90 e0       	ldi	r25, 0x00	; 0
     65e:	8e 19       	sub	r24, r14
     660:	9f 09       	sbc	r25, r15
     662:	21 96       	adiw	r28, 0x01	; 1
     664:	6c ac       	ldd	r6, Y+60	; 0x3c
     666:	7d ac       	ldd	r7, Y+61	; 0x3d
     668:	8e ac       	ldd	r8, Y+62	; 0x3e
     66a:	9f ac       	ldd	r9, Y+63	; 0x3f
     66c:	21 97       	sbiw	r28, 0x01	; 1
     66e:	04 c0       	rjmp	.+8      	; 0x678 <__divdi3+0x398>
     670:	96 94       	lsr	r9
     672:	87 94       	ror	r8
     674:	77 94       	ror	r7
     676:	67 94       	ror	r6
     678:	8a 95       	dec	r24
     67a:	d2 f7       	brpl	.-12     	; 0x670 <__divdi3+0x390>
     67c:	62 2a       	or	r6, r18
     67e:	73 2a       	or	r7, r19
     680:	84 2a       	or	r8, r20
     682:	95 2a       	or	r9, r21
     684:	21 96       	adiw	r28, 0x01	; 1
     686:	ac ac       	ldd	r10, Y+60	; 0x3c
     688:	bd ac       	ldd	r11, Y+61	; 0x3d
     68a:	ce ac       	ldd	r12, Y+62	; 0x3e
     68c:	df ac       	ldd	r13, Y+63	; 0x3f
     68e:	21 97       	sbiw	r28, 0x01	; 1
     690:	04 c0       	rjmp	.+8      	; 0x69a <__divdi3+0x3ba>
     692:	aa 0c       	add	r10, r10
     694:	bb 1c       	adc	r11, r11
     696:	cc 1c       	adc	r12, r12
     698:	dd 1c       	adc	r13, r13
     69a:	ea 94       	dec	r14
     69c:	d2 f7       	brpl	.-12     	; 0x692 <__divdi3+0x3b2>
     69e:	21 96       	adiw	r28, 0x01	; 1
     6a0:	ac ae       	std	Y+60, r10	; 0x3c
     6a2:	bd ae       	std	Y+61, r11	; 0x3d
     6a4:	ce ae       	std	Y+62, r12	; 0x3e
     6a6:	df ae       	std	Y+63, r13	; 0x3f
     6a8:	21 97       	sbiw	r28, 0x01	; 1
     6aa:	62 01       	movw	r12, r4
     6ac:	ee 24       	eor	r14, r14
     6ae:	ff 24       	eor	r15, r15
     6b0:	29 96       	adiw	r28, 0x09	; 9
     6b2:	cc ae       	std	Y+60, r12	; 0x3c
     6b4:	dd ae       	std	Y+61, r13	; 0x3d
     6b6:	ee ae       	std	Y+62, r14	; 0x3e
     6b8:	ff ae       	std	Y+63, r15	; 0x3f
     6ba:	29 97       	sbiw	r28, 0x09	; 9
     6bc:	92 01       	movw	r18, r4
     6be:	81 01       	movw	r16, r2
     6c0:	20 70       	andi	r18, 0x00	; 0
     6c2:	30 70       	andi	r19, 0x00	; 0
     6c4:	2d 96       	adiw	r28, 0x0d	; 13
     6c6:	0c af       	std	Y+60, r16	; 0x3c
     6c8:	1d af       	std	Y+61, r17	; 0x3d
     6ca:	2e af       	std	Y+62, r18	; 0x3e
     6cc:	3f af       	std	Y+63, r19	; 0x3f
     6ce:	2d 97       	sbiw	r28, 0x0d	; 13
     6d0:	c4 01       	movw	r24, r8
     6d2:	b3 01       	movw	r22, r6
     6d4:	a7 01       	movw	r20, r14
     6d6:	96 01       	movw	r18, r12
     6d8:	0e 94 67 3b 	call	0x76ce	; 0x76ce <__udivmodsi4>
     6dc:	7b 01       	movw	r14, r22
     6de:	8c 01       	movw	r16, r24
     6e0:	c4 01       	movw	r24, r8
     6e2:	b3 01       	movw	r22, r6
     6e4:	29 96       	adiw	r28, 0x09	; 9
     6e6:	2c ad       	ldd	r18, Y+60	; 0x3c
     6e8:	3d ad       	ldd	r19, Y+61	; 0x3d
     6ea:	4e ad       	ldd	r20, Y+62	; 0x3e
     6ec:	5f ad       	ldd	r21, Y+63	; 0x3f
     6ee:	29 97       	sbiw	r28, 0x09	; 9
     6f0:	0e 94 67 3b 	call	0x76ce	; 0x76ce <__udivmodsi4>
     6f4:	c9 01       	movw	r24, r18
     6f6:	da 01       	movw	r26, r20
     6f8:	3c 01       	movw	r6, r24
     6fa:	4d 01       	movw	r8, r26
     6fc:	c4 01       	movw	r24, r8
     6fe:	b3 01       	movw	r22, r6
     700:	2d 96       	adiw	r28, 0x0d	; 13
     702:	2c ad       	ldd	r18, Y+60	; 0x3c
     704:	3d ad       	ldd	r19, Y+61	; 0x3d
     706:	4e ad       	ldd	r20, Y+62	; 0x3e
     708:	5f ad       	ldd	r21, Y+63	; 0x3f
     70a:	2d 97       	sbiw	r28, 0x0d	; 13
     70c:	0e 94 34 3b 	call	0x7668	; 0x7668 <__mulsi3>
     710:	9b 01       	movw	r18, r22
     712:	ac 01       	movw	r20, r24
     714:	87 01       	movw	r16, r14
     716:	ff 24       	eor	r15, r15
     718:	ee 24       	eor	r14, r14
     71a:	21 96       	adiw	r28, 0x01	; 1
     71c:	ac ac       	ldd	r10, Y+60	; 0x3c
     71e:	bd ac       	ldd	r11, Y+61	; 0x3d
     720:	ce ac       	ldd	r12, Y+62	; 0x3e
     722:	df ac       	ldd	r13, Y+63	; 0x3f
     724:	21 97       	sbiw	r28, 0x01	; 1
     726:	c6 01       	movw	r24, r12
     728:	aa 27       	eor	r26, r26
     72a:	bb 27       	eor	r27, r27
     72c:	57 01       	movw	r10, r14
     72e:	68 01       	movw	r12, r16
     730:	a8 2a       	or	r10, r24
     732:	b9 2a       	or	r11, r25
     734:	ca 2a       	or	r12, r26
     736:	db 2a       	or	r13, r27
     738:	a2 16       	cp	r10, r18
     73a:	b3 06       	cpc	r11, r19
     73c:	c4 06       	cpc	r12, r20
     73e:	d5 06       	cpc	r13, r21
     740:	e0 f4       	brcc	.+56     	; 0x77a <__divdi3+0x49a>
     742:	08 94       	sec
     744:	61 08       	sbc	r6, r1
     746:	71 08       	sbc	r7, r1
     748:	81 08       	sbc	r8, r1
     74a:	91 08       	sbc	r9, r1
     74c:	a2 0c       	add	r10, r2
     74e:	b3 1c       	adc	r11, r3
     750:	c4 1c       	adc	r12, r4
     752:	d5 1c       	adc	r13, r5
     754:	a2 14       	cp	r10, r2
     756:	b3 04       	cpc	r11, r3
     758:	c4 04       	cpc	r12, r4
     75a:	d5 04       	cpc	r13, r5
     75c:	70 f0       	brcs	.+28     	; 0x77a <__divdi3+0x49a>
     75e:	a2 16       	cp	r10, r18
     760:	b3 06       	cpc	r11, r19
     762:	c4 06       	cpc	r12, r20
     764:	d5 06       	cpc	r13, r21
     766:	48 f4       	brcc	.+18     	; 0x77a <__divdi3+0x49a>
     768:	08 94       	sec
     76a:	61 08       	sbc	r6, r1
     76c:	71 08       	sbc	r7, r1
     76e:	81 08       	sbc	r8, r1
     770:	91 08       	sbc	r9, r1
     772:	a2 0c       	add	r10, r2
     774:	b3 1c       	adc	r11, r3
     776:	c4 1c       	adc	r12, r4
     778:	d5 1c       	adc	r13, r5
     77a:	a2 1a       	sub	r10, r18
     77c:	b3 0a       	sbc	r11, r19
     77e:	c4 0a       	sbc	r12, r20
     780:	d5 0a       	sbc	r13, r21
     782:	c6 01       	movw	r24, r12
     784:	b5 01       	movw	r22, r10
     786:	29 96       	adiw	r28, 0x09	; 9
     788:	2c ad       	ldd	r18, Y+60	; 0x3c
     78a:	3d ad       	ldd	r19, Y+61	; 0x3d
     78c:	4e ad       	ldd	r20, Y+62	; 0x3e
     78e:	5f ad       	ldd	r21, Y+63	; 0x3f
     790:	29 97       	sbiw	r28, 0x09	; 9
     792:	0e 94 67 3b 	call	0x76ce	; 0x76ce <__udivmodsi4>
     796:	7b 01       	movw	r14, r22
     798:	8c 01       	movw	r16, r24
     79a:	c6 01       	movw	r24, r12
     79c:	b5 01       	movw	r22, r10
     79e:	29 96       	adiw	r28, 0x09	; 9
     7a0:	2c ad       	ldd	r18, Y+60	; 0x3c
     7a2:	3d ad       	ldd	r19, Y+61	; 0x3d
     7a4:	4e ad       	ldd	r20, Y+62	; 0x3e
     7a6:	5f ad       	ldd	r21, Y+63	; 0x3f
     7a8:	29 97       	sbiw	r28, 0x09	; 9
     7aa:	0e 94 67 3b 	call	0x76ce	; 0x76ce <__udivmodsi4>
     7ae:	c9 01       	movw	r24, r18
     7b0:	da 01       	movw	r26, r20
     7b2:	5c 01       	movw	r10, r24
     7b4:	6d 01       	movw	r12, r26
     7b6:	c6 01       	movw	r24, r12
     7b8:	b5 01       	movw	r22, r10
     7ba:	2d 96       	adiw	r28, 0x0d	; 13
     7bc:	2c ad       	ldd	r18, Y+60	; 0x3c
     7be:	3d ad       	ldd	r19, Y+61	; 0x3d
     7c0:	4e ad       	ldd	r20, Y+62	; 0x3e
     7c2:	5f ad       	ldd	r21, Y+63	; 0x3f
     7c4:	2d 97       	sbiw	r28, 0x0d	; 13
     7c6:	0e 94 34 3b 	call	0x7668	; 0x7668 <__mulsi3>
     7ca:	9b 01       	movw	r18, r22
     7cc:	ac 01       	movw	r20, r24
     7ce:	87 01       	movw	r16, r14
     7d0:	ff 24       	eor	r15, r15
     7d2:	ee 24       	eor	r14, r14
     7d4:	21 96       	adiw	r28, 0x01	; 1
     7d6:	8c ad       	ldd	r24, Y+60	; 0x3c
     7d8:	9d ad       	ldd	r25, Y+61	; 0x3d
     7da:	ae ad       	ldd	r26, Y+62	; 0x3e
     7dc:	bf ad       	ldd	r27, Y+63	; 0x3f
     7de:	21 97       	sbiw	r28, 0x01	; 1
     7e0:	a0 70       	andi	r26, 0x00	; 0
     7e2:	b0 70       	andi	r27, 0x00	; 0
     7e4:	e8 2a       	or	r14, r24
     7e6:	f9 2a       	or	r15, r25
     7e8:	0a 2b       	or	r16, r26
     7ea:	1b 2b       	or	r17, r27
     7ec:	e2 16       	cp	r14, r18
     7ee:	f3 06       	cpc	r15, r19
     7f0:	04 07       	cpc	r16, r20
     7f2:	15 07       	cpc	r17, r21
     7f4:	c0 f4       	brcc	.+48     	; 0x826 <__divdi3+0x546>
     7f6:	08 94       	sec
     7f8:	a1 08       	sbc	r10, r1
     7fa:	b1 08       	sbc	r11, r1
     7fc:	c1 08       	sbc	r12, r1
     7fe:	d1 08       	sbc	r13, r1
     800:	e2 0c       	add	r14, r2
     802:	f3 1c       	adc	r15, r3
     804:	04 1d       	adc	r16, r4
     806:	15 1d       	adc	r17, r5
     808:	e2 14       	cp	r14, r2
     80a:	f3 04       	cpc	r15, r3
     80c:	04 05       	cpc	r16, r4
     80e:	15 05       	cpc	r17, r5
     810:	50 f0       	brcs	.+20     	; 0x826 <__divdi3+0x546>
     812:	e2 16       	cp	r14, r18
     814:	f3 06       	cpc	r15, r19
     816:	04 07       	cpc	r16, r20
     818:	15 07       	cpc	r17, r21
     81a:	28 f4       	brcc	.+10     	; 0x826 <__divdi3+0x546>
     81c:	08 94       	sec
     81e:	a1 08       	sbc	r10, r1
     820:	b1 08       	sbc	r11, r1
     822:	c1 08       	sbc	r12, r1
     824:	d1 08       	sbc	r13, r1
     826:	d3 01       	movw	r26, r6
     828:	99 27       	eor	r25, r25
     82a:	88 27       	eor	r24, r24
     82c:	86 01       	movw	r16, r12
     82e:	75 01       	movw	r14, r10
     830:	e8 2a       	or	r14, r24
     832:	f9 2a       	or	r15, r25
     834:	0a 2b       	or	r16, r26
     836:	1b 2b       	or	r17, r27
     838:	25 96       	adiw	r28, 0x05	; 5
     83a:	ec ae       	std	Y+60, r14	; 0x3c
     83c:	fd ae       	std	Y+61, r15	; 0x3d
     83e:	0e af       	std	Y+62, r16	; 0x3e
     840:	1f af       	std	Y+63, r17	; 0x3f
     842:	25 97       	sbiw	r28, 0x05	; 5
     844:	eb c4       	rjmp	.+2518   	; 0x121c <__stack+0x9bd>
     846:	21 14       	cp	r2, r1
     848:	31 04       	cpc	r3, r1
     84a:	41 04       	cpc	r4, r1
     84c:	51 04       	cpc	r5, r1
     84e:	71 f4       	brne	.+28     	; 0x86c <__stack+0xd>
     850:	61 e0       	ldi	r22, 0x01	; 1
     852:	70 e0       	ldi	r23, 0x00	; 0
     854:	80 e0       	ldi	r24, 0x00	; 0
     856:	90 e0       	ldi	r25, 0x00	; 0
     858:	20 e0       	ldi	r18, 0x00	; 0
     85a:	30 e0       	ldi	r19, 0x00	; 0
     85c:	40 e0       	ldi	r20, 0x00	; 0
     85e:	50 e0       	ldi	r21, 0x00	; 0
     860:	0e 94 67 3b 	call	0x76ce	; 0x76ce <__udivmodsi4>
     864:	c9 01       	movw	r24, r18
     866:	da 01       	movw	r26, r20
     868:	1c 01       	movw	r2, r24
     86a:	2d 01       	movw	r4, r26
     86c:	00 e0       	ldi	r16, 0x00	; 0
     86e:	20 16       	cp	r2, r16
     870:	00 e0       	ldi	r16, 0x00	; 0
     872:	30 06       	cpc	r3, r16
     874:	01 e0       	ldi	r16, 0x01	; 1
     876:	40 06       	cpc	r4, r16
     878:	00 e0       	ldi	r16, 0x00	; 0
     87a:	50 06       	cpc	r5, r16
     87c:	88 f4       	brcc	.+34     	; 0x8a0 <__stack+0x41>
     87e:	1f ef       	ldi	r17, 0xFF	; 255
     880:	21 16       	cp	r2, r17
     882:	31 04       	cpc	r3, r1
     884:	41 04       	cpc	r4, r1
     886:	51 04       	cpc	r5, r1
     888:	31 f0       	breq	.+12     	; 0x896 <__stack+0x37>
     88a:	28 f0       	brcs	.+10     	; 0x896 <__stack+0x37>
     88c:	48 e0       	ldi	r20, 0x08	; 8
     88e:	50 e0       	ldi	r21, 0x00	; 0
     890:	60 e0       	ldi	r22, 0x00	; 0
     892:	70 e0       	ldi	r23, 0x00	; 0
     894:	17 c0       	rjmp	.+46     	; 0x8c4 <__stack+0x65>
     896:	40 e0       	ldi	r20, 0x00	; 0
     898:	50 e0       	ldi	r21, 0x00	; 0
     89a:	60 e0       	ldi	r22, 0x00	; 0
     89c:	70 e0       	ldi	r23, 0x00	; 0
     89e:	12 c0       	rjmp	.+36     	; 0x8c4 <__stack+0x65>
     8a0:	20 e0       	ldi	r18, 0x00	; 0
     8a2:	22 16       	cp	r2, r18
     8a4:	20 e0       	ldi	r18, 0x00	; 0
     8a6:	32 06       	cpc	r3, r18
     8a8:	20 e0       	ldi	r18, 0x00	; 0
     8aa:	42 06       	cpc	r4, r18
     8ac:	21 e0       	ldi	r18, 0x01	; 1
     8ae:	52 06       	cpc	r5, r18
     8b0:	28 f0       	brcs	.+10     	; 0x8bc <__stack+0x5d>
     8b2:	48 e1       	ldi	r20, 0x18	; 24
     8b4:	50 e0       	ldi	r21, 0x00	; 0
     8b6:	60 e0       	ldi	r22, 0x00	; 0
     8b8:	70 e0       	ldi	r23, 0x00	; 0
     8ba:	04 c0       	rjmp	.+8      	; 0x8c4 <__stack+0x65>
     8bc:	40 e1       	ldi	r20, 0x10	; 16
     8be:	50 e0       	ldi	r21, 0x00	; 0
     8c0:	60 e0       	ldi	r22, 0x00	; 0
     8c2:	70 e0       	ldi	r23, 0x00	; 0
     8c4:	d2 01       	movw	r26, r4
     8c6:	c1 01       	movw	r24, r2
     8c8:	04 2e       	mov	r0, r20
     8ca:	04 c0       	rjmp	.+8      	; 0x8d4 <__stack+0x75>
     8cc:	b6 95       	lsr	r27
     8ce:	a7 95       	ror	r26
     8d0:	97 95       	ror	r25
     8d2:	87 95       	ror	r24
     8d4:	0a 94       	dec	r0
     8d6:	d2 f7       	brpl	.-12     	; 0x8cc <__stack+0x6d>
     8d8:	88 59       	subi	r24, 0x98	; 152
     8da:	9f 4f       	sbci	r25, 0xFF	; 255
     8dc:	dc 01       	movw	r26, r24
     8de:	2c 91       	ld	r18, X
     8e0:	e0 e2       	ldi	r30, 0x20	; 32
     8e2:	ee 2e       	mov	r14, r30
     8e4:	f1 2c       	mov	r15, r1
     8e6:	01 2d       	mov	r16, r1
     8e8:	11 2d       	mov	r17, r1
     8ea:	d8 01       	movw	r26, r16
     8ec:	c7 01       	movw	r24, r14
     8ee:	84 1b       	sub	r24, r20
     8f0:	95 0b       	sbc	r25, r21
     8f2:	a6 0b       	sbc	r26, r22
     8f4:	b7 0b       	sbc	r27, r23
     8f6:	82 1b       	sub	r24, r18
     8f8:	91 09       	sbc	r25, r1
     8fa:	a1 09       	sbc	r26, r1
     8fc:	b1 09       	sbc	r27, r1
     8fe:	00 97       	sbiw	r24, 0x00	; 0
     900:	a1 05       	cpc	r26, r1
     902:	b1 05       	cpc	r27, r1
     904:	61 f4       	brne	.+24     	; 0x91e <__stack+0xbf>
     906:	64 01       	movw	r12, r8
     908:	53 01       	movw	r10, r6
     90a:	a2 18       	sub	r10, r2
     90c:	b3 08       	sbc	r11, r3
     90e:	c4 08       	sbc	r12, r4
     910:	d5 08       	sbc	r13, r5
     912:	31 e0       	ldi	r19, 0x01	; 1
     914:	63 2e       	mov	r6, r19
     916:	71 2c       	mov	r7, r1
     918:	81 2c       	mov	r8, r1
     91a:	91 2c       	mov	r9, r1
     91c:	24 c1       	rjmp	.+584    	; 0xb66 <__stack+0x307>
     91e:	e3 96       	adiw	r28, 0x33	; 51
     920:	8f af       	std	Y+63, r24	; 0x3f
     922:	e3 97       	sbiw	r28, 0x33	; 51
     924:	08 2e       	mov	r0, r24
     926:	04 c0       	rjmp	.+8      	; 0x930 <__stack+0xd1>
     928:	22 0c       	add	r2, r2
     92a:	33 1c       	adc	r3, r3
     92c:	44 1c       	adc	r4, r4
     92e:	55 1c       	adc	r5, r5
     930:	0a 94       	dec	r0
     932:	d2 f7       	brpl	.-12     	; 0x928 <__stack+0xc9>
     934:	ee 2d       	mov	r30, r14
     936:	e8 1b       	sub	r30, r24
     938:	64 01       	movw	r12, r8
     93a:	53 01       	movw	r10, r6
     93c:	0e 2e       	mov	r0, r30
     93e:	04 c0       	rjmp	.+8      	; 0x948 <__stack+0xe9>
     940:	d6 94       	lsr	r13
     942:	c7 94       	ror	r12
     944:	b7 94       	ror	r11
     946:	a7 94       	ror	r10
     948:	0a 94       	dec	r0
     94a:	d2 f7       	brpl	.-12     	; 0x940 <__stack+0xe1>
     94c:	a4 01       	movw	r20, r8
     94e:	93 01       	movw	r18, r6
     950:	e3 96       	adiw	r28, 0x33	; 51
     952:	0f ac       	ldd	r0, Y+63	; 0x3f
     954:	e3 97       	sbiw	r28, 0x33	; 51
     956:	04 c0       	rjmp	.+8      	; 0x960 <__stack+0x101>
     958:	22 0f       	add	r18, r18
     95a:	33 1f       	adc	r19, r19
     95c:	44 1f       	adc	r20, r20
     95e:	55 1f       	adc	r21, r21
     960:	0a 94       	dec	r0
     962:	d2 f7       	brpl	.-12     	; 0x958 <__stack+0xf9>
     964:	21 96       	adiw	r28, 0x01	; 1
     966:	6c ac       	ldd	r6, Y+60	; 0x3c
     968:	7d ac       	ldd	r7, Y+61	; 0x3d
     96a:	8e ac       	ldd	r8, Y+62	; 0x3e
     96c:	9f ac       	ldd	r9, Y+63	; 0x3f
     96e:	21 97       	sbiw	r28, 0x01	; 1
     970:	0e 2e       	mov	r0, r30
     972:	04 c0       	rjmp	.+8      	; 0x97c <__stack+0x11d>
     974:	96 94       	lsr	r9
     976:	87 94       	ror	r8
     978:	77 94       	ror	r7
     97a:	67 94       	ror	r6
     97c:	0a 94       	dec	r0
     97e:	d2 f7       	brpl	.-12     	; 0x974 <__stack+0x115>
     980:	84 01       	movw	r16, r8
     982:	73 01       	movw	r14, r6
     984:	e2 2a       	or	r14, r18
     986:	f3 2a       	or	r15, r19
     988:	04 2b       	or	r16, r20
     98a:	15 2b       	or	r17, r21
     98c:	e9 ae       	std	Y+57, r14	; 0x39
     98e:	fa ae       	std	Y+58, r15	; 0x3a
     990:	0b af       	std	Y+59, r16	; 0x3b
     992:	1c af       	std	Y+60, r17	; 0x3c
     994:	32 01       	movw	r6, r4
     996:	88 24       	eor	r8, r8
     998:	99 24       	eor	r9, r9
     99a:	92 01       	movw	r18, r4
     99c:	81 01       	movw	r16, r2
     99e:	20 70       	andi	r18, 0x00	; 0
     9a0:	30 70       	andi	r19, 0x00	; 0
     9a2:	61 96       	adiw	r28, 0x11	; 17
     9a4:	0c af       	std	Y+60, r16	; 0x3c
     9a6:	1d af       	std	Y+61, r17	; 0x3d
     9a8:	2e af       	std	Y+62, r18	; 0x3e
     9aa:	3f af       	std	Y+63, r19	; 0x3f
     9ac:	61 97       	sbiw	r28, 0x11	; 17
     9ae:	c6 01       	movw	r24, r12
     9b0:	b5 01       	movw	r22, r10
     9b2:	a4 01       	movw	r20, r8
     9b4:	93 01       	movw	r18, r6
     9b6:	0e 94 67 3b 	call	0x76ce	; 0x76ce <__udivmodsi4>
     9ba:	7b 01       	movw	r14, r22
     9bc:	8c 01       	movw	r16, r24
     9be:	c6 01       	movw	r24, r12
     9c0:	b5 01       	movw	r22, r10
     9c2:	a4 01       	movw	r20, r8
     9c4:	93 01       	movw	r18, r6
     9c6:	0e 94 67 3b 	call	0x76ce	; 0x76ce <__udivmodsi4>
     9ca:	c9 01       	movw	r24, r18
     9cc:	da 01       	movw	r26, r20
     9ce:	65 96       	adiw	r28, 0x15	; 21
     9d0:	8c af       	std	Y+60, r24	; 0x3c
     9d2:	9d af       	std	Y+61, r25	; 0x3d
     9d4:	ae af       	std	Y+62, r26	; 0x3e
     9d6:	bf af       	std	Y+63, r27	; 0x3f
     9d8:	65 97       	sbiw	r28, 0x15	; 21
     9da:	bc 01       	movw	r22, r24
     9dc:	cd 01       	movw	r24, r26
     9de:	61 96       	adiw	r28, 0x11	; 17
     9e0:	2c ad       	ldd	r18, Y+60	; 0x3c
     9e2:	3d ad       	ldd	r19, Y+61	; 0x3d
     9e4:	4e ad       	ldd	r20, Y+62	; 0x3e
     9e6:	5f ad       	ldd	r21, Y+63	; 0x3f
     9e8:	61 97       	sbiw	r28, 0x11	; 17
     9ea:	0e 94 34 3b 	call	0x7668	; 0x7668 <__mulsi3>
     9ee:	9b 01       	movw	r18, r22
     9f0:	ac 01       	movw	r20, r24
     9f2:	87 01       	movw	r16, r14
     9f4:	ff 24       	eor	r15, r15
     9f6:	ee 24       	eor	r14, r14
     9f8:	a9 ac       	ldd	r10, Y+57	; 0x39
     9fa:	ba ac       	ldd	r11, Y+58	; 0x3a
     9fc:	cb ac       	ldd	r12, Y+59	; 0x3b
     9fe:	dc ac       	ldd	r13, Y+60	; 0x3c
     a00:	c6 01       	movw	r24, r12
     a02:	aa 27       	eor	r26, r26
     a04:	bb 27       	eor	r27, r27
     a06:	5c 01       	movw	r10, r24
     a08:	6d 01       	movw	r12, r26
     a0a:	ae 28       	or	r10, r14
     a0c:	bf 28       	or	r11, r15
     a0e:	c0 2a       	or	r12, r16
     a10:	d1 2a       	or	r13, r17
     a12:	a2 16       	cp	r10, r18
     a14:	b3 06       	cpc	r11, r19
     a16:	c4 06       	cpc	r12, r20
     a18:	d5 06       	cpc	r13, r21
     a1a:	60 f5       	brcc	.+88     	; 0xa74 <__stack+0x215>
     a1c:	65 96       	adiw	r28, 0x15	; 21
     a1e:	6c ad       	ldd	r22, Y+60	; 0x3c
     a20:	7d ad       	ldd	r23, Y+61	; 0x3d
     a22:	8e ad       	ldd	r24, Y+62	; 0x3e
     a24:	9f ad       	ldd	r25, Y+63	; 0x3f
     a26:	65 97       	sbiw	r28, 0x15	; 21
     a28:	61 50       	subi	r22, 0x01	; 1
     a2a:	70 40       	sbci	r23, 0x00	; 0
     a2c:	80 40       	sbci	r24, 0x00	; 0
     a2e:	90 40       	sbci	r25, 0x00	; 0
     a30:	65 96       	adiw	r28, 0x15	; 21
     a32:	6c af       	std	Y+60, r22	; 0x3c
     a34:	7d af       	std	Y+61, r23	; 0x3d
     a36:	8e af       	std	Y+62, r24	; 0x3e
     a38:	9f af       	std	Y+63, r25	; 0x3f
     a3a:	65 97       	sbiw	r28, 0x15	; 21
     a3c:	a2 0c       	add	r10, r2
     a3e:	b3 1c       	adc	r11, r3
     a40:	c4 1c       	adc	r12, r4
     a42:	d5 1c       	adc	r13, r5
     a44:	a2 14       	cp	r10, r2
     a46:	b3 04       	cpc	r11, r3
     a48:	c4 04       	cpc	r12, r4
     a4a:	d5 04       	cpc	r13, r5
     a4c:	98 f0       	brcs	.+38     	; 0xa74 <__stack+0x215>
     a4e:	a2 16       	cp	r10, r18
     a50:	b3 06       	cpc	r11, r19
     a52:	c4 06       	cpc	r12, r20
     a54:	d5 06       	cpc	r13, r21
     a56:	70 f4       	brcc	.+28     	; 0xa74 <__stack+0x215>
     a58:	61 50       	subi	r22, 0x01	; 1
     a5a:	70 40       	sbci	r23, 0x00	; 0
     a5c:	80 40       	sbci	r24, 0x00	; 0
     a5e:	90 40       	sbci	r25, 0x00	; 0
     a60:	65 96       	adiw	r28, 0x15	; 21
     a62:	6c af       	std	Y+60, r22	; 0x3c
     a64:	7d af       	std	Y+61, r23	; 0x3d
     a66:	8e af       	std	Y+62, r24	; 0x3e
     a68:	9f af       	std	Y+63, r25	; 0x3f
     a6a:	65 97       	sbiw	r28, 0x15	; 21
     a6c:	a2 0c       	add	r10, r2
     a6e:	b3 1c       	adc	r11, r3
     a70:	c4 1c       	adc	r12, r4
     a72:	d5 1c       	adc	r13, r5
     a74:	a2 1a       	sub	r10, r18
     a76:	b3 0a       	sbc	r11, r19
     a78:	c4 0a       	sbc	r12, r20
     a7a:	d5 0a       	sbc	r13, r21
     a7c:	c6 01       	movw	r24, r12
     a7e:	b5 01       	movw	r22, r10
     a80:	a4 01       	movw	r20, r8
     a82:	93 01       	movw	r18, r6
     a84:	0e 94 67 3b 	call	0x76ce	; 0x76ce <__udivmodsi4>
     a88:	7b 01       	movw	r14, r22
     a8a:	8c 01       	movw	r16, r24
     a8c:	c6 01       	movw	r24, r12
     a8e:	b5 01       	movw	r22, r10
     a90:	a4 01       	movw	r20, r8
     a92:	93 01       	movw	r18, r6
     a94:	0e 94 67 3b 	call	0x76ce	; 0x76ce <__udivmodsi4>
     a98:	c9 01       	movw	r24, r18
     a9a:	da 01       	movw	r26, r20
     a9c:	3c 01       	movw	r6, r24
     a9e:	4d 01       	movw	r8, r26
     aa0:	c4 01       	movw	r24, r8
     aa2:	b3 01       	movw	r22, r6
     aa4:	61 96       	adiw	r28, 0x11	; 17
     aa6:	2c ad       	ldd	r18, Y+60	; 0x3c
     aa8:	3d ad       	ldd	r19, Y+61	; 0x3d
     aaa:	4e ad       	ldd	r20, Y+62	; 0x3e
     aac:	5f ad       	ldd	r21, Y+63	; 0x3f
     aae:	61 97       	sbiw	r28, 0x11	; 17
     ab0:	0e 94 34 3b 	call	0x7668	; 0x7668 <__mulsi3>
     ab4:	9b 01       	movw	r18, r22
     ab6:	ac 01       	movw	r20, r24
     ab8:	87 01       	movw	r16, r14
     aba:	ff 24       	eor	r15, r15
     abc:	ee 24       	eor	r14, r14
     abe:	89 ad       	ldd	r24, Y+57	; 0x39
     ac0:	9a ad       	ldd	r25, Y+58	; 0x3a
     ac2:	ab ad       	ldd	r26, Y+59	; 0x3b
     ac4:	bc ad       	ldd	r27, Y+60	; 0x3c
     ac6:	a0 70       	andi	r26, 0x00	; 0
     ac8:	b0 70       	andi	r27, 0x00	; 0
     aca:	57 01       	movw	r10, r14
     acc:	68 01       	movw	r12, r16
     ace:	a8 2a       	or	r10, r24
     ad0:	b9 2a       	or	r11, r25
     ad2:	ca 2a       	or	r12, r26
     ad4:	db 2a       	or	r13, r27
     ad6:	a2 16       	cp	r10, r18
     ad8:	b3 06       	cpc	r11, r19
     ada:	c4 06       	cpc	r12, r20
     adc:	d5 06       	cpc	r13, r21
     ade:	e0 f4       	brcc	.+56     	; 0xb18 <__stack+0x2b9>
     ae0:	08 94       	sec
     ae2:	61 08       	sbc	r6, r1
     ae4:	71 08       	sbc	r7, r1
     ae6:	81 08       	sbc	r8, r1
     ae8:	91 08       	sbc	r9, r1
     aea:	a2 0c       	add	r10, r2
     aec:	b3 1c       	adc	r11, r3
     aee:	c4 1c       	adc	r12, r4
     af0:	d5 1c       	adc	r13, r5
     af2:	a2 14       	cp	r10, r2
     af4:	b3 04       	cpc	r11, r3
     af6:	c4 04       	cpc	r12, r4
     af8:	d5 04       	cpc	r13, r5
     afa:	70 f0       	brcs	.+28     	; 0xb18 <__stack+0x2b9>
     afc:	a2 16       	cp	r10, r18
     afe:	b3 06       	cpc	r11, r19
     b00:	c4 06       	cpc	r12, r20
     b02:	d5 06       	cpc	r13, r21
     b04:	48 f4       	brcc	.+18     	; 0xb18 <__stack+0x2b9>
     b06:	08 94       	sec
     b08:	61 08       	sbc	r6, r1
     b0a:	71 08       	sbc	r7, r1
     b0c:	81 08       	sbc	r8, r1
     b0e:	91 08       	sbc	r9, r1
     b10:	a2 0c       	add	r10, r2
     b12:	b3 1c       	adc	r11, r3
     b14:	c4 1c       	adc	r12, r4
     b16:	d5 1c       	adc	r13, r5
     b18:	21 96       	adiw	r28, 0x01	; 1
     b1a:	8c ad       	ldd	r24, Y+60	; 0x3c
     b1c:	9d ad       	ldd	r25, Y+61	; 0x3d
     b1e:	ae ad       	ldd	r26, Y+62	; 0x3e
     b20:	bf ad       	ldd	r27, Y+63	; 0x3f
     b22:	21 97       	sbiw	r28, 0x01	; 1
     b24:	e3 96       	adiw	r28, 0x33	; 51
     b26:	0f ac       	ldd	r0, Y+63	; 0x3f
     b28:	e3 97       	sbiw	r28, 0x33	; 51
     b2a:	04 c0       	rjmp	.+8      	; 0xb34 <__stack+0x2d5>
     b2c:	88 0f       	add	r24, r24
     b2e:	99 1f       	adc	r25, r25
     b30:	aa 1f       	adc	r26, r26
     b32:	bb 1f       	adc	r27, r27
     b34:	0a 94       	dec	r0
     b36:	d2 f7       	brpl	.-12     	; 0xb2c <__stack+0x2cd>
     b38:	21 96       	adiw	r28, 0x01	; 1
     b3a:	8c af       	std	Y+60, r24	; 0x3c
     b3c:	9d af       	std	Y+61, r25	; 0x3d
     b3e:	ae af       	std	Y+62, r26	; 0x3e
     b40:	bf af       	std	Y+63, r27	; 0x3f
     b42:	21 97       	sbiw	r28, 0x01	; 1
     b44:	a2 1a       	sub	r10, r18
     b46:	b3 0a       	sbc	r11, r19
     b48:	c4 0a       	sbc	r12, r20
     b4a:	d5 0a       	sbc	r13, r21
     b4c:	65 96       	adiw	r28, 0x15	; 21
     b4e:	ec ac       	ldd	r14, Y+60	; 0x3c
     b50:	fd ac       	ldd	r15, Y+61	; 0x3d
     b52:	0e ad       	ldd	r16, Y+62	; 0x3e
     b54:	1f ad       	ldd	r17, Y+63	; 0x3f
     b56:	65 97       	sbiw	r28, 0x15	; 21
     b58:	d7 01       	movw	r26, r14
     b5a:	99 27       	eor	r25, r25
     b5c:	88 27       	eor	r24, r24
     b5e:	68 2a       	or	r6, r24
     b60:	79 2a       	or	r7, r25
     b62:	8a 2a       	or	r8, r26
     b64:	9b 2a       	or	r9, r27
     b66:	82 01       	movw	r16, r4
     b68:	22 27       	eor	r18, r18
     b6a:	33 27       	eor	r19, r19
     b6c:	69 96       	adiw	r28, 0x19	; 25
     b6e:	0c af       	std	Y+60, r16	; 0x3c
     b70:	1d af       	std	Y+61, r17	; 0x3d
     b72:	2e af       	std	Y+62, r18	; 0x3e
     b74:	3f af       	std	Y+63, r19	; 0x3f
     b76:	69 97       	sbiw	r28, 0x19	; 25
     b78:	a2 01       	movw	r20, r4
     b7a:	91 01       	movw	r18, r2
     b7c:	40 70       	andi	r20, 0x00	; 0
     b7e:	50 70       	andi	r21, 0x00	; 0
     b80:	6d 96       	adiw	r28, 0x1d	; 29
     b82:	2c af       	std	Y+60, r18	; 0x3c
     b84:	3d af       	std	Y+61, r19	; 0x3d
     b86:	4e af       	std	Y+62, r20	; 0x3e
     b88:	5f af       	std	Y+63, r21	; 0x3f
     b8a:	6d 97       	sbiw	r28, 0x1d	; 29
     b8c:	c6 01       	movw	r24, r12
     b8e:	b5 01       	movw	r22, r10
     b90:	69 96       	adiw	r28, 0x19	; 25
     b92:	2c ad       	ldd	r18, Y+60	; 0x3c
     b94:	3d ad       	ldd	r19, Y+61	; 0x3d
     b96:	4e ad       	ldd	r20, Y+62	; 0x3e
     b98:	5f ad       	ldd	r21, Y+63	; 0x3f
     b9a:	69 97       	sbiw	r28, 0x19	; 25
     b9c:	0e 94 67 3b 	call	0x76ce	; 0x76ce <__udivmodsi4>
     ba0:	7b 01       	movw	r14, r22
     ba2:	8c 01       	movw	r16, r24
     ba4:	c6 01       	movw	r24, r12
     ba6:	b5 01       	movw	r22, r10
     ba8:	69 96       	adiw	r28, 0x19	; 25
     baa:	2c ad       	ldd	r18, Y+60	; 0x3c
     bac:	3d ad       	ldd	r19, Y+61	; 0x3d
     bae:	4e ad       	ldd	r20, Y+62	; 0x3e
     bb0:	5f ad       	ldd	r21, Y+63	; 0x3f
     bb2:	69 97       	sbiw	r28, 0x19	; 25
     bb4:	0e 94 67 3b 	call	0x76ce	; 0x76ce <__udivmodsi4>
     bb8:	c9 01       	movw	r24, r18
     bba:	da 01       	movw	r26, r20
     bbc:	a1 96       	adiw	r28, 0x21	; 33
     bbe:	8c af       	std	Y+60, r24	; 0x3c
     bc0:	9d af       	std	Y+61, r25	; 0x3d
     bc2:	ae af       	std	Y+62, r26	; 0x3e
     bc4:	bf af       	std	Y+63, r27	; 0x3f
     bc6:	a1 97       	sbiw	r28, 0x21	; 33
     bc8:	bc 01       	movw	r22, r24
     bca:	cd 01       	movw	r24, r26
     bcc:	6d 96       	adiw	r28, 0x1d	; 29
     bce:	2c ad       	ldd	r18, Y+60	; 0x3c
     bd0:	3d ad       	ldd	r19, Y+61	; 0x3d
     bd2:	4e ad       	ldd	r20, Y+62	; 0x3e
     bd4:	5f ad       	ldd	r21, Y+63	; 0x3f
     bd6:	6d 97       	sbiw	r28, 0x1d	; 29
     bd8:	0e 94 34 3b 	call	0x7668	; 0x7668 <__mulsi3>
     bdc:	9b 01       	movw	r18, r22
     bde:	ac 01       	movw	r20, r24
     be0:	87 01       	movw	r16, r14
     be2:	ff 24       	eor	r15, r15
     be4:	ee 24       	eor	r14, r14
     be6:	21 96       	adiw	r28, 0x01	; 1
     be8:	ac ac       	ldd	r10, Y+60	; 0x3c
     bea:	bd ac       	ldd	r11, Y+61	; 0x3d
     bec:	ce ac       	ldd	r12, Y+62	; 0x3e
     bee:	df ac       	ldd	r13, Y+63	; 0x3f
     bf0:	21 97       	sbiw	r28, 0x01	; 1
     bf2:	c6 01       	movw	r24, r12
     bf4:	aa 27       	eor	r26, r26
     bf6:	bb 27       	eor	r27, r27
     bf8:	57 01       	movw	r10, r14
     bfa:	68 01       	movw	r12, r16
     bfc:	a8 2a       	or	r10, r24
     bfe:	b9 2a       	or	r11, r25
     c00:	ca 2a       	or	r12, r26
     c02:	db 2a       	or	r13, r27
     c04:	a2 16       	cp	r10, r18
     c06:	b3 06       	cpc	r11, r19
     c08:	c4 06       	cpc	r12, r20
     c0a:	d5 06       	cpc	r13, r21
     c0c:	60 f5       	brcc	.+88     	; 0xc66 <__stack+0x407>
     c0e:	a1 96       	adiw	r28, 0x21	; 33
     c10:	6c ad       	ldd	r22, Y+60	; 0x3c
     c12:	7d ad       	ldd	r23, Y+61	; 0x3d
     c14:	8e ad       	ldd	r24, Y+62	; 0x3e
     c16:	9f ad       	ldd	r25, Y+63	; 0x3f
     c18:	a1 97       	sbiw	r28, 0x21	; 33
     c1a:	61 50       	subi	r22, 0x01	; 1
     c1c:	70 40       	sbci	r23, 0x00	; 0
     c1e:	80 40       	sbci	r24, 0x00	; 0
     c20:	90 40       	sbci	r25, 0x00	; 0
     c22:	a1 96       	adiw	r28, 0x21	; 33
     c24:	6c af       	std	Y+60, r22	; 0x3c
     c26:	7d af       	std	Y+61, r23	; 0x3d
     c28:	8e af       	std	Y+62, r24	; 0x3e
     c2a:	9f af       	std	Y+63, r25	; 0x3f
     c2c:	a1 97       	sbiw	r28, 0x21	; 33
     c2e:	a2 0c       	add	r10, r2
     c30:	b3 1c       	adc	r11, r3
     c32:	c4 1c       	adc	r12, r4
     c34:	d5 1c       	adc	r13, r5
     c36:	a2 14       	cp	r10, r2
     c38:	b3 04       	cpc	r11, r3
     c3a:	c4 04       	cpc	r12, r4
     c3c:	d5 04       	cpc	r13, r5
     c3e:	98 f0       	brcs	.+38     	; 0xc66 <__stack+0x407>
     c40:	a2 16       	cp	r10, r18
     c42:	b3 06       	cpc	r11, r19
     c44:	c4 06       	cpc	r12, r20
     c46:	d5 06       	cpc	r13, r21
     c48:	70 f4       	brcc	.+28     	; 0xc66 <__stack+0x407>
     c4a:	61 50       	subi	r22, 0x01	; 1
     c4c:	70 40       	sbci	r23, 0x00	; 0
     c4e:	80 40       	sbci	r24, 0x00	; 0
     c50:	90 40       	sbci	r25, 0x00	; 0
     c52:	a1 96       	adiw	r28, 0x21	; 33
     c54:	6c af       	std	Y+60, r22	; 0x3c
     c56:	7d af       	std	Y+61, r23	; 0x3d
     c58:	8e af       	std	Y+62, r24	; 0x3e
     c5a:	9f af       	std	Y+63, r25	; 0x3f
     c5c:	a1 97       	sbiw	r28, 0x21	; 33
     c5e:	a2 0c       	add	r10, r2
     c60:	b3 1c       	adc	r11, r3
     c62:	c4 1c       	adc	r12, r4
     c64:	d5 1c       	adc	r13, r5
     c66:	a2 1a       	sub	r10, r18
     c68:	b3 0a       	sbc	r11, r19
     c6a:	c4 0a       	sbc	r12, r20
     c6c:	d5 0a       	sbc	r13, r21
     c6e:	c6 01       	movw	r24, r12
     c70:	b5 01       	movw	r22, r10
     c72:	69 96       	adiw	r28, 0x19	; 25
     c74:	2c ad       	ldd	r18, Y+60	; 0x3c
     c76:	3d ad       	ldd	r19, Y+61	; 0x3d
     c78:	4e ad       	ldd	r20, Y+62	; 0x3e
     c7a:	5f ad       	ldd	r21, Y+63	; 0x3f
     c7c:	69 97       	sbiw	r28, 0x19	; 25
     c7e:	0e 94 67 3b 	call	0x76ce	; 0x76ce <__udivmodsi4>
     c82:	7b 01       	movw	r14, r22
     c84:	8c 01       	movw	r16, r24
     c86:	c6 01       	movw	r24, r12
     c88:	b5 01       	movw	r22, r10
     c8a:	69 96       	adiw	r28, 0x19	; 25
     c8c:	2c ad       	ldd	r18, Y+60	; 0x3c
     c8e:	3d ad       	ldd	r19, Y+61	; 0x3d
     c90:	4e ad       	ldd	r20, Y+62	; 0x3e
     c92:	5f ad       	ldd	r21, Y+63	; 0x3f
     c94:	69 97       	sbiw	r28, 0x19	; 25
     c96:	0e 94 67 3b 	call	0x76ce	; 0x76ce <__udivmodsi4>
     c9a:	c9 01       	movw	r24, r18
     c9c:	da 01       	movw	r26, r20
     c9e:	5c 01       	movw	r10, r24
     ca0:	6d 01       	movw	r12, r26
     ca2:	c6 01       	movw	r24, r12
     ca4:	b5 01       	movw	r22, r10
     ca6:	6d 96       	adiw	r28, 0x1d	; 29
     ca8:	2c ad       	ldd	r18, Y+60	; 0x3c
     caa:	3d ad       	ldd	r19, Y+61	; 0x3d
     cac:	4e ad       	ldd	r20, Y+62	; 0x3e
     cae:	5f ad       	ldd	r21, Y+63	; 0x3f
     cb0:	6d 97       	sbiw	r28, 0x1d	; 29
     cb2:	0e 94 34 3b 	call	0x7668	; 0x7668 <__mulsi3>
     cb6:	9b 01       	movw	r18, r22
     cb8:	ac 01       	movw	r20, r24
     cba:	87 01       	movw	r16, r14
     cbc:	ff 24       	eor	r15, r15
     cbe:	ee 24       	eor	r14, r14
     cc0:	21 96       	adiw	r28, 0x01	; 1
     cc2:	8c ad       	ldd	r24, Y+60	; 0x3c
     cc4:	9d ad       	ldd	r25, Y+61	; 0x3d
     cc6:	ae ad       	ldd	r26, Y+62	; 0x3e
     cc8:	bf ad       	ldd	r27, Y+63	; 0x3f
     cca:	21 97       	sbiw	r28, 0x01	; 1
     ccc:	a0 70       	andi	r26, 0x00	; 0
     cce:	b0 70       	andi	r27, 0x00	; 0
     cd0:	e8 2a       	or	r14, r24
     cd2:	f9 2a       	or	r15, r25
     cd4:	0a 2b       	or	r16, r26
     cd6:	1b 2b       	or	r17, r27
     cd8:	e2 16       	cp	r14, r18
     cda:	f3 06       	cpc	r15, r19
     cdc:	04 07       	cpc	r16, r20
     cde:	15 07       	cpc	r17, r21
     ce0:	c0 f4       	brcc	.+48     	; 0xd12 <__stack+0x4b3>
     ce2:	08 94       	sec
     ce4:	a1 08       	sbc	r10, r1
     ce6:	b1 08       	sbc	r11, r1
     ce8:	c1 08       	sbc	r12, r1
     cea:	d1 08       	sbc	r13, r1
     cec:	e2 0c       	add	r14, r2
     cee:	f3 1c       	adc	r15, r3
     cf0:	04 1d       	adc	r16, r4
     cf2:	15 1d       	adc	r17, r5
     cf4:	e2 14       	cp	r14, r2
     cf6:	f3 04       	cpc	r15, r3
     cf8:	04 05       	cpc	r16, r4
     cfa:	15 05       	cpc	r17, r5
     cfc:	50 f0       	brcs	.+20     	; 0xd12 <__stack+0x4b3>
     cfe:	e2 16       	cp	r14, r18
     d00:	f3 06       	cpc	r15, r19
     d02:	04 07       	cpc	r16, r20
     d04:	15 07       	cpc	r17, r21
     d06:	28 f4       	brcc	.+10     	; 0xd12 <__stack+0x4b3>
     d08:	08 94       	sec
     d0a:	a1 08       	sbc	r10, r1
     d0c:	b1 08       	sbc	r11, r1
     d0e:	c1 08       	sbc	r12, r1
     d10:	d1 08       	sbc	r13, r1
     d12:	a1 96       	adiw	r28, 0x21	; 33
     d14:	ec ac       	ldd	r14, Y+60	; 0x3c
     d16:	fd ac       	ldd	r15, Y+61	; 0x3d
     d18:	0e ad       	ldd	r16, Y+62	; 0x3e
     d1a:	1f ad       	ldd	r17, Y+63	; 0x3f
     d1c:	a1 97       	sbiw	r28, 0x21	; 33
     d1e:	d7 01       	movw	r26, r14
     d20:	99 27       	eor	r25, r25
     d22:	88 27       	eor	r24, r24
     d24:	96 01       	movw	r18, r12
     d26:	85 01       	movw	r16, r10
     d28:	08 2b       	or	r16, r24
     d2a:	19 2b       	or	r17, r25
     d2c:	2a 2b       	or	r18, r26
     d2e:	3b 2b       	or	r19, r27
     d30:	25 96       	adiw	r28, 0x05	; 5
     d32:	0c af       	std	Y+60, r16	; 0x3c
     d34:	1d af       	std	Y+61, r17	; 0x3d
     d36:	2e af       	std	Y+62, r18	; 0x3e
     d38:	3f af       	std	Y+63, r19	; 0x3f
     d3a:	25 97       	sbiw	r28, 0x05	; 5
     d3c:	72 c2       	rjmp	.+1252   	; 0x1222 <__stack+0x9c3>
     d3e:	6e 14       	cp	r6, r14
     d40:	7f 04       	cpc	r7, r15
     d42:	80 06       	cpc	r8, r16
     d44:	91 06       	cpc	r9, r17
     d46:	08 f4       	brcc	.+2      	; 0xd4a <__stack+0x4eb>
     d48:	5f c2       	rjmp	.+1214   	; 0x1208 <__stack+0x9a9>
     d4a:	20 e0       	ldi	r18, 0x00	; 0
     d4c:	e2 16       	cp	r14, r18
     d4e:	20 e0       	ldi	r18, 0x00	; 0
     d50:	f2 06       	cpc	r15, r18
     d52:	21 e0       	ldi	r18, 0x01	; 1
     d54:	02 07       	cpc	r16, r18
     d56:	20 e0       	ldi	r18, 0x00	; 0
     d58:	12 07       	cpc	r17, r18
     d5a:	88 f4       	brcc	.+34     	; 0xd7e <__stack+0x51f>
     d5c:	3f ef       	ldi	r19, 0xFF	; 255
     d5e:	e3 16       	cp	r14, r19
     d60:	f1 04       	cpc	r15, r1
     d62:	01 05       	cpc	r16, r1
     d64:	11 05       	cpc	r17, r1
     d66:	31 f0       	breq	.+12     	; 0xd74 <__stack+0x515>
     d68:	28 f0       	brcs	.+10     	; 0xd74 <__stack+0x515>
     d6a:	48 e0       	ldi	r20, 0x08	; 8
     d6c:	50 e0       	ldi	r21, 0x00	; 0
     d6e:	60 e0       	ldi	r22, 0x00	; 0
     d70:	70 e0       	ldi	r23, 0x00	; 0
     d72:	17 c0       	rjmp	.+46     	; 0xda2 <__stack+0x543>
     d74:	40 e0       	ldi	r20, 0x00	; 0
     d76:	50 e0       	ldi	r21, 0x00	; 0
     d78:	60 e0       	ldi	r22, 0x00	; 0
     d7a:	70 e0       	ldi	r23, 0x00	; 0
     d7c:	12 c0       	rjmp	.+36     	; 0xda2 <__stack+0x543>
     d7e:	40 e0       	ldi	r20, 0x00	; 0
     d80:	e4 16       	cp	r14, r20
     d82:	40 e0       	ldi	r20, 0x00	; 0
     d84:	f4 06       	cpc	r15, r20
     d86:	40 e0       	ldi	r20, 0x00	; 0
     d88:	04 07       	cpc	r16, r20
     d8a:	41 e0       	ldi	r20, 0x01	; 1
     d8c:	14 07       	cpc	r17, r20
     d8e:	28 f0       	brcs	.+10     	; 0xd9a <__stack+0x53b>
     d90:	48 e1       	ldi	r20, 0x18	; 24
     d92:	50 e0       	ldi	r21, 0x00	; 0
     d94:	60 e0       	ldi	r22, 0x00	; 0
     d96:	70 e0       	ldi	r23, 0x00	; 0
     d98:	04 c0       	rjmp	.+8      	; 0xda2 <__stack+0x543>
     d9a:	40 e1       	ldi	r20, 0x10	; 16
     d9c:	50 e0       	ldi	r21, 0x00	; 0
     d9e:	60 e0       	ldi	r22, 0x00	; 0
     da0:	70 e0       	ldi	r23, 0x00	; 0
     da2:	d8 01       	movw	r26, r16
     da4:	c7 01       	movw	r24, r14
     da6:	04 2e       	mov	r0, r20
     da8:	04 c0       	rjmp	.+8      	; 0xdb2 <__stack+0x553>
     daa:	b6 95       	lsr	r27
     dac:	a7 95       	ror	r26
     dae:	97 95       	ror	r25
     db0:	87 95       	ror	r24
     db2:	0a 94       	dec	r0
     db4:	d2 f7       	brpl	.-12     	; 0xdaa <__stack+0x54b>
     db6:	88 59       	subi	r24, 0x98	; 152
     db8:	9f 4f       	sbci	r25, 0xFF	; 255
     dba:	dc 01       	movw	r26, r24
     dbc:	2c 91       	ld	r18, X
     dbe:	30 e2       	ldi	r19, 0x20	; 32
     dc0:	a3 2e       	mov	r10, r19
     dc2:	b1 2c       	mov	r11, r1
     dc4:	c1 2c       	mov	r12, r1
     dc6:	d1 2c       	mov	r13, r1
     dc8:	d6 01       	movw	r26, r12
     dca:	c5 01       	movw	r24, r10
     dcc:	84 1b       	sub	r24, r20
     dce:	95 0b       	sbc	r25, r21
     dd0:	a6 0b       	sbc	r26, r22
     dd2:	b7 0b       	sbc	r27, r23
     dd4:	82 1b       	sub	r24, r18
     dd6:	91 09       	sbc	r25, r1
     dd8:	a1 09       	sbc	r26, r1
     dda:	b1 09       	sbc	r27, r1
     ddc:	00 97       	sbiw	r24, 0x00	; 0
     dde:	a1 05       	cpc	r26, r1
     de0:	b1 05       	cpc	r27, r1
     de2:	99 f4       	brne	.+38     	; 0xe0a <__stack+0x5ab>
     de4:	e6 14       	cp	r14, r6
     de6:	f7 04       	cpc	r15, r7
     de8:	08 05       	cpc	r16, r8
     dea:	19 05       	cpc	r17, r9
     dec:	08 f4       	brcc	.+2      	; 0xdf0 <__stack+0x591>
     dee:	fe c1       	rjmp	.+1020   	; 0x11ec <__stack+0x98d>
     df0:	21 96       	adiw	r28, 0x01	; 1
     df2:	6c ac       	ldd	r6, Y+60	; 0x3c
     df4:	7d ac       	ldd	r7, Y+61	; 0x3d
     df6:	8e ac       	ldd	r8, Y+62	; 0x3e
     df8:	9f ac       	ldd	r9, Y+63	; 0x3f
     dfa:	21 97       	sbiw	r28, 0x01	; 1
     dfc:	62 14       	cp	r6, r2
     dfe:	73 04       	cpc	r7, r3
     e00:	84 04       	cpc	r8, r4
     e02:	95 04       	cpc	r9, r5
     e04:	08 f0       	brcs	.+2      	; 0xe08 <__stack+0x5a9>
     e06:	f2 c1       	rjmp	.+996    	; 0x11ec <__stack+0x98d>
     e08:	ff c1       	rjmp	.+1022   	; 0x1208 <__stack+0x9a9>
     e0a:	e2 96       	adiw	r28, 0x32	; 50
     e0c:	8f af       	std	Y+63, r24	; 0x3f
     e0e:	e2 97       	sbiw	r28, 0x32	; 50
     e10:	08 2e       	mov	r0, r24
     e12:	04 c0       	rjmp	.+8      	; 0xe1c <__stack+0x5bd>
     e14:	ee 0c       	add	r14, r14
     e16:	ff 1c       	adc	r15, r15
     e18:	00 1f       	adc	r16, r16
     e1a:	11 1f       	adc	r17, r17
     e1c:	0a 94       	dec	r0
     e1e:	d2 f7       	brpl	.-12     	; 0xe14 <__stack+0x5b5>
     e20:	6a 2d       	mov	r22, r10
     e22:	68 1b       	sub	r22, r24
     e24:	d2 01       	movw	r26, r4
     e26:	c1 01       	movw	r24, r2
     e28:	06 2e       	mov	r0, r22
     e2a:	04 c0       	rjmp	.+8      	; 0xe34 <__stack+0x5d5>
     e2c:	b6 95       	lsr	r27
     e2e:	a7 95       	ror	r26
     e30:	97 95       	ror	r25
     e32:	87 95       	ror	r24
     e34:	0a 94       	dec	r0
     e36:	d2 f7       	brpl	.-12     	; 0xe2c <__stack+0x5cd>
     e38:	5c 01       	movw	r10, r24
     e3a:	6d 01       	movw	r12, r26
     e3c:	ae 28       	or	r10, r14
     e3e:	bf 28       	or	r11, r15
     e40:	c0 2a       	or	r12, r16
     e42:	d1 2a       	or	r13, r17
     e44:	ad aa       	std	Y+53, r10	; 0x35
     e46:	be aa       	std	Y+54, r11	; 0x36
     e48:	cf aa       	std	Y+55, r12	; 0x37
     e4a:	d8 ae       	std	Y+56, r13	; 0x38
     e4c:	72 01       	movw	r14, r4
     e4e:	61 01       	movw	r12, r2
     e50:	e2 96       	adiw	r28, 0x32	; 50
     e52:	0f ac       	ldd	r0, Y+63	; 0x3f
     e54:	e2 97       	sbiw	r28, 0x32	; 50
     e56:	04 c0       	rjmp	.+8      	; 0xe60 <__stack+0x601>
     e58:	cc 0c       	add	r12, r12
     e5a:	dd 1c       	adc	r13, r13
     e5c:	ee 1c       	adc	r14, r14
     e5e:	ff 1c       	adc	r15, r15
     e60:	0a 94       	dec	r0
     e62:	d2 f7       	brpl	.-12     	; 0xe58 <__stack+0x5f9>
     e64:	c9 aa       	std	Y+49, r12	; 0x31
     e66:	da aa       	std	Y+50, r13	; 0x32
     e68:	eb aa       	std	Y+51, r14	; 0x33
     e6a:	fc aa       	std	Y+52, r15	; 0x34
     e6c:	64 01       	movw	r12, r8
     e6e:	53 01       	movw	r10, r6
     e70:	06 2e       	mov	r0, r22
     e72:	04 c0       	rjmp	.+8      	; 0xe7c <__stack+0x61d>
     e74:	d6 94       	lsr	r13
     e76:	c7 94       	ror	r12
     e78:	b7 94       	ror	r11
     e7a:	a7 94       	ror	r10
     e7c:	0a 94       	dec	r0
     e7e:	d2 f7       	brpl	.-12     	; 0xe74 <__stack+0x615>
     e80:	d4 01       	movw	r26, r8
     e82:	c3 01       	movw	r24, r6
     e84:	e2 96       	adiw	r28, 0x32	; 50
     e86:	0f ac       	ldd	r0, Y+63	; 0x3f
     e88:	e2 97       	sbiw	r28, 0x32	; 50
     e8a:	04 c0       	rjmp	.+8      	; 0xe94 <__stack+0x635>
     e8c:	88 0f       	add	r24, r24
     e8e:	99 1f       	adc	r25, r25
     e90:	aa 1f       	adc	r26, r26
     e92:	bb 1f       	adc	r27, r27
     e94:	0a 94       	dec	r0
     e96:	d2 f7       	brpl	.-12     	; 0xe8c <__stack+0x62d>
     e98:	21 96       	adiw	r28, 0x01	; 1
     e9a:	ec ac       	ldd	r14, Y+60	; 0x3c
     e9c:	fd ac       	ldd	r15, Y+61	; 0x3d
     e9e:	0e ad       	ldd	r16, Y+62	; 0x3e
     ea0:	1f ad       	ldd	r17, Y+63	; 0x3f
     ea2:	21 97       	sbiw	r28, 0x01	; 1
     ea4:	04 c0       	rjmp	.+8      	; 0xeae <__stack+0x64f>
     ea6:	16 95       	lsr	r17
     ea8:	07 95       	ror	r16
     eaa:	f7 94       	ror	r15
     eac:	e7 94       	ror	r14
     eae:	6a 95       	dec	r22
     eb0:	d2 f7       	brpl	.-12     	; 0xea6 <__stack+0x647>
     eb2:	37 01       	movw	r6, r14
     eb4:	48 01       	movw	r8, r16
     eb6:	68 2a       	or	r6, r24
     eb8:	79 2a       	or	r7, r25
     eba:	8a 2a       	or	r8, r26
     ebc:	9b 2a       	or	r9, r27
     ebe:	6d a6       	std	Y+45, r6	; 0x2d
     ec0:	7e a6       	std	Y+46, r7	; 0x2e
     ec2:	8f a6       	std	Y+47, r8	; 0x2f
     ec4:	98 aa       	std	Y+48, r9	; 0x30
     ec6:	ed a8       	ldd	r14, Y+53	; 0x35
     ec8:	fe a8       	ldd	r15, Y+54	; 0x36
     eca:	0f a9       	ldd	r16, Y+55	; 0x37
     ecc:	18 ad       	ldd	r17, Y+56	; 0x38
     ece:	38 01       	movw	r6, r16
     ed0:	88 24       	eor	r8, r8
     ed2:	99 24       	eor	r9, r9
     ed4:	98 01       	movw	r18, r16
     ed6:	87 01       	movw	r16, r14
     ed8:	20 70       	andi	r18, 0x00	; 0
     eda:	30 70       	andi	r19, 0x00	; 0
     edc:	a5 96       	adiw	r28, 0x25	; 37
     ede:	0c af       	std	Y+60, r16	; 0x3c
     ee0:	1d af       	std	Y+61, r17	; 0x3d
     ee2:	2e af       	std	Y+62, r18	; 0x3e
     ee4:	3f af       	std	Y+63, r19	; 0x3f
     ee6:	a5 97       	sbiw	r28, 0x25	; 37
     ee8:	c6 01       	movw	r24, r12
     eea:	b5 01       	movw	r22, r10
     eec:	a4 01       	movw	r20, r8
     eee:	93 01       	movw	r18, r6
     ef0:	0e 94 67 3b 	call	0x76ce	; 0x76ce <__udivmodsi4>
     ef4:	7b 01       	movw	r14, r22
     ef6:	8c 01       	movw	r16, r24
     ef8:	c6 01       	movw	r24, r12
     efa:	b5 01       	movw	r22, r10
     efc:	a4 01       	movw	r20, r8
     efe:	93 01       	movw	r18, r6
     f00:	0e 94 67 3b 	call	0x76ce	; 0x76ce <__udivmodsi4>
     f04:	c9 01       	movw	r24, r18
     f06:	da 01       	movw	r26, r20
     f08:	1c 01       	movw	r2, r24
     f0a:	2d 01       	movw	r4, r26
     f0c:	c2 01       	movw	r24, r4
     f0e:	b1 01       	movw	r22, r2
     f10:	a5 96       	adiw	r28, 0x25	; 37
     f12:	2c ad       	ldd	r18, Y+60	; 0x3c
     f14:	3d ad       	ldd	r19, Y+61	; 0x3d
     f16:	4e ad       	ldd	r20, Y+62	; 0x3e
     f18:	5f ad       	ldd	r21, Y+63	; 0x3f
     f1a:	a5 97       	sbiw	r28, 0x25	; 37
     f1c:	0e 94 34 3b 	call	0x7668	; 0x7668 <__mulsi3>
     f20:	9b 01       	movw	r18, r22
     f22:	ac 01       	movw	r20, r24
     f24:	87 01       	movw	r16, r14
     f26:	ff 24       	eor	r15, r15
     f28:	ee 24       	eor	r14, r14
     f2a:	ad a4       	ldd	r10, Y+45	; 0x2d
     f2c:	be a4       	ldd	r11, Y+46	; 0x2e
     f2e:	cf a4       	ldd	r12, Y+47	; 0x2f
     f30:	d8 a8       	ldd	r13, Y+48	; 0x30
     f32:	c6 01       	movw	r24, r12
     f34:	aa 27       	eor	r26, r26
     f36:	bb 27       	eor	r27, r27
     f38:	57 01       	movw	r10, r14
     f3a:	68 01       	movw	r12, r16
     f3c:	a8 2a       	or	r10, r24
     f3e:	b9 2a       	or	r11, r25
     f40:	ca 2a       	or	r12, r26
     f42:	db 2a       	or	r13, r27
     f44:	a2 16       	cp	r10, r18
     f46:	b3 06       	cpc	r11, r19
     f48:	c4 06       	cpc	r12, r20
     f4a:	d5 06       	cpc	r13, r21
     f4c:	00 f5       	brcc	.+64     	; 0xf8e <__stack+0x72f>
     f4e:	08 94       	sec
     f50:	21 08       	sbc	r2, r1
     f52:	31 08       	sbc	r3, r1
     f54:	41 08       	sbc	r4, r1
     f56:	51 08       	sbc	r5, r1
     f58:	ed a8       	ldd	r14, Y+53	; 0x35
     f5a:	fe a8       	ldd	r15, Y+54	; 0x36
     f5c:	0f a9       	ldd	r16, Y+55	; 0x37
     f5e:	18 ad       	ldd	r17, Y+56	; 0x38
     f60:	ae 0c       	add	r10, r14
     f62:	bf 1c       	adc	r11, r15
     f64:	c0 1e       	adc	r12, r16
     f66:	d1 1e       	adc	r13, r17
     f68:	ae 14       	cp	r10, r14
     f6a:	bf 04       	cpc	r11, r15
     f6c:	c0 06       	cpc	r12, r16
     f6e:	d1 06       	cpc	r13, r17
     f70:	70 f0       	brcs	.+28     	; 0xf8e <__stack+0x72f>
     f72:	a2 16       	cp	r10, r18
     f74:	b3 06       	cpc	r11, r19
     f76:	c4 06       	cpc	r12, r20
     f78:	d5 06       	cpc	r13, r21
     f7a:	48 f4       	brcc	.+18     	; 0xf8e <__stack+0x72f>
     f7c:	08 94       	sec
     f7e:	21 08       	sbc	r2, r1
     f80:	31 08       	sbc	r3, r1
     f82:	41 08       	sbc	r4, r1
     f84:	51 08       	sbc	r5, r1
     f86:	ae 0c       	add	r10, r14
     f88:	bf 1c       	adc	r11, r15
     f8a:	c0 1e       	adc	r12, r16
     f8c:	d1 1e       	adc	r13, r17
     f8e:	a2 1a       	sub	r10, r18
     f90:	b3 0a       	sbc	r11, r19
     f92:	c4 0a       	sbc	r12, r20
     f94:	d5 0a       	sbc	r13, r21
     f96:	c6 01       	movw	r24, r12
     f98:	b5 01       	movw	r22, r10
     f9a:	a4 01       	movw	r20, r8
     f9c:	93 01       	movw	r18, r6
     f9e:	0e 94 67 3b 	call	0x76ce	; 0x76ce <__udivmodsi4>
     fa2:	7b 01       	movw	r14, r22
     fa4:	8c 01       	movw	r16, r24
     fa6:	c6 01       	movw	r24, r12
     fa8:	b5 01       	movw	r22, r10
     faa:	a4 01       	movw	r20, r8
     fac:	93 01       	movw	r18, r6
     fae:	0e 94 67 3b 	call	0x76ce	; 0x76ce <__udivmodsi4>
     fb2:	c9 01       	movw	r24, r18
     fb4:	da 01       	movw	r26, r20
     fb6:	3c 01       	movw	r6, r24
     fb8:	4d 01       	movw	r8, r26
     fba:	c4 01       	movw	r24, r8
     fbc:	b3 01       	movw	r22, r6
     fbe:	a5 96       	adiw	r28, 0x25	; 37
     fc0:	2c ad       	ldd	r18, Y+60	; 0x3c
     fc2:	3d ad       	ldd	r19, Y+61	; 0x3d
     fc4:	4e ad       	ldd	r20, Y+62	; 0x3e
     fc6:	5f ad       	ldd	r21, Y+63	; 0x3f
     fc8:	a5 97       	sbiw	r28, 0x25	; 37
     fca:	0e 94 34 3b 	call	0x7668	; 0x7668 <__mulsi3>
     fce:	9b 01       	movw	r18, r22
     fd0:	ac 01       	movw	r20, r24
     fd2:	87 01       	movw	r16, r14
     fd4:	ff 24       	eor	r15, r15
     fd6:	ee 24       	eor	r14, r14
     fd8:	8d a5       	ldd	r24, Y+45	; 0x2d
     fda:	9e a5       	ldd	r25, Y+46	; 0x2e
     fdc:	af a5       	ldd	r26, Y+47	; 0x2f
     fde:	b8 a9       	ldd	r27, Y+48	; 0x30
     fe0:	a0 70       	andi	r26, 0x00	; 0
     fe2:	b0 70       	andi	r27, 0x00	; 0
     fe4:	57 01       	movw	r10, r14
     fe6:	68 01       	movw	r12, r16
     fe8:	a8 2a       	or	r10, r24
     fea:	b9 2a       	or	r11, r25
     fec:	ca 2a       	or	r12, r26
     fee:	db 2a       	or	r13, r27
     ff0:	a2 16       	cp	r10, r18
     ff2:	b3 06       	cpc	r11, r19
     ff4:	c4 06       	cpc	r12, r20
     ff6:	d5 06       	cpc	r13, r21
     ff8:	00 f5       	brcc	.+64     	; 0x103a <__stack+0x7db>
     ffa:	08 94       	sec
     ffc:	61 08       	sbc	r6, r1
     ffe:	71 08       	sbc	r7, r1
    1000:	81 08       	sbc	r8, r1
    1002:	91 08       	sbc	r9, r1
    1004:	6d a9       	ldd	r22, Y+53	; 0x35
    1006:	7e a9       	ldd	r23, Y+54	; 0x36
    1008:	8f a9       	ldd	r24, Y+55	; 0x37
    100a:	98 ad       	ldd	r25, Y+56	; 0x38
    100c:	a6 0e       	add	r10, r22
    100e:	b7 1e       	adc	r11, r23
    1010:	c8 1e       	adc	r12, r24
    1012:	d9 1e       	adc	r13, r25
    1014:	a6 16       	cp	r10, r22
    1016:	b7 06       	cpc	r11, r23
    1018:	c8 06       	cpc	r12, r24
    101a:	d9 06       	cpc	r13, r25
    101c:	70 f0       	brcs	.+28     	; 0x103a <__stack+0x7db>
    101e:	a2 16       	cp	r10, r18
    1020:	b3 06       	cpc	r11, r19
    1022:	c4 06       	cpc	r12, r20
    1024:	d5 06       	cpc	r13, r21
    1026:	48 f4       	brcc	.+18     	; 0x103a <__stack+0x7db>
    1028:	08 94       	sec
    102a:	61 08       	sbc	r6, r1
    102c:	71 08       	sbc	r7, r1
    102e:	81 08       	sbc	r8, r1
    1030:	91 08       	sbc	r9, r1
    1032:	a6 0e       	add	r10, r22
    1034:	b7 1e       	adc	r11, r23
    1036:	c8 1e       	adc	r12, r24
    1038:	d9 1e       	adc	r13, r25
    103a:	d6 01       	movw	r26, r12
    103c:	c5 01       	movw	r24, r10
    103e:	82 1b       	sub	r24, r18
    1040:	93 0b       	sbc	r25, r19
    1042:	a4 0b       	sbc	r26, r20
    1044:	b5 0b       	sbc	r27, r21
    1046:	89 a7       	std	Y+41, r24	; 0x29
    1048:	9a a7       	std	Y+42, r25	; 0x2a
    104a:	ab a7       	std	Y+43, r26	; 0x2b
    104c:	bc a7       	std	Y+44, r27	; 0x2c
    104e:	d1 01       	movw	r26, r2
    1050:	99 27       	eor	r25, r25
    1052:	88 27       	eor	r24, r24
    1054:	64 01       	movw	r12, r8
    1056:	53 01       	movw	r10, r6
    1058:	a8 2a       	or	r10, r24
    105a:	b9 2a       	or	r11, r25
    105c:	ca 2a       	or	r12, r26
    105e:	db 2a       	or	r13, r27
    1060:	25 96       	adiw	r28, 0x05	; 5
    1062:	ac ae       	std	Y+60, r10	; 0x3c
    1064:	bd ae       	std	Y+61, r11	; 0x3d
    1066:	ce ae       	std	Y+62, r12	; 0x3e
    1068:	df ae       	std	Y+63, r13	; 0x3f
    106a:	25 97       	sbiw	r28, 0x05	; 5
    106c:	86 01       	movw	r16, r12
    106e:	75 01       	movw	r14, r10
    1070:	2f ef       	ldi	r18, 0xFF	; 255
    1072:	3f ef       	ldi	r19, 0xFF	; 255
    1074:	40 e0       	ldi	r20, 0x00	; 0
    1076:	50 e0       	ldi	r21, 0x00	; 0
    1078:	e2 22       	and	r14, r18
    107a:	f3 22       	and	r15, r19
    107c:	04 23       	and	r16, r20
    107e:	15 23       	and	r17, r21
    1080:	a6 01       	movw	r20, r12
    1082:	66 27       	eor	r22, r22
    1084:	77 27       	eor	r23, r23
    1086:	ad 96       	adiw	r28, 0x2d	; 45
    1088:	4c af       	std	Y+60, r20	; 0x3c
    108a:	5d af       	std	Y+61, r21	; 0x3d
    108c:	6e af       	std	Y+62, r22	; 0x3e
    108e:	7f af       	std	Y+63, r23	; 0x3f
    1090:	ad 97       	sbiw	r28, 0x2d	; 45
    1092:	a9 a8       	ldd	r10, Y+49	; 0x31
    1094:	ba a8       	ldd	r11, Y+50	; 0x32
    1096:	cb a8       	ldd	r12, Y+51	; 0x33
    1098:	dc a8       	ldd	r13, Y+52	; 0x34
    109a:	6f ef       	ldi	r22, 0xFF	; 255
    109c:	7f ef       	ldi	r23, 0xFF	; 255
    109e:	80 e0       	ldi	r24, 0x00	; 0
    10a0:	90 e0       	ldi	r25, 0x00	; 0
    10a2:	a6 22       	and	r10, r22
    10a4:	b7 22       	and	r11, r23
    10a6:	c8 22       	and	r12, r24
    10a8:	d9 22       	and	r13, r25
    10aa:	89 a9       	ldd	r24, Y+49	; 0x31
    10ac:	9a a9       	ldd	r25, Y+50	; 0x32
    10ae:	ab a9       	ldd	r26, Y+51	; 0x33
    10b0:	bc a9       	ldd	r27, Y+52	; 0x34
    10b2:	1d 01       	movw	r2, r26
    10b4:	44 24       	eor	r4, r4
    10b6:	55 24       	eor	r5, r5
    10b8:	c8 01       	movw	r24, r16
    10ba:	b7 01       	movw	r22, r14
    10bc:	a6 01       	movw	r20, r12
    10be:	95 01       	movw	r18, r10
    10c0:	0e 94 34 3b 	call	0x7668	; 0x7668 <__mulsi3>
    10c4:	a9 96       	adiw	r28, 0x29	; 41
    10c6:	6c af       	std	Y+60, r22	; 0x3c
    10c8:	7d af       	std	Y+61, r23	; 0x3d
    10ca:	8e af       	std	Y+62, r24	; 0x3e
    10cc:	9f af       	std	Y+63, r25	; 0x3f
    10ce:	a9 97       	sbiw	r28, 0x29	; 41
    10d0:	c8 01       	movw	r24, r16
    10d2:	b7 01       	movw	r22, r14
    10d4:	a2 01       	movw	r20, r4
    10d6:	91 01       	movw	r18, r2
    10d8:	0e 94 34 3b 	call	0x7668	; 0x7668 <__mulsi3>
    10dc:	3b 01       	movw	r6, r22
    10de:	4c 01       	movw	r8, r24
    10e0:	ad 96       	adiw	r28, 0x2d	; 45
    10e2:	6c ad       	ldd	r22, Y+60	; 0x3c
    10e4:	7d ad       	ldd	r23, Y+61	; 0x3d
    10e6:	8e ad       	ldd	r24, Y+62	; 0x3e
    10e8:	9f ad       	ldd	r25, Y+63	; 0x3f
    10ea:	ad 97       	sbiw	r28, 0x2d	; 45
    10ec:	a6 01       	movw	r20, r12
    10ee:	95 01       	movw	r18, r10
    10f0:	0e 94 34 3b 	call	0x7668	; 0x7668 <__mulsi3>
    10f4:	7b 01       	movw	r14, r22
    10f6:	8c 01       	movw	r16, r24
    10f8:	ad 96       	adiw	r28, 0x2d	; 45
    10fa:	6c ad       	ldd	r22, Y+60	; 0x3c
    10fc:	7d ad       	ldd	r23, Y+61	; 0x3d
    10fe:	8e ad       	ldd	r24, Y+62	; 0x3e
    1100:	9f ad       	ldd	r25, Y+63	; 0x3f
    1102:	ad 97       	sbiw	r28, 0x2d	; 45
    1104:	a2 01       	movw	r20, r4
    1106:	91 01       	movw	r18, r2
    1108:	0e 94 34 3b 	call	0x7668	; 0x7668 <__mulsi3>
    110c:	5b 01       	movw	r10, r22
    110e:	6c 01       	movw	r12, r24
    1110:	a8 01       	movw	r20, r16
    1112:	97 01       	movw	r18, r14
    1114:	26 0d       	add	r18, r6
    1116:	37 1d       	adc	r19, r7
    1118:	48 1d       	adc	r20, r8
    111a:	59 1d       	adc	r21, r9
    111c:	a9 96       	adiw	r28, 0x29	; 41
    111e:	6c ac       	ldd	r6, Y+60	; 0x3c
    1120:	7d ac       	ldd	r7, Y+61	; 0x3d
    1122:	8e ac       	ldd	r8, Y+62	; 0x3e
    1124:	9f ac       	ldd	r9, Y+63	; 0x3f
    1126:	a9 97       	sbiw	r28, 0x29	; 41
    1128:	c4 01       	movw	r24, r8
    112a:	aa 27       	eor	r26, r26
    112c:	bb 27       	eor	r27, r27
    112e:	28 0f       	add	r18, r24
    1130:	39 1f       	adc	r19, r25
    1132:	4a 1f       	adc	r20, r26
    1134:	5b 1f       	adc	r21, r27
    1136:	2e 15       	cp	r18, r14
    1138:	3f 05       	cpc	r19, r15
    113a:	40 07       	cpc	r20, r16
    113c:	51 07       	cpc	r21, r17
    113e:	48 f4       	brcc	.+18     	; 0x1152 <__stack+0x8f3>
    1140:	e1 2c       	mov	r14, r1
    1142:	f1 2c       	mov	r15, r1
    1144:	61 e0       	ldi	r22, 0x01	; 1
    1146:	06 2f       	mov	r16, r22
    1148:	11 2d       	mov	r17, r1
    114a:	ae 0c       	add	r10, r14
    114c:	bf 1c       	adc	r11, r15
    114e:	c0 1e       	adc	r12, r16
    1150:	d1 1e       	adc	r13, r17
    1152:	ca 01       	movw	r24, r20
    1154:	aa 27       	eor	r26, r26
    1156:	bb 27       	eor	r27, r27
    1158:	bc 01       	movw	r22, r24
    115a:	cd 01       	movw	r24, r26
    115c:	6a 0d       	add	r22, r10
    115e:	7b 1d       	adc	r23, r11
    1160:	8c 1d       	adc	r24, r12
    1162:	9d 1d       	adc	r25, r13
    1164:	69 a4       	ldd	r6, Y+41	; 0x29
    1166:	7a a4       	ldd	r7, Y+42	; 0x2a
    1168:	8b a4       	ldd	r8, Y+43	; 0x2b
    116a:	9c a4       	ldd	r9, Y+44	; 0x2c
    116c:	66 16       	cp	r6, r22
    116e:	77 06       	cpc	r7, r23
    1170:	88 06       	cpc	r8, r24
    1172:	99 06       	cpc	r9, r25
    1174:	50 f1       	brcs	.+84     	; 0x11ca <__stack+0x96b>
    1176:	66 15       	cp	r22, r6
    1178:	77 05       	cpc	r23, r7
    117a:	88 05       	cpc	r24, r8
    117c:	99 05       	cpc	r25, r9
    117e:	09 f0       	breq	.+2      	; 0x1182 <__stack+0x923>
    1180:	4d c0       	rjmp	.+154    	; 0x121c <__stack+0x9bd>
    1182:	d9 01       	movw	r26, r18
    1184:	99 27       	eor	r25, r25
    1186:	88 27       	eor	r24, r24
    1188:	a9 96       	adiw	r28, 0x29	; 41
    118a:	2c ad       	ldd	r18, Y+60	; 0x3c
    118c:	3d ad       	ldd	r19, Y+61	; 0x3d
    118e:	4e ad       	ldd	r20, Y+62	; 0x3e
    1190:	5f ad       	ldd	r21, Y+63	; 0x3f
    1192:	a9 97       	sbiw	r28, 0x29	; 41
    1194:	40 70       	andi	r20, 0x00	; 0
    1196:	50 70       	andi	r21, 0x00	; 0
    1198:	82 0f       	add	r24, r18
    119a:	93 1f       	adc	r25, r19
    119c:	a4 1f       	adc	r26, r20
    119e:	b5 1f       	adc	r27, r21
    11a0:	21 96       	adiw	r28, 0x01	; 1
    11a2:	2c ad       	ldd	r18, Y+60	; 0x3c
    11a4:	3d ad       	ldd	r19, Y+61	; 0x3d
    11a6:	4e ad       	ldd	r20, Y+62	; 0x3e
    11a8:	5f ad       	ldd	r21, Y+63	; 0x3f
    11aa:	21 97       	sbiw	r28, 0x01	; 1
    11ac:	e2 96       	adiw	r28, 0x32	; 50
    11ae:	0f ac       	ldd	r0, Y+63	; 0x3f
    11b0:	e2 97       	sbiw	r28, 0x32	; 50
    11b2:	04 c0       	rjmp	.+8      	; 0x11bc <__stack+0x95d>
    11b4:	22 0f       	add	r18, r18
    11b6:	33 1f       	adc	r19, r19
    11b8:	44 1f       	adc	r20, r20
    11ba:	55 1f       	adc	r21, r21
    11bc:	0a 94       	dec	r0
    11be:	d2 f7       	brpl	.-12     	; 0x11b4 <__stack+0x955>
    11c0:	28 17       	cp	r18, r24
    11c2:	39 07       	cpc	r19, r25
    11c4:	4a 07       	cpc	r20, r26
    11c6:	5b 07       	cpc	r21, r27
    11c8:	48 f5       	brcc	.+82     	; 0x121c <__stack+0x9bd>
    11ca:	25 96       	adiw	r28, 0x05	; 5
    11cc:	0c ad       	ldd	r16, Y+60	; 0x3c
    11ce:	1d ad       	ldd	r17, Y+61	; 0x3d
    11d0:	2e ad       	ldd	r18, Y+62	; 0x3e
    11d2:	3f ad       	ldd	r19, Y+63	; 0x3f
    11d4:	25 97       	sbiw	r28, 0x05	; 5
    11d6:	01 50       	subi	r16, 0x01	; 1
    11d8:	10 40       	sbci	r17, 0x00	; 0
    11da:	20 40       	sbci	r18, 0x00	; 0
    11dc:	30 40       	sbci	r19, 0x00	; 0
    11de:	25 96       	adiw	r28, 0x05	; 5
    11e0:	0c af       	std	Y+60, r16	; 0x3c
    11e2:	1d af       	std	Y+61, r17	; 0x3d
    11e4:	2e af       	std	Y+62, r18	; 0x3e
    11e6:	3f af       	std	Y+63, r19	; 0x3f
    11e8:	25 97       	sbiw	r28, 0x05	; 5
    11ea:	18 c0       	rjmp	.+48     	; 0x121c <__stack+0x9bd>
    11ec:	66 24       	eor	r6, r6
    11ee:	77 24       	eor	r7, r7
    11f0:	43 01       	movw	r8, r6
    11f2:	21 e0       	ldi	r18, 0x01	; 1
    11f4:	30 e0       	ldi	r19, 0x00	; 0
    11f6:	40 e0       	ldi	r20, 0x00	; 0
    11f8:	50 e0       	ldi	r21, 0x00	; 0
    11fa:	25 96       	adiw	r28, 0x05	; 5
    11fc:	2c af       	std	Y+60, r18	; 0x3c
    11fe:	3d af       	std	Y+61, r19	; 0x3d
    1200:	4e af       	std	Y+62, r20	; 0x3e
    1202:	5f af       	std	Y+63, r21	; 0x3f
    1204:	25 97       	sbiw	r28, 0x05	; 5
    1206:	0d c0       	rjmp	.+26     	; 0x1222 <__stack+0x9c3>
    1208:	66 24       	eor	r6, r6
    120a:	77 24       	eor	r7, r7
    120c:	43 01       	movw	r8, r6
    120e:	25 96       	adiw	r28, 0x05	; 5
    1210:	1c ae       	std	Y+60, r1	; 0x3c
    1212:	1d ae       	std	Y+61, r1	; 0x3d
    1214:	1e ae       	std	Y+62, r1	; 0x3e
    1216:	1f ae       	std	Y+63, r1	; 0x3f
    1218:	25 97       	sbiw	r28, 0x05	; 5
    121a:	03 c0       	rjmp	.+6      	; 0x1222 <__stack+0x9c3>
    121c:	66 24       	eor	r6, r6
    121e:	77 24       	eor	r7, r7
    1220:	43 01       	movw	r8, r6
    1222:	fe 01       	movw	r30, r28
    1224:	b1 96       	adiw	r30, 0x21	; 33
    1226:	88 e0       	ldi	r24, 0x08	; 8
    1228:	df 01       	movw	r26, r30
    122a:	1d 92       	st	X+, r1
    122c:	8a 95       	dec	r24
    122e:	e9 f7       	brne	.-6      	; 0x122a <__stack+0x9cb>
    1230:	25 96       	adiw	r28, 0x05	; 5
    1232:	ac ac       	ldd	r10, Y+60	; 0x3c
    1234:	bd ac       	ldd	r11, Y+61	; 0x3d
    1236:	ce ac       	ldd	r12, Y+62	; 0x3e
    1238:	df ac       	ldd	r13, Y+63	; 0x3f
    123a:	25 97       	sbiw	r28, 0x05	; 5
    123c:	a9 a2       	std	Y+33, r10	; 0x21
    123e:	ba a2       	std	Y+34, r11	; 0x22
    1240:	cb a2       	std	Y+35, r12	; 0x23
    1242:	dc a2       	std	Y+36, r13	; 0x24
    1244:	6d a2       	std	Y+37, r6	; 0x25
    1246:	7e a2       	std	Y+38, r7	; 0x26
    1248:	8f a2       	std	Y+39, r8	; 0x27
    124a:	98 a6       	std	Y+40, r9	; 0x28
    124c:	22 96       	adiw	r28, 0x02	; 2
    124e:	2f ad       	ldd	r18, Y+63	; 0x3f
    1250:	22 97       	sbiw	r28, 0x02	; 2
    1252:	3a a1       	ldd	r19, Y+34	; 0x22
    1254:	4b a1       	ldd	r20, Y+35	; 0x23
    1256:	5c a1       	ldd	r21, Y+36	; 0x24
    1258:	66 2d       	mov	r22, r6
    125a:	7e a1       	ldd	r23, Y+38	; 0x26
    125c:	df a0       	ldd	r13, Y+39	; 0x27
    125e:	98 a5       	ldd	r25, Y+40	; 0x28
    1260:	e1 96       	adiw	r28, 0x31	; 49
    1262:	ec ac       	ldd	r14, Y+60	; 0x3c
    1264:	fd ac       	ldd	r15, Y+61	; 0x3d
    1266:	0e ad       	ldd	r16, Y+62	; 0x3e
    1268:	1f ad       	ldd	r17, Y+63	; 0x3f
    126a:	e1 97       	sbiw	r28, 0x31	; 49
    126c:	e1 14       	cp	r14, r1
    126e:	f1 04       	cpc	r15, r1
    1270:	01 05       	cpc	r16, r1
    1272:	11 05       	cpc	r17, r1
    1274:	09 f4       	brne	.+2      	; 0x1278 <__stack+0xa19>
    1276:	56 c0       	rjmp	.+172    	; 0x1324 <__stack+0xac5>
    1278:	21 95       	neg	r18
    127a:	81 e0       	ldi	r24, 0x01	; 1
    127c:	12 16       	cp	r1, r18
    127e:	08 f0       	brcs	.+2      	; 0x1282 <__stack+0xa23>
    1280:	80 e0       	ldi	r24, 0x00	; 0
    1282:	31 95       	neg	r19
    1284:	e1 e0       	ldi	r30, 0x01	; 1
    1286:	13 16       	cp	r1, r19
    1288:	08 f0       	brcs	.+2      	; 0x128c <__stack+0xa2d>
    128a:	e0 e0       	ldi	r30, 0x00	; 0
    128c:	93 2e       	mov	r9, r19
    128e:	98 1a       	sub	r9, r24
    1290:	81 e0       	ldi	r24, 0x01	; 1
    1292:	39 15       	cp	r19, r9
    1294:	08 f0       	brcs	.+2      	; 0x1298 <__stack+0xa39>
    1296:	80 e0       	ldi	r24, 0x00	; 0
    1298:	e8 2b       	or	r30, r24
    129a:	41 95       	neg	r20
    129c:	f1 e0       	ldi	r31, 0x01	; 1
    129e:	14 16       	cp	r1, r20
    12a0:	08 f0       	brcs	.+2      	; 0x12a4 <__stack+0xa45>
    12a2:	f0 e0       	ldi	r31, 0x00	; 0
    12a4:	a4 2e       	mov	r10, r20
    12a6:	ae 1a       	sub	r10, r30
    12a8:	81 e0       	ldi	r24, 0x01	; 1
    12aa:	4a 15       	cp	r20, r10
    12ac:	08 f0       	brcs	.+2      	; 0x12b0 <__stack+0xa51>
    12ae:	80 e0       	ldi	r24, 0x00	; 0
    12b0:	f8 2b       	or	r31, r24
    12b2:	51 95       	neg	r21
    12b4:	e1 e0       	ldi	r30, 0x01	; 1
    12b6:	15 16       	cp	r1, r21
    12b8:	08 f0       	brcs	.+2      	; 0x12bc <__stack+0xa5d>
    12ba:	e0 e0       	ldi	r30, 0x00	; 0
    12bc:	b5 2e       	mov	r11, r21
    12be:	bf 1a       	sub	r11, r31
    12c0:	81 e0       	ldi	r24, 0x01	; 1
    12c2:	5b 15       	cp	r21, r11
    12c4:	08 f0       	brcs	.+2      	; 0x12c8 <__stack+0xa69>
    12c6:	80 e0       	ldi	r24, 0x00	; 0
    12c8:	e8 2b       	or	r30, r24
    12ca:	61 95       	neg	r22
    12cc:	f1 e0       	ldi	r31, 0x01	; 1
    12ce:	16 16       	cp	r1, r22
    12d0:	08 f0       	brcs	.+2      	; 0x12d4 <__stack+0xa75>
    12d2:	f0 e0       	ldi	r31, 0x00	; 0
    12d4:	a6 2f       	mov	r26, r22
    12d6:	ae 1b       	sub	r26, r30
    12d8:	81 e0       	ldi	r24, 0x01	; 1
    12da:	6a 17       	cp	r22, r26
    12dc:	08 f0       	brcs	.+2      	; 0x12e0 <__stack+0xa81>
    12de:	80 e0       	ldi	r24, 0x00	; 0
    12e0:	f8 2b       	or	r31, r24
    12e2:	71 95       	neg	r23
    12e4:	e1 e0       	ldi	r30, 0x01	; 1
    12e6:	17 16       	cp	r1, r23
    12e8:	08 f0       	brcs	.+2      	; 0x12ec <__stack+0xa8d>
    12ea:	e0 e0       	ldi	r30, 0x00	; 0
    12ec:	c7 2e       	mov	r12, r23
    12ee:	cf 1a       	sub	r12, r31
    12f0:	81 e0       	ldi	r24, 0x01	; 1
    12f2:	7c 15       	cp	r23, r12
    12f4:	08 f0       	brcs	.+2      	; 0x12f8 <__stack+0xa99>
    12f6:	80 e0       	ldi	r24, 0x00	; 0
    12f8:	e8 2b       	or	r30, r24
    12fa:	8d 2d       	mov	r24, r13
    12fc:	81 95       	neg	r24
    12fe:	f1 e0       	ldi	r31, 0x01	; 1
    1300:	18 16       	cp	r1, r24
    1302:	08 f0       	brcs	.+2      	; 0x1306 <__stack+0xaa7>
    1304:	f0 e0       	ldi	r31, 0x00	; 0
    1306:	d8 2e       	mov	r13, r24
    1308:	de 1a       	sub	r13, r30
    130a:	e1 e0       	ldi	r30, 0x01	; 1
    130c:	8d 15       	cp	r24, r13
    130e:	08 f0       	brcs	.+2      	; 0x1312 <__stack+0xab3>
    1310:	e0 e0       	ldi	r30, 0x00	; 0
    1312:	fe 2b       	or	r31, r30
    1314:	89 2f       	mov	r24, r25
    1316:	81 95       	neg	r24
    1318:	39 2d       	mov	r19, r9
    131a:	a5 01       	movw	r20, r10
    131c:	6a 2f       	mov	r22, r26
    131e:	7c 2d       	mov	r23, r12
    1320:	98 2f       	mov	r25, r24
    1322:	9f 1b       	sub	r25, r31
    1324:	8d 2d       	mov	r24, r13
    1326:	ce 58       	subi	r28, 0x8E	; 142
    1328:	df 4f       	sbci	r29, 0xFF	; 255
    132a:	e2 e1       	ldi	r30, 0x12	; 18
    132c:	0c 94 a5 3b 	jmp	0x774a	; 0x774a <__epilogue_restores__>

00001330 <_fpadd_parts>:
    1330:	a0 e0       	ldi	r26, 0x00	; 0
    1332:	b0 e0       	ldi	r27, 0x00	; 0
    1334:	ee e9       	ldi	r30, 0x9E	; 158
    1336:	f9 e0       	ldi	r31, 0x09	; 9
    1338:	0c 94 89 3b 	jmp	0x7712	; 0x7712 <__prologue_saves__>
    133c:	dc 01       	movw	r26, r24
    133e:	2b 01       	movw	r4, r22
    1340:	fa 01       	movw	r30, r20
    1342:	9c 91       	ld	r25, X
    1344:	92 30       	cpi	r25, 0x02	; 2
    1346:	08 f4       	brcc	.+2      	; 0x134a <_fpadd_parts+0x1a>
    1348:	39 c1       	rjmp	.+626    	; 0x15bc <_fpadd_parts+0x28c>
    134a:	eb 01       	movw	r28, r22
    134c:	88 81       	ld	r24, Y
    134e:	82 30       	cpi	r24, 0x02	; 2
    1350:	08 f4       	brcc	.+2      	; 0x1354 <_fpadd_parts+0x24>
    1352:	33 c1       	rjmp	.+614    	; 0x15ba <_fpadd_parts+0x28a>
    1354:	94 30       	cpi	r25, 0x04	; 4
    1356:	69 f4       	brne	.+26     	; 0x1372 <_fpadd_parts+0x42>
    1358:	84 30       	cpi	r24, 0x04	; 4
    135a:	09 f0       	breq	.+2      	; 0x135e <_fpadd_parts+0x2e>
    135c:	2f c1       	rjmp	.+606    	; 0x15bc <_fpadd_parts+0x28c>
    135e:	11 96       	adiw	r26, 0x01	; 1
    1360:	9c 91       	ld	r25, X
    1362:	11 97       	sbiw	r26, 0x01	; 1
    1364:	89 81       	ldd	r24, Y+1	; 0x01
    1366:	98 17       	cp	r25, r24
    1368:	09 f4       	brne	.+2      	; 0x136c <_fpadd_parts+0x3c>
    136a:	28 c1       	rjmp	.+592    	; 0x15bc <_fpadd_parts+0x28c>
    136c:	a0 e6       	ldi	r26, 0x60	; 96
    136e:	b0 e0       	ldi	r27, 0x00	; 0
    1370:	25 c1       	rjmp	.+586    	; 0x15bc <_fpadd_parts+0x28c>
    1372:	84 30       	cpi	r24, 0x04	; 4
    1374:	09 f4       	brne	.+2      	; 0x1378 <_fpadd_parts+0x48>
    1376:	21 c1       	rjmp	.+578    	; 0x15ba <_fpadd_parts+0x28a>
    1378:	82 30       	cpi	r24, 0x02	; 2
    137a:	a9 f4       	brne	.+42     	; 0x13a6 <_fpadd_parts+0x76>
    137c:	92 30       	cpi	r25, 0x02	; 2
    137e:	09 f0       	breq	.+2      	; 0x1382 <_fpadd_parts+0x52>
    1380:	1d c1       	rjmp	.+570    	; 0x15bc <_fpadd_parts+0x28c>
    1382:	9a 01       	movw	r18, r20
    1384:	ad 01       	movw	r20, r26
    1386:	88 e0       	ldi	r24, 0x08	; 8
    1388:	ea 01       	movw	r28, r20
    138a:	09 90       	ld	r0, Y+
    138c:	ae 01       	movw	r20, r28
    138e:	e9 01       	movw	r28, r18
    1390:	09 92       	st	Y+, r0
    1392:	9e 01       	movw	r18, r28
    1394:	81 50       	subi	r24, 0x01	; 1
    1396:	c1 f7       	brne	.-16     	; 0x1388 <_fpadd_parts+0x58>
    1398:	e2 01       	movw	r28, r4
    139a:	89 81       	ldd	r24, Y+1	; 0x01
    139c:	11 96       	adiw	r26, 0x01	; 1
    139e:	9c 91       	ld	r25, X
    13a0:	89 23       	and	r24, r25
    13a2:	81 83       	std	Z+1, r24	; 0x01
    13a4:	08 c1       	rjmp	.+528    	; 0x15b6 <_fpadd_parts+0x286>
    13a6:	92 30       	cpi	r25, 0x02	; 2
    13a8:	09 f4       	brne	.+2      	; 0x13ac <_fpadd_parts+0x7c>
    13aa:	07 c1       	rjmp	.+526    	; 0x15ba <_fpadd_parts+0x28a>
    13ac:	12 96       	adiw	r26, 0x02	; 2
    13ae:	2d 90       	ld	r2, X+
    13b0:	3c 90       	ld	r3, X
    13b2:	13 97       	sbiw	r26, 0x03	; 3
    13b4:	eb 01       	movw	r28, r22
    13b6:	8a 81       	ldd	r24, Y+2	; 0x02
    13b8:	9b 81       	ldd	r25, Y+3	; 0x03
    13ba:	14 96       	adiw	r26, 0x04	; 4
    13bc:	ad 90       	ld	r10, X+
    13be:	bd 90       	ld	r11, X+
    13c0:	cd 90       	ld	r12, X+
    13c2:	dc 90       	ld	r13, X
    13c4:	17 97       	sbiw	r26, 0x07	; 7
    13c6:	ec 80       	ldd	r14, Y+4	; 0x04
    13c8:	fd 80       	ldd	r15, Y+5	; 0x05
    13ca:	0e 81       	ldd	r16, Y+6	; 0x06
    13cc:	1f 81       	ldd	r17, Y+7	; 0x07
    13ce:	91 01       	movw	r18, r2
    13d0:	28 1b       	sub	r18, r24
    13d2:	39 0b       	sbc	r19, r25
    13d4:	b9 01       	movw	r22, r18
    13d6:	37 ff       	sbrs	r19, 7
    13d8:	04 c0       	rjmp	.+8      	; 0x13e2 <_fpadd_parts+0xb2>
    13da:	66 27       	eor	r22, r22
    13dc:	77 27       	eor	r23, r23
    13de:	62 1b       	sub	r22, r18
    13e0:	73 0b       	sbc	r23, r19
    13e2:	60 32       	cpi	r22, 0x20	; 32
    13e4:	71 05       	cpc	r23, r1
    13e6:	0c f0       	brlt	.+2      	; 0x13ea <_fpadd_parts+0xba>
    13e8:	61 c0       	rjmp	.+194    	; 0x14ac <_fpadd_parts+0x17c>
    13ea:	12 16       	cp	r1, r18
    13ec:	13 06       	cpc	r1, r19
    13ee:	6c f5       	brge	.+90     	; 0x144a <_fpadd_parts+0x11a>
    13f0:	37 01       	movw	r6, r14
    13f2:	48 01       	movw	r8, r16
    13f4:	06 2e       	mov	r0, r22
    13f6:	04 c0       	rjmp	.+8      	; 0x1400 <_fpadd_parts+0xd0>
    13f8:	96 94       	lsr	r9
    13fa:	87 94       	ror	r8
    13fc:	77 94       	ror	r7
    13fe:	67 94       	ror	r6
    1400:	0a 94       	dec	r0
    1402:	d2 f7       	brpl	.-12     	; 0x13f8 <_fpadd_parts+0xc8>
    1404:	21 e0       	ldi	r18, 0x01	; 1
    1406:	30 e0       	ldi	r19, 0x00	; 0
    1408:	40 e0       	ldi	r20, 0x00	; 0
    140a:	50 e0       	ldi	r21, 0x00	; 0
    140c:	04 c0       	rjmp	.+8      	; 0x1416 <_fpadd_parts+0xe6>
    140e:	22 0f       	add	r18, r18
    1410:	33 1f       	adc	r19, r19
    1412:	44 1f       	adc	r20, r20
    1414:	55 1f       	adc	r21, r21
    1416:	6a 95       	dec	r22
    1418:	d2 f7       	brpl	.-12     	; 0x140e <_fpadd_parts+0xde>
    141a:	21 50       	subi	r18, 0x01	; 1
    141c:	30 40       	sbci	r19, 0x00	; 0
    141e:	40 40       	sbci	r20, 0x00	; 0
    1420:	50 40       	sbci	r21, 0x00	; 0
    1422:	2e 21       	and	r18, r14
    1424:	3f 21       	and	r19, r15
    1426:	40 23       	and	r20, r16
    1428:	51 23       	and	r21, r17
    142a:	21 15       	cp	r18, r1
    142c:	31 05       	cpc	r19, r1
    142e:	41 05       	cpc	r20, r1
    1430:	51 05       	cpc	r21, r1
    1432:	21 f0       	breq	.+8      	; 0x143c <_fpadd_parts+0x10c>
    1434:	21 e0       	ldi	r18, 0x01	; 1
    1436:	30 e0       	ldi	r19, 0x00	; 0
    1438:	40 e0       	ldi	r20, 0x00	; 0
    143a:	50 e0       	ldi	r21, 0x00	; 0
    143c:	79 01       	movw	r14, r18
    143e:	8a 01       	movw	r16, r20
    1440:	e6 28       	or	r14, r6
    1442:	f7 28       	or	r15, r7
    1444:	08 29       	or	r16, r8
    1446:	19 29       	or	r17, r9
    1448:	3c c0       	rjmp	.+120    	; 0x14c2 <_fpadd_parts+0x192>
    144a:	23 2b       	or	r18, r19
    144c:	d1 f1       	breq	.+116    	; 0x14c2 <_fpadd_parts+0x192>
    144e:	26 0e       	add	r2, r22
    1450:	37 1e       	adc	r3, r23
    1452:	35 01       	movw	r6, r10
    1454:	46 01       	movw	r8, r12
    1456:	06 2e       	mov	r0, r22
    1458:	04 c0       	rjmp	.+8      	; 0x1462 <_fpadd_parts+0x132>
    145a:	96 94       	lsr	r9
    145c:	87 94       	ror	r8
    145e:	77 94       	ror	r7
    1460:	67 94       	ror	r6
    1462:	0a 94       	dec	r0
    1464:	d2 f7       	brpl	.-12     	; 0x145a <_fpadd_parts+0x12a>
    1466:	21 e0       	ldi	r18, 0x01	; 1
    1468:	30 e0       	ldi	r19, 0x00	; 0
    146a:	40 e0       	ldi	r20, 0x00	; 0
    146c:	50 e0       	ldi	r21, 0x00	; 0
    146e:	04 c0       	rjmp	.+8      	; 0x1478 <_fpadd_parts+0x148>
    1470:	22 0f       	add	r18, r18
    1472:	33 1f       	adc	r19, r19
    1474:	44 1f       	adc	r20, r20
    1476:	55 1f       	adc	r21, r21
    1478:	6a 95       	dec	r22
    147a:	d2 f7       	brpl	.-12     	; 0x1470 <_fpadd_parts+0x140>
    147c:	21 50       	subi	r18, 0x01	; 1
    147e:	30 40       	sbci	r19, 0x00	; 0
    1480:	40 40       	sbci	r20, 0x00	; 0
    1482:	50 40       	sbci	r21, 0x00	; 0
    1484:	2a 21       	and	r18, r10
    1486:	3b 21       	and	r19, r11
    1488:	4c 21       	and	r20, r12
    148a:	5d 21       	and	r21, r13
    148c:	21 15       	cp	r18, r1
    148e:	31 05       	cpc	r19, r1
    1490:	41 05       	cpc	r20, r1
    1492:	51 05       	cpc	r21, r1
    1494:	21 f0       	breq	.+8      	; 0x149e <_fpadd_parts+0x16e>
    1496:	21 e0       	ldi	r18, 0x01	; 1
    1498:	30 e0       	ldi	r19, 0x00	; 0
    149a:	40 e0       	ldi	r20, 0x00	; 0
    149c:	50 e0       	ldi	r21, 0x00	; 0
    149e:	59 01       	movw	r10, r18
    14a0:	6a 01       	movw	r12, r20
    14a2:	a6 28       	or	r10, r6
    14a4:	b7 28       	or	r11, r7
    14a6:	c8 28       	or	r12, r8
    14a8:	d9 28       	or	r13, r9
    14aa:	0b c0       	rjmp	.+22     	; 0x14c2 <_fpadd_parts+0x192>
    14ac:	82 15       	cp	r24, r2
    14ae:	93 05       	cpc	r25, r3
    14b0:	2c f0       	brlt	.+10     	; 0x14bc <_fpadd_parts+0x18c>
    14b2:	1c 01       	movw	r2, r24
    14b4:	aa 24       	eor	r10, r10
    14b6:	bb 24       	eor	r11, r11
    14b8:	65 01       	movw	r12, r10
    14ba:	03 c0       	rjmp	.+6      	; 0x14c2 <_fpadd_parts+0x192>
    14bc:	ee 24       	eor	r14, r14
    14be:	ff 24       	eor	r15, r15
    14c0:	87 01       	movw	r16, r14
    14c2:	11 96       	adiw	r26, 0x01	; 1
    14c4:	9c 91       	ld	r25, X
    14c6:	d2 01       	movw	r26, r4
    14c8:	11 96       	adiw	r26, 0x01	; 1
    14ca:	8c 91       	ld	r24, X
    14cc:	98 17       	cp	r25, r24
    14ce:	09 f4       	brne	.+2      	; 0x14d2 <_fpadd_parts+0x1a2>
    14d0:	45 c0       	rjmp	.+138    	; 0x155c <_fpadd_parts+0x22c>
    14d2:	99 23       	and	r25, r25
    14d4:	39 f0       	breq	.+14     	; 0x14e4 <_fpadd_parts+0x1b4>
    14d6:	a8 01       	movw	r20, r16
    14d8:	97 01       	movw	r18, r14
    14da:	2a 19       	sub	r18, r10
    14dc:	3b 09       	sbc	r19, r11
    14de:	4c 09       	sbc	r20, r12
    14e0:	5d 09       	sbc	r21, r13
    14e2:	06 c0       	rjmp	.+12     	; 0x14f0 <_fpadd_parts+0x1c0>
    14e4:	a6 01       	movw	r20, r12
    14e6:	95 01       	movw	r18, r10
    14e8:	2e 19       	sub	r18, r14
    14ea:	3f 09       	sbc	r19, r15
    14ec:	40 0b       	sbc	r20, r16
    14ee:	51 0b       	sbc	r21, r17
    14f0:	57 fd       	sbrc	r21, 7
    14f2:	08 c0       	rjmp	.+16     	; 0x1504 <_fpadd_parts+0x1d4>
    14f4:	11 82       	std	Z+1, r1	; 0x01
    14f6:	33 82       	std	Z+3, r3	; 0x03
    14f8:	22 82       	std	Z+2, r2	; 0x02
    14fa:	24 83       	std	Z+4, r18	; 0x04
    14fc:	35 83       	std	Z+5, r19	; 0x05
    14fe:	46 83       	std	Z+6, r20	; 0x06
    1500:	57 83       	std	Z+7, r21	; 0x07
    1502:	1d c0       	rjmp	.+58     	; 0x153e <_fpadd_parts+0x20e>
    1504:	81 e0       	ldi	r24, 0x01	; 1
    1506:	81 83       	std	Z+1, r24	; 0x01
    1508:	33 82       	std	Z+3, r3	; 0x03
    150a:	22 82       	std	Z+2, r2	; 0x02
    150c:	88 27       	eor	r24, r24
    150e:	99 27       	eor	r25, r25
    1510:	dc 01       	movw	r26, r24
    1512:	82 1b       	sub	r24, r18
    1514:	93 0b       	sbc	r25, r19
    1516:	a4 0b       	sbc	r26, r20
    1518:	b5 0b       	sbc	r27, r21
    151a:	84 83       	std	Z+4, r24	; 0x04
    151c:	95 83       	std	Z+5, r25	; 0x05
    151e:	a6 83       	std	Z+6, r26	; 0x06
    1520:	b7 83       	std	Z+7, r27	; 0x07
    1522:	0d c0       	rjmp	.+26     	; 0x153e <_fpadd_parts+0x20e>
    1524:	22 0f       	add	r18, r18
    1526:	33 1f       	adc	r19, r19
    1528:	44 1f       	adc	r20, r20
    152a:	55 1f       	adc	r21, r21
    152c:	24 83       	std	Z+4, r18	; 0x04
    152e:	35 83       	std	Z+5, r19	; 0x05
    1530:	46 83       	std	Z+6, r20	; 0x06
    1532:	57 83       	std	Z+7, r21	; 0x07
    1534:	82 81       	ldd	r24, Z+2	; 0x02
    1536:	93 81       	ldd	r25, Z+3	; 0x03
    1538:	01 97       	sbiw	r24, 0x01	; 1
    153a:	93 83       	std	Z+3, r25	; 0x03
    153c:	82 83       	std	Z+2, r24	; 0x02
    153e:	24 81       	ldd	r18, Z+4	; 0x04
    1540:	35 81       	ldd	r19, Z+5	; 0x05
    1542:	46 81       	ldd	r20, Z+6	; 0x06
    1544:	57 81       	ldd	r21, Z+7	; 0x07
    1546:	da 01       	movw	r26, r20
    1548:	c9 01       	movw	r24, r18
    154a:	01 97       	sbiw	r24, 0x01	; 1
    154c:	a1 09       	sbc	r26, r1
    154e:	b1 09       	sbc	r27, r1
    1550:	8f 5f       	subi	r24, 0xFF	; 255
    1552:	9f 4f       	sbci	r25, 0xFF	; 255
    1554:	af 4f       	sbci	r26, 0xFF	; 255
    1556:	bf 43       	sbci	r27, 0x3F	; 63
    1558:	28 f3       	brcs	.-54     	; 0x1524 <_fpadd_parts+0x1f4>
    155a:	0b c0       	rjmp	.+22     	; 0x1572 <_fpadd_parts+0x242>
    155c:	91 83       	std	Z+1, r25	; 0x01
    155e:	33 82       	std	Z+3, r3	; 0x03
    1560:	22 82       	std	Z+2, r2	; 0x02
    1562:	ea 0c       	add	r14, r10
    1564:	fb 1c       	adc	r15, r11
    1566:	0c 1d       	adc	r16, r12
    1568:	1d 1d       	adc	r17, r13
    156a:	e4 82       	std	Z+4, r14	; 0x04
    156c:	f5 82       	std	Z+5, r15	; 0x05
    156e:	06 83       	std	Z+6, r16	; 0x06
    1570:	17 83       	std	Z+7, r17	; 0x07
    1572:	83 e0       	ldi	r24, 0x03	; 3
    1574:	80 83       	st	Z, r24
    1576:	24 81       	ldd	r18, Z+4	; 0x04
    1578:	35 81       	ldd	r19, Z+5	; 0x05
    157a:	46 81       	ldd	r20, Z+6	; 0x06
    157c:	57 81       	ldd	r21, Z+7	; 0x07
    157e:	57 ff       	sbrs	r21, 7
    1580:	1a c0       	rjmp	.+52     	; 0x15b6 <_fpadd_parts+0x286>
    1582:	c9 01       	movw	r24, r18
    1584:	aa 27       	eor	r26, r26
    1586:	97 fd       	sbrc	r25, 7
    1588:	a0 95       	com	r26
    158a:	ba 2f       	mov	r27, r26
    158c:	81 70       	andi	r24, 0x01	; 1
    158e:	90 70       	andi	r25, 0x00	; 0
    1590:	a0 70       	andi	r26, 0x00	; 0
    1592:	b0 70       	andi	r27, 0x00	; 0
    1594:	56 95       	lsr	r21
    1596:	47 95       	ror	r20
    1598:	37 95       	ror	r19
    159a:	27 95       	ror	r18
    159c:	82 2b       	or	r24, r18
    159e:	93 2b       	or	r25, r19
    15a0:	a4 2b       	or	r26, r20
    15a2:	b5 2b       	or	r27, r21
    15a4:	84 83       	std	Z+4, r24	; 0x04
    15a6:	95 83       	std	Z+5, r25	; 0x05
    15a8:	a6 83       	std	Z+6, r26	; 0x06
    15aa:	b7 83       	std	Z+7, r27	; 0x07
    15ac:	82 81       	ldd	r24, Z+2	; 0x02
    15ae:	93 81       	ldd	r25, Z+3	; 0x03
    15b0:	01 96       	adiw	r24, 0x01	; 1
    15b2:	93 83       	std	Z+3, r25	; 0x03
    15b4:	82 83       	std	Z+2, r24	; 0x02
    15b6:	df 01       	movw	r26, r30
    15b8:	01 c0       	rjmp	.+2      	; 0x15bc <_fpadd_parts+0x28c>
    15ba:	d2 01       	movw	r26, r4
    15bc:	cd 01       	movw	r24, r26
    15be:	cd b7       	in	r28, 0x3d	; 61
    15c0:	de b7       	in	r29, 0x3e	; 62
    15c2:	e2 e1       	ldi	r30, 0x12	; 18
    15c4:	0c 94 a5 3b 	jmp	0x774a	; 0x774a <__epilogue_restores__>

000015c8 <__subsf3>:
    15c8:	a0 e2       	ldi	r26, 0x20	; 32
    15ca:	b0 e0       	ldi	r27, 0x00	; 0
    15cc:	ea ee       	ldi	r30, 0xEA	; 234
    15ce:	fa e0       	ldi	r31, 0x0A	; 10
    15d0:	0c 94 95 3b 	jmp	0x772a	; 0x772a <__prologue_saves__+0x18>
    15d4:	69 83       	std	Y+1, r22	; 0x01
    15d6:	7a 83       	std	Y+2, r23	; 0x02
    15d8:	8b 83       	std	Y+3, r24	; 0x03
    15da:	9c 83       	std	Y+4, r25	; 0x04
    15dc:	2d 83       	std	Y+5, r18	; 0x05
    15de:	3e 83       	std	Y+6, r19	; 0x06
    15e0:	4f 83       	std	Y+7, r20	; 0x07
    15e2:	58 87       	std	Y+8, r21	; 0x08
    15e4:	e9 e0       	ldi	r30, 0x09	; 9
    15e6:	ee 2e       	mov	r14, r30
    15e8:	f1 2c       	mov	r15, r1
    15ea:	ec 0e       	add	r14, r28
    15ec:	fd 1e       	adc	r15, r29
    15ee:	ce 01       	movw	r24, r28
    15f0:	01 96       	adiw	r24, 0x01	; 1
    15f2:	b7 01       	movw	r22, r14
    15f4:	0e 94 69 0f 	call	0x1ed2	; 0x1ed2 <__unpack_f>
    15f8:	8e 01       	movw	r16, r28
    15fa:	0f 5e       	subi	r16, 0xEF	; 239
    15fc:	1f 4f       	sbci	r17, 0xFF	; 255
    15fe:	ce 01       	movw	r24, r28
    1600:	05 96       	adiw	r24, 0x05	; 5
    1602:	b8 01       	movw	r22, r16
    1604:	0e 94 69 0f 	call	0x1ed2	; 0x1ed2 <__unpack_f>
    1608:	8a 89       	ldd	r24, Y+18	; 0x12
    160a:	91 e0       	ldi	r25, 0x01	; 1
    160c:	89 27       	eor	r24, r25
    160e:	8a 8b       	std	Y+18, r24	; 0x12
    1610:	c7 01       	movw	r24, r14
    1612:	b8 01       	movw	r22, r16
    1614:	ae 01       	movw	r20, r28
    1616:	47 5e       	subi	r20, 0xE7	; 231
    1618:	5f 4f       	sbci	r21, 0xFF	; 255
    161a:	0e 94 98 09 	call	0x1330	; 0x1330 <_fpadd_parts>
    161e:	0e 94 94 0e 	call	0x1d28	; 0x1d28 <__pack_f>
    1622:	a0 96       	adiw	r28, 0x20	; 32
    1624:	e6 e0       	ldi	r30, 0x06	; 6
    1626:	0c 94 b1 3b 	jmp	0x7762	; 0x7762 <__epilogue_restores__+0x18>

0000162a <__addsf3>:
    162a:	a0 e2       	ldi	r26, 0x20	; 32
    162c:	b0 e0       	ldi	r27, 0x00	; 0
    162e:	eb e1       	ldi	r30, 0x1B	; 27
    1630:	fb e0       	ldi	r31, 0x0B	; 11
    1632:	0c 94 95 3b 	jmp	0x772a	; 0x772a <__prologue_saves__+0x18>
    1636:	69 83       	std	Y+1, r22	; 0x01
    1638:	7a 83       	std	Y+2, r23	; 0x02
    163a:	8b 83       	std	Y+3, r24	; 0x03
    163c:	9c 83       	std	Y+4, r25	; 0x04
    163e:	2d 83       	std	Y+5, r18	; 0x05
    1640:	3e 83       	std	Y+6, r19	; 0x06
    1642:	4f 83       	std	Y+7, r20	; 0x07
    1644:	58 87       	std	Y+8, r21	; 0x08
    1646:	f9 e0       	ldi	r31, 0x09	; 9
    1648:	ef 2e       	mov	r14, r31
    164a:	f1 2c       	mov	r15, r1
    164c:	ec 0e       	add	r14, r28
    164e:	fd 1e       	adc	r15, r29
    1650:	ce 01       	movw	r24, r28
    1652:	01 96       	adiw	r24, 0x01	; 1
    1654:	b7 01       	movw	r22, r14
    1656:	0e 94 69 0f 	call	0x1ed2	; 0x1ed2 <__unpack_f>
    165a:	8e 01       	movw	r16, r28
    165c:	0f 5e       	subi	r16, 0xEF	; 239
    165e:	1f 4f       	sbci	r17, 0xFF	; 255
    1660:	ce 01       	movw	r24, r28
    1662:	05 96       	adiw	r24, 0x05	; 5
    1664:	b8 01       	movw	r22, r16
    1666:	0e 94 69 0f 	call	0x1ed2	; 0x1ed2 <__unpack_f>
    166a:	c7 01       	movw	r24, r14
    166c:	b8 01       	movw	r22, r16
    166e:	ae 01       	movw	r20, r28
    1670:	47 5e       	subi	r20, 0xE7	; 231
    1672:	5f 4f       	sbci	r21, 0xFF	; 255
    1674:	0e 94 98 09 	call	0x1330	; 0x1330 <_fpadd_parts>
    1678:	0e 94 94 0e 	call	0x1d28	; 0x1d28 <__pack_f>
    167c:	a0 96       	adiw	r28, 0x20	; 32
    167e:	e6 e0       	ldi	r30, 0x06	; 6
    1680:	0c 94 b1 3b 	jmp	0x7762	; 0x7762 <__epilogue_restores__+0x18>

00001684 <__mulsf3>:
    1684:	a0 e2       	ldi	r26, 0x20	; 32
    1686:	b0 e0       	ldi	r27, 0x00	; 0
    1688:	e8 e4       	ldi	r30, 0x48	; 72
    168a:	fb e0       	ldi	r31, 0x0B	; 11
    168c:	0c 94 89 3b 	jmp	0x7712	; 0x7712 <__prologue_saves__>
    1690:	69 83       	std	Y+1, r22	; 0x01
    1692:	7a 83       	std	Y+2, r23	; 0x02
    1694:	8b 83       	std	Y+3, r24	; 0x03
    1696:	9c 83       	std	Y+4, r25	; 0x04
    1698:	2d 83       	std	Y+5, r18	; 0x05
    169a:	3e 83       	std	Y+6, r19	; 0x06
    169c:	4f 83       	std	Y+7, r20	; 0x07
    169e:	58 87       	std	Y+8, r21	; 0x08
    16a0:	ce 01       	movw	r24, r28
    16a2:	01 96       	adiw	r24, 0x01	; 1
    16a4:	be 01       	movw	r22, r28
    16a6:	67 5f       	subi	r22, 0xF7	; 247
    16a8:	7f 4f       	sbci	r23, 0xFF	; 255
    16aa:	0e 94 69 0f 	call	0x1ed2	; 0x1ed2 <__unpack_f>
    16ae:	ce 01       	movw	r24, r28
    16b0:	05 96       	adiw	r24, 0x05	; 5
    16b2:	be 01       	movw	r22, r28
    16b4:	6f 5e       	subi	r22, 0xEF	; 239
    16b6:	7f 4f       	sbci	r23, 0xFF	; 255
    16b8:	0e 94 69 0f 	call	0x1ed2	; 0x1ed2 <__unpack_f>
    16bc:	99 85       	ldd	r25, Y+9	; 0x09
    16be:	92 30       	cpi	r25, 0x02	; 2
    16c0:	88 f0       	brcs	.+34     	; 0x16e4 <__mulsf3+0x60>
    16c2:	89 89       	ldd	r24, Y+17	; 0x11
    16c4:	82 30       	cpi	r24, 0x02	; 2
    16c6:	c8 f0       	brcs	.+50     	; 0x16fa <__mulsf3+0x76>
    16c8:	94 30       	cpi	r25, 0x04	; 4
    16ca:	19 f4       	brne	.+6      	; 0x16d2 <__mulsf3+0x4e>
    16cc:	82 30       	cpi	r24, 0x02	; 2
    16ce:	51 f4       	brne	.+20     	; 0x16e4 <__mulsf3+0x60>
    16d0:	04 c0       	rjmp	.+8      	; 0x16da <__mulsf3+0x56>
    16d2:	84 30       	cpi	r24, 0x04	; 4
    16d4:	29 f4       	brne	.+10     	; 0x16e0 <__mulsf3+0x5c>
    16d6:	92 30       	cpi	r25, 0x02	; 2
    16d8:	81 f4       	brne	.+32     	; 0x16fa <__mulsf3+0x76>
    16da:	80 e6       	ldi	r24, 0x60	; 96
    16dc:	90 e0       	ldi	r25, 0x00	; 0
    16de:	c6 c0       	rjmp	.+396    	; 0x186c <__mulsf3+0x1e8>
    16e0:	92 30       	cpi	r25, 0x02	; 2
    16e2:	49 f4       	brne	.+18     	; 0x16f6 <__mulsf3+0x72>
    16e4:	20 e0       	ldi	r18, 0x00	; 0
    16e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    16e8:	8a 89       	ldd	r24, Y+18	; 0x12
    16ea:	98 13       	cpse	r25, r24
    16ec:	21 e0       	ldi	r18, 0x01	; 1
    16ee:	2a 87       	std	Y+10, r18	; 0x0a
    16f0:	ce 01       	movw	r24, r28
    16f2:	09 96       	adiw	r24, 0x09	; 9
    16f4:	bb c0       	rjmp	.+374    	; 0x186c <__mulsf3+0x1e8>
    16f6:	82 30       	cpi	r24, 0x02	; 2
    16f8:	49 f4       	brne	.+18     	; 0x170c <__mulsf3+0x88>
    16fa:	20 e0       	ldi	r18, 0x00	; 0
    16fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    16fe:	8a 89       	ldd	r24, Y+18	; 0x12
    1700:	98 13       	cpse	r25, r24
    1702:	21 e0       	ldi	r18, 0x01	; 1
    1704:	2a 8b       	std	Y+18, r18	; 0x12
    1706:	ce 01       	movw	r24, r28
    1708:	41 96       	adiw	r24, 0x11	; 17
    170a:	b0 c0       	rjmp	.+352    	; 0x186c <__mulsf3+0x1e8>
    170c:	2d 84       	ldd	r2, Y+13	; 0x0d
    170e:	3e 84       	ldd	r3, Y+14	; 0x0e
    1710:	4f 84       	ldd	r4, Y+15	; 0x0f
    1712:	58 88       	ldd	r5, Y+16	; 0x10
    1714:	6d 88       	ldd	r6, Y+21	; 0x15
    1716:	7e 88       	ldd	r7, Y+22	; 0x16
    1718:	8f 88       	ldd	r8, Y+23	; 0x17
    171a:	98 8c       	ldd	r9, Y+24	; 0x18
    171c:	ee 24       	eor	r14, r14
    171e:	ff 24       	eor	r15, r15
    1720:	87 01       	movw	r16, r14
    1722:	aa 24       	eor	r10, r10
    1724:	bb 24       	eor	r11, r11
    1726:	65 01       	movw	r12, r10
    1728:	40 e0       	ldi	r20, 0x00	; 0
    172a:	50 e0       	ldi	r21, 0x00	; 0
    172c:	60 e0       	ldi	r22, 0x00	; 0
    172e:	70 e0       	ldi	r23, 0x00	; 0
    1730:	e0 e0       	ldi	r30, 0x00	; 0
    1732:	f0 e0       	ldi	r31, 0x00	; 0
    1734:	c1 01       	movw	r24, r2
    1736:	81 70       	andi	r24, 0x01	; 1
    1738:	90 70       	andi	r25, 0x00	; 0
    173a:	89 2b       	or	r24, r25
    173c:	e9 f0       	breq	.+58     	; 0x1778 <__mulsf3+0xf4>
    173e:	e6 0c       	add	r14, r6
    1740:	f7 1c       	adc	r15, r7
    1742:	08 1d       	adc	r16, r8
    1744:	19 1d       	adc	r17, r9
    1746:	9a 01       	movw	r18, r20
    1748:	ab 01       	movw	r20, r22
    174a:	2a 0d       	add	r18, r10
    174c:	3b 1d       	adc	r19, r11
    174e:	4c 1d       	adc	r20, r12
    1750:	5d 1d       	adc	r21, r13
    1752:	80 e0       	ldi	r24, 0x00	; 0
    1754:	90 e0       	ldi	r25, 0x00	; 0
    1756:	a0 e0       	ldi	r26, 0x00	; 0
    1758:	b0 e0       	ldi	r27, 0x00	; 0
    175a:	e6 14       	cp	r14, r6
    175c:	f7 04       	cpc	r15, r7
    175e:	08 05       	cpc	r16, r8
    1760:	19 05       	cpc	r17, r9
    1762:	20 f4       	brcc	.+8      	; 0x176c <__mulsf3+0xe8>
    1764:	81 e0       	ldi	r24, 0x01	; 1
    1766:	90 e0       	ldi	r25, 0x00	; 0
    1768:	a0 e0       	ldi	r26, 0x00	; 0
    176a:	b0 e0       	ldi	r27, 0x00	; 0
    176c:	ba 01       	movw	r22, r20
    176e:	a9 01       	movw	r20, r18
    1770:	48 0f       	add	r20, r24
    1772:	59 1f       	adc	r21, r25
    1774:	6a 1f       	adc	r22, r26
    1776:	7b 1f       	adc	r23, r27
    1778:	aa 0c       	add	r10, r10
    177a:	bb 1c       	adc	r11, r11
    177c:	cc 1c       	adc	r12, r12
    177e:	dd 1c       	adc	r13, r13
    1780:	97 fe       	sbrs	r9, 7
    1782:	08 c0       	rjmp	.+16     	; 0x1794 <__mulsf3+0x110>
    1784:	81 e0       	ldi	r24, 0x01	; 1
    1786:	90 e0       	ldi	r25, 0x00	; 0
    1788:	a0 e0       	ldi	r26, 0x00	; 0
    178a:	b0 e0       	ldi	r27, 0x00	; 0
    178c:	a8 2a       	or	r10, r24
    178e:	b9 2a       	or	r11, r25
    1790:	ca 2a       	or	r12, r26
    1792:	db 2a       	or	r13, r27
    1794:	31 96       	adiw	r30, 0x01	; 1
    1796:	e0 32       	cpi	r30, 0x20	; 32
    1798:	f1 05       	cpc	r31, r1
    179a:	49 f0       	breq	.+18     	; 0x17ae <__mulsf3+0x12a>
    179c:	66 0c       	add	r6, r6
    179e:	77 1c       	adc	r7, r7
    17a0:	88 1c       	adc	r8, r8
    17a2:	99 1c       	adc	r9, r9
    17a4:	56 94       	lsr	r5
    17a6:	47 94       	ror	r4
    17a8:	37 94       	ror	r3
    17aa:	27 94       	ror	r2
    17ac:	c3 cf       	rjmp	.-122    	; 0x1734 <__mulsf3+0xb0>
    17ae:	fa 85       	ldd	r31, Y+10	; 0x0a
    17b0:	ea 89       	ldd	r30, Y+18	; 0x12
    17b2:	2b 89       	ldd	r18, Y+19	; 0x13
    17b4:	3c 89       	ldd	r19, Y+20	; 0x14
    17b6:	8b 85       	ldd	r24, Y+11	; 0x0b
    17b8:	9c 85       	ldd	r25, Y+12	; 0x0c
    17ba:	28 0f       	add	r18, r24
    17bc:	39 1f       	adc	r19, r25
    17be:	2e 5f       	subi	r18, 0xFE	; 254
    17c0:	3f 4f       	sbci	r19, 0xFF	; 255
    17c2:	17 c0       	rjmp	.+46     	; 0x17f2 <__mulsf3+0x16e>
    17c4:	ca 01       	movw	r24, r20
    17c6:	81 70       	andi	r24, 0x01	; 1
    17c8:	90 70       	andi	r25, 0x00	; 0
    17ca:	89 2b       	or	r24, r25
    17cc:	61 f0       	breq	.+24     	; 0x17e6 <__mulsf3+0x162>
    17ce:	16 95       	lsr	r17
    17d0:	07 95       	ror	r16
    17d2:	f7 94       	ror	r15
    17d4:	e7 94       	ror	r14
    17d6:	80 e0       	ldi	r24, 0x00	; 0
    17d8:	90 e0       	ldi	r25, 0x00	; 0
    17da:	a0 e0       	ldi	r26, 0x00	; 0
    17dc:	b0 e8       	ldi	r27, 0x80	; 128
    17de:	e8 2a       	or	r14, r24
    17e0:	f9 2a       	or	r15, r25
    17e2:	0a 2b       	or	r16, r26
    17e4:	1b 2b       	or	r17, r27
    17e6:	76 95       	lsr	r23
    17e8:	67 95       	ror	r22
    17ea:	57 95       	ror	r21
    17ec:	47 95       	ror	r20
    17ee:	2f 5f       	subi	r18, 0xFF	; 255
    17f0:	3f 4f       	sbci	r19, 0xFF	; 255
    17f2:	77 fd       	sbrc	r23, 7
    17f4:	e7 cf       	rjmp	.-50     	; 0x17c4 <__mulsf3+0x140>
    17f6:	0c c0       	rjmp	.+24     	; 0x1810 <__mulsf3+0x18c>
    17f8:	44 0f       	add	r20, r20
    17fa:	55 1f       	adc	r21, r21
    17fc:	66 1f       	adc	r22, r22
    17fe:	77 1f       	adc	r23, r23
    1800:	17 fd       	sbrc	r17, 7
    1802:	41 60       	ori	r20, 0x01	; 1
    1804:	ee 0c       	add	r14, r14
    1806:	ff 1c       	adc	r15, r15
    1808:	00 1f       	adc	r16, r16
    180a:	11 1f       	adc	r17, r17
    180c:	21 50       	subi	r18, 0x01	; 1
    180e:	30 40       	sbci	r19, 0x00	; 0
    1810:	40 30       	cpi	r20, 0x00	; 0
    1812:	90 e0       	ldi	r25, 0x00	; 0
    1814:	59 07       	cpc	r21, r25
    1816:	90 e0       	ldi	r25, 0x00	; 0
    1818:	69 07       	cpc	r22, r25
    181a:	90 e4       	ldi	r25, 0x40	; 64
    181c:	79 07       	cpc	r23, r25
    181e:	60 f3       	brcs	.-40     	; 0x17f8 <__mulsf3+0x174>
    1820:	2b 8f       	std	Y+27, r18	; 0x1b
    1822:	3c 8f       	std	Y+28, r19	; 0x1c
    1824:	db 01       	movw	r26, r22
    1826:	ca 01       	movw	r24, r20
    1828:	8f 77       	andi	r24, 0x7F	; 127
    182a:	90 70       	andi	r25, 0x00	; 0
    182c:	a0 70       	andi	r26, 0x00	; 0
    182e:	b0 70       	andi	r27, 0x00	; 0
    1830:	80 34       	cpi	r24, 0x40	; 64
    1832:	91 05       	cpc	r25, r1
    1834:	a1 05       	cpc	r26, r1
    1836:	b1 05       	cpc	r27, r1
    1838:	61 f4       	brne	.+24     	; 0x1852 <__mulsf3+0x1ce>
    183a:	47 fd       	sbrc	r20, 7
    183c:	0a c0       	rjmp	.+20     	; 0x1852 <__mulsf3+0x1ce>
    183e:	e1 14       	cp	r14, r1
    1840:	f1 04       	cpc	r15, r1
    1842:	01 05       	cpc	r16, r1
    1844:	11 05       	cpc	r17, r1
    1846:	29 f0       	breq	.+10     	; 0x1852 <__mulsf3+0x1ce>
    1848:	40 5c       	subi	r20, 0xC0	; 192
    184a:	5f 4f       	sbci	r21, 0xFF	; 255
    184c:	6f 4f       	sbci	r22, 0xFF	; 255
    184e:	7f 4f       	sbci	r23, 0xFF	; 255
    1850:	40 78       	andi	r20, 0x80	; 128
    1852:	1a 8e       	std	Y+26, r1	; 0x1a
    1854:	fe 17       	cp	r31, r30
    1856:	11 f0       	breq	.+4      	; 0x185c <__mulsf3+0x1d8>
    1858:	81 e0       	ldi	r24, 0x01	; 1
    185a:	8a 8f       	std	Y+26, r24	; 0x1a
    185c:	4d 8f       	std	Y+29, r20	; 0x1d
    185e:	5e 8f       	std	Y+30, r21	; 0x1e
    1860:	6f 8f       	std	Y+31, r22	; 0x1f
    1862:	78 a3       	std	Y+32, r23	; 0x20
    1864:	83 e0       	ldi	r24, 0x03	; 3
    1866:	89 8f       	std	Y+25, r24	; 0x19
    1868:	ce 01       	movw	r24, r28
    186a:	49 96       	adiw	r24, 0x19	; 25
    186c:	0e 94 94 0e 	call	0x1d28	; 0x1d28 <__pack_f>
    1870:	a0 96       	adiw	r28, 0x20	; 32
    1872:	e2 e1       	ldi	r30, 0x12	; 18
    1874:	0c 94 a5 3b 	jmp	0x774a	; 0x774a <__epilogue_restores__>

00001878 <__divsf3>:
    1878:	a8 e1       	ldi	r26, 0x18	; 24
    187a:	b0 e0       	ldi	r27, 0x00	; 0
    187c:	e2 e4       	ldi	r30, 0x42	; 66
    187e:	fc e0       	ldi	r31, 0x0C	; 12
    1880:	0c 94 91 3b 	jmp	0x7722	; 0x7722 <__prologue_saves__+0x10>
    1884:	69 83       	std	Y+1, r22	; 0x01
    1886:	7a 83       	std	Y+2, r23	; 0x02
    1888:	8b 83       	std	Y+3, r24	; 0x03
    188a:	9c 83       	std	Y+4, r25	; 0x04
    188c:	2d 83       	std	Y+5, r18	; 0x05
    188e:	3e 83       	std	Y+6, r19	; 0x06
    1890:	4f 83       	std	Y+7, r20	; 0x07
    1892:	58 87       	std	Y+8, r21	; 0x08
    1894:	b9 e0       	ldi	r27, 0x09	; 9
    1896:	eb 2e       	mov	r14, r27
    1898:	f1 2c       	mov	r15, r1
    189a:	ec 0e       	add	r14, r28
    189c:	fd 1e       	adc	r15, r29
    189e:	ce 01       	movw	r24, r28
    18a0:	01 96       	adiw	r24, 0x01	; 1
    18a2:	b7 01       	movw	r22, r14
    18a4:	0e 94 69 0f 	call	0x1ed2	; 0x1ed2 <__unpack_f>
    18a8:	8e 01       	movw	r16, r28
    18aa:	0f 5e       	subi	r16, 0xEF	; 239
    18ac:	1f 4f       	sbci	r17, 0xFF	; 255
    18ae:	ce 01       	movw	r24, r28
    18b0:	05 96       	adiw	r24, 0x05	; 5
    18b2:	b8 01       	movw	r22, r16
    18b4:	0e 94 69 0f 	call	0x1ed2	; 0x1ed2 <__unpack_f>
    18b8:	29 85       	ldd	r18, Y+9	; 0x09
    18ba:	22 30       	cpi	r18, 0x02	; 2
    18bc:	08 f4       	brcc	.+2      	; 0x18c0 <__divsf3+0x48>
    18be:	7e c0       	rjmp	.+252    	; 0x19bc <__divsf3+0x144>
    18c0:	39 89       	ldd	r19, Y+17	; 0x11
    18c2:	32 30       	cpi	r19, 0x02	; 2
    18c4:	10 f4       	brcc	.+4      	; 0x18ca <__divsf3+0x52>
    18c6:	b8 01       	movw	r22, r16
    18c8:	7c c0       	rjmp	.+248    	; 0x19c2 <__divsf3+0x14a>
    18ca:	8a 85       	ldd	r24, Y+10	; 0x0a
    18cc:	9a 89       	ldd	r25, Y+18	; 0x12
    18ce:	89 27       	eor	r24, r25
    18d0:	8a 87       	std	Y+10, r24	; 0x0a
    18d2:	24 30       	cpi	r18, 0x04	; 4
    18d4:	11 f0       	breq	.+4      	; 0x18da <__divsf3+0x62>
    18d6:	22 30       	cpi	r18, 0x02	; 2
    18d8:	31 f4       	brne	.+12     	; 0x18e6 <__divsf3+0x6e>
    18da:	23 17       	cp	r18, r19
    18dc:	09 f0       	breq	.+2      	; 0x18e0 <__divsf3+0x68>
    18de:	6e c0       	rjmp	.+220    	; 0x19bc <__divsf3+0x144>
    18e0:	60 e6       	ldi	r22, 0x60	; 96
    18e2:	70 e0       	ldi	r23, 0x00	; 0
    18e4:	6e c0       	rjmp	.+220    	; 0x19c2 <__divsf3+0x14a>
    18e6:	34 30       	cpi	r19, 0x04	; 4
    18e8:	39 f4       	brne	.+14     	; 0x18f8 <__divsf3+0x80>
    18ea:	1d 86       	std	Y+13, r1	; 0x0d
    18ec:	1e 86       	std	Y+14, r1	; 0x0e
    18ee:	1f 86       	std	Y+15, r1	; 0x0f
    18f0:	18 8a       	std	Y+16, r1	; 0x10
    18f2:	1c 86       	std	Y+12, r1	; 0x0c
    18f4:	1b 86       	std	Y+11, r1	; 0x0b
    18f6:	04 c0       	rjmp	.+8      	; 0x1900 <__divsf3+0x88>
    18f8:	32 30       	cpi	r19, 0x02	; 2
    18fa:	21 f4       	brne	.+8      	; 0x1904 <__divsf3+0x8c>
    18fc:	84 e0       	ldi	r24, 0x04	; 4
    18fe:	89 87       	std	Y+9, r24	; 0x09
    1900:	b7 01       	movw	r22, r14
    1902:	5f c0       	rjmp	.+190    	; 0x19c2 <__divsf3+0x14a>
    1904:	2b 85       	ldd	r18, Y+11	; 0x0b
    1906:	3c 85       	ldd	r19, Y+12	; 0x0c
    1908:	8b 89       	ldd	r24, Y+19	; 0x13
    190a:	9c 89       	ldd	r25, Y+20	; 0x14
    190c:	28 1b       	sub	r18, r24
    190e:	39 0b       	sbc	r19, r25
    1910:	3c 87       	std	Y+12, r19	; 0x0c
    1912:	2b 87       	std	Y+11, r18	; 0x0b
    1914:	ed 84       	ldd	r14, Y+13	; 0x0d
    1916:	fe 84       	ldd	r15, Y+14	; 0x0e
    1918:	0f 85       	ldd	r16, Y+15	; 0x0f
    191a:	18 89       	ldd	r17, Y+16	; 0x10
    191c:	ad 88       	ldd	r10, Y+21	; 0x15
    191e:	be 88       	ldd	r11, Y+22	; 0x16
    1920:	cf 88       	ldd	r12, Y+23	; 0x17
    1922:	d8 8c       	ldd	r13, Y+24	; 0x18
    1924:	ea 14       	cp	r14, r10
    1926:	fb 04       	cpc	r15, r11
    1928:	0c 05       	cpc	r16, r12
    192a:	1d 05       	cpc	r17, r13
    192c:	40 f4       	brcc	.+16     	; 0x193e <__divsf3+0xc6>
    192e:	ee 0c       	add	r14, r14
    1930:	ff 1c       	adc	r15, r15
    1932:	00 1f       	adc	r16, r16
    1934:	11 1f       	adc	r17, r17
    1936:	21 50       	subi	r18, 0x01	; 1
    1938:	30 40       	sbci	r19, 0x00	; 0
    193a:	3c 87       	std	Y+12, r19	; 0x0c
    193c:	2b 87       	std	Y+11, r18	; 0x0b
    193e:	20 e0       	ldi	r18, 0x00	; 0
    1940:	30 e0       	ldi	r19, 0x00	; 0
    1942:	40 e0       	ldi	r20, 0x00	; 0
    1944:	50 e0       	ldi	r21, 0x00	; 0
    1946:	80 e0       	ldi	r24, 0x00	; 0
    1948:	90 e0       	ldi	r25, 0x00	; 0
    194a:	a0 e0       	ldi	r26, 0x00	; 0
    194c:	b0 e4       	ldi	r27, 0x40	; 64
    194e:	60 e0       	ldi	r22, 0x00	; 0
    1950:	70 e0       	ldi	r23, 0x00	; 0
    1952:	ea 14       	cp	r14, r10
    1954:	fb 04       	cpc	r15, r11
    1956:	0c 05       	cpc	r16, r12
    1958:	1d 05       	cpc	r17, r13
    195a:	40 f0       	brcs	.+16     	; 0x196c <__divsf3+0xf4>
    195c:	28 2b       	or	r18, r24
    195e:	39 2b       	or	r19, r25
    1960:	4a 2b       	or	r20, r26
    1962:	5b 2b       	or	r21, r27
    1964:	ea 18       	sub	r14, r10
    1966:	fb 08       	sbc	r15, r11
    1968:	0c 09       	sbc	r16, r12
    196a:	1d 09       	sbc	r17, r13
    196c:	b6 95       	lsr	r27
    196e:	a7 95       	ror	r26
    1970:	97 95       	ror	r25
    1972:	87 95       	ror	r24
    1974:	ee 0c       	add	r14, r14
    1976:	ff 1c       	adc	r15, r15
    1978:	00 1f       	adc	r16, r16
    197a:	11 1f       	adc	r17, r17
    197c:	6f 5f       	subi	r22, 0xFF	; 255
    197e:	7f 4f       	sbci	r23, 0xFF	; 255
    1980:	6f 31       	cpi	r22, 0x1F	; 31
    1982:	71 05       	cpc	r23, r1
    1984:	31 f7       	brne	.-52     	; 0x1952 <__divsf3+0xda>
    1986:	da 01       	movw	r26, r20
    1988:	c9 01       	movw	r24, r18
    198a:	8f 77       	andi	r24, 0x7F	; 127
    198c:	90 70       	andi	r25, 0x00	; 0
    198e:	a0 70       	andi	r26, 0x00	; 0
    1990:	b0 70       	andi	r27, 0x00	; 0
    1992:	80 34       	cpi	r24, 0x40	; 64
    1994:	91 05       	cpc	r25, r1
    1996:	a1 05       	cpc	r26, r1
    1998:	b1 05       	cpc	r27, r1
    199a:	61 f4       	brne	.+24     	; 0x19b4 <__divsf3+0x13c>
    199c:	27 fd       	sbrc	r18, 7
    199e:	0a c0       	rjmp	.+20     	; 0x19b4 <__divsf3+0x13c>
    19a0:	e1 14       	cp	r14, r1
    19a2:	f1 04       	cpc	r15, r1
    19a4:	01 05       	cpc	r16, r1
    19a6:	11 05       	cpc	r17, r1
    19a8:	29 f0       	breq	.+10     	; 0x19b4 <__divsf3+0x13c>
    19aa:	20 5c       	subi	r18, 0xC0	; 192
    19ac:	3f 4f       	sbci	r19, 0xFF	; 255
    19ae:	4f 4f       	sbci	r20, 0xFF	; 255
    19b0:	5f 4f       	sbci	r21, 0xFF	; 255
    19b2:	20 78       	andi	r18, 0x80	; 128
    19b4:	2d 87       	std	Y+13, r18	; 0x0d
    19b6:	3e 87       	std	Y+14, r19	; 0x0e
    19b8:	4f 87       	std	Y+15, r20	; 0x0f
    19ba:	58 8b       	std	Y+16, r21	; 0x10
    19bc:	be 01       	movw	r22, r28
    19be:	67 5f       	subi	r22, 0xF7	; 247
    19c0:	7f 4f       	sbci	r23, 0xFF	; 255
    19c2:	cb 01       	movw	r24, r22
    19c4:	0e 94 94 0e 	call	0x1d28	; 0x1d28 <__pack_f>
    19c8:	68 96       	adiw	r28, 0x18	; 24
    19ca:	ea e0       	ldi	r30, 0x0A	; 10
    19cc:	0c 94 ad 3b 	jmp	0x775a	; 0x775a <__epilogue_restores__+0x10>

000019d0 <__gtsf2>:
    19d0:	a8 e1       	ldi	r26, 0x18	; 24
    19d2:	b0 e0       	ldi	r27, 0x00	; 0
    19d4:	ee ee       	ldi	r30, 0xEE	; 238
    19d6:	fc e0       	ldi	r31, 0x0C	; 12
    19d8:	0c 94 95 3b 	jmp	0x772a	; 0x772a <__prologue_saves__+0x18>
    19dc:	69 83       	std	Y+1, r22	; 0x01
    19de:	7a 83       	std	Y+2, r23	; 0x02
    19e0:	8b 83       	std	Y+3, r24	; 0x03
    19e2:	9c 83       	std	Y+4, r25	; 0x04
    19e4:	2d 83       	std	Y+5, r18	; 0x05
    19e6:	3e 83       	std	Y+6, r19	; 0x06
    19e8:	4f 83       	std	Y+7, r20	; 0x07
    19ea:	58 87       	std	Y+8, r21	; 0x08
    19ec:	89 e0       	ldi	r24, 0x09	; 9
    19ee:	e8 2e       	mov	r14, r24
    19f0:	f1 2c       	mov	r15, r1
    19f2:	ec 0e       	add	r14, r28
    19f4:	fd 1e       	adc	r15, r29
    19f6:	ce 01       	movw	r24, r28
    19f8:	01 96       	adiw	r24, 0x01	; 1
    19fa:	b7 01       	movw	r22, r14
    19fc:	0e 94 69 0f 	call	0x1ed2	; 0x1ed2 <__unpack_f>
    1a00:	8e 01       	movw	r16, r28
    1a02:	0f 5e       	subi	r16, 0xEF	; 239
    1a04:	1f 4f       	sbci	r17, 0xFF	; 255
    1a06:	ce 01       	movw	r24, r28
    1a08:	05 96       	adiw	r24, 0x05	; 5
    1a0a:	b8 01       	movw	r22, r16
    1a0c:	0e 94 69 0f 	call	0x1ed2	; 0x1ed2 <__unpack_f>
    1a10:	89 85       	ldd	r24, Y+9	; 0x09
    1a12:	82 30       	cpi	r24, 0x02	; 2
    1a14:	40 f0       	brcs	.+16     	; 0x1a26 <__gtsf2+0x56>
    1a16:	89 89       	ldd	r24, Y+17	; 0x11
    1a18:	82 30       	cpi	r24, 0x02	; 2
    1a1a:	28 f0       	brcs	.+10     	; 0x1a26 <__gtsf2+0x56>
    1a1c:	c7 01       	movw	r24, r14
    1a1e:	b8 01       	movw	r22, r16
    1a20:	0e 94 e1 0f 	call	0x1fc2	; 0x1fc2 <__fpcmp_parts_f>
    1a24:	01 c0       	rjmp	.+2      	; 0x1a28 <__gtsf2+0x58>
    1a26:	8f ef       	ldi	r24, 0xFF	; 255
    1a28:	68 96       	adiw	r28, 0x18	; 24
    1a2a:	e6 e0       	ldi	r30, 0x06	; 6
    1a2c:	0c 94 b1 3b 	jmp	0x7762	; 0x7762 <__epilogue_restores__+0x18>

00001a30 <__gesf2>:
    1a30:	a8 e1       	ldi	r26, 0x18	; 24
    1a32:	b0 e0       	ldi	r27, 0x00	; 0
    1a34:	ee e1       	ldi	r30, 0x1E	; 30
    1a36:	fd e0       	ldi	r31, 0x0D	; 13
    1a38:	0c 94 95 3b 	jmp	0x772a	; 0x772a <__prologue_saves__+0x18>
    1a3c:	69 83       	std	Y+1, r22	; 0x01
    1a3e:	7a 83       	std	Y+2, r23	; 0x02
    1a40:	8b 83       	std	Y+3, r24	; 0x03
    1a42:	9c 83       	std	Y+4, r25	; 0x04
    1a44:	2d 83       	std	Y+5, r18	; 0x05
    1a46:	3e 83       	std	Y+6, r19	; 0x06
    1a48:	4f 83       	std	Y+7, r20	; 0x07
    1a4a:	58 87       	std	Y+8, r21	; 0x08
    1a4c:	89 e0       	ldi	r24, 0x09	; 9
    1a4e:	e8 2e       	mov	r14, r24
    1a50:	f1 2c       	mov	r15, r1
    1a52:	ec 0e       	add	r14, r28
    1a54:	fd 1e       	adc	r15, r29
    1a56:	ce 01       	movw	r24, r28
    1a58:	01 96       	adiw	r24, 0x01	; 1
    1a5a:	b7 01       	movw	r22, r14
    1a5c:	0e 94 69 0f 	call	0x1ed2	; 0x1ed2 <__unpack_f>
    1a60:	8e 01       	movw	r16, r28
    1a62:	0f 5e       	subi	r16, 0xEF	; 239
    1a64:	1f 4f       	sbci	r17, 0xFF	; 255
    1a66:	ce 01       	movw	r24, r28
    1a68:	05 96       	adiw	r24, 0x05	; 5
    1a6a:	b8 01       	movw	r22, r16
    1a6c:	0e 94 69 0f 	call	0x1ed2	; 0x1ed2 <__unpack_f>
    1a70:	89 85       	ldd	r24, Y+9	; 0x09
    1a72:	82 30       	cpi	r24, 0x02	; 2
    1a74:	40 f0       	brcs	.+16     	; 0x1a86 <__gesf2+0x56>
    1a76:	89 89       	ldd	r24, Y+17	; 0x11
    1a78:	82 30       	cpi	r24, 0x02	; 2
    1a7a:	28 f0       	brcs	.+10     	; 0x1a86 <__gesf2+0x56>
    1a7c:	c7 01       	movw	r24, r14
    1a7e:	b8 01       	movw	r22, r16
    1a80:	0e 94 e1 0f 	call	0x1fc2	; 0x1fc2 <__fpcmp_parts_f>
    1a84:	01 c0       	rjmp	.+2      	; 0x1a88 <__gesf2+0x58>
    1a86:	8f ef       	ldi	r24, 0xFF	; 255
    1a88:	68 96       	adiw	r28, 0x18	; 24
    1a8a:	e6 e0       	ldi	r30, 0x06	; 6
    1a8c:	0c 94 b1 3b 	jmp	0x7762	; 0x7762 <__epilogue_restores__+0x18>

00001a90 <__ltsf2>:
    1a90:	a8 e1       	ldi	r26, 0x18	; 24
    1a92:	b0 e0       	ldi	r27, 0x00	; 0
    1a94:	ee e4       	ldi	r30, 0x4E	; 78
    1a96:	fd e0       	ldi	r31, 0x0D	; 13
    1a98:	0c 94 95 3b 	jmp	0x772a	; 0x772a <__prologue_saves__+0x18>
    1a9c:	69 83       	std	Y+1, r22	; 0x01
    1a9e:	7a 83       	std	Y+2, r23	; 0x02
    1aa0:	8b 83       	std	Y+3, r24	; 0x03
    1aa2:	9c 83       	std	Y+4, r25	; 0x04
    1aa4:	2d 83       	std	Y+5, r18	; 0x05
    1aa6:	3e 83       	std	Y+6, r19	; 0x06
    1aa8:	4f 83       	std	Y+7, r20	; 0x07
    1aaa:	58 87       	std	Y+8, r21	; 0x08
    1aac:	89 e0       	ldi	r24, 0x09	; 9
    1aae:	e8 2e       	mov	r14, r24
    1ab0:	f1 2c       	mov	r15, r1
    1ab2:	ec 0e       	add	r14, r28
    1ab4:	fd 1e       	adc	r15, r29
    1ab6:	ce 01       	movw	r24, r28
    1ab8:	01 96       	adiw	r24, 0x01	; 1
    1aba:	b7 01       	movw	r22, r14
    1abc:	0e 94 69 0f 	call	0x1ed2	; 0x1ed2 <__unpack_f>
    1ac0:	8e 01       	movw	r16, r28
    1ac2:	0f 5e       	subi	r16, 0xEF	; 239
    1ac4:	1f 4f       	sbci	r17, 0xFF	; 255
    1ac6:	ce 01       	movw	r24, r28
    1ac8:	05 96       	adiw	r24, 0x05	; 5
    1aca:	b8 01       	movw	r22, r16
    1acc:	0e 94 69 0f 	call	0x1ed2	; 0x1ed2 <__unpack_f>
    1ad0:	89 85       	ldd	r24, Y+9	; 0x09
    1ad2:	82 30       	cpi	r24, 0x02	; 2
    1ad4:	40 f0       	brcs	.+16     	; 0x1ae6 <__ltsf2+0x56>
    1ad6:	89 89       	ldd	r24, Y+17	; 0x11
    1ad8:	82 30       	cpi	r24, 0x02	; 2
    1ada:	28 f0       	brcs	.+10     	; 0x1ae6 <__ltsf2+0x56>
    1adc:	c7 01       	movw	r24, r14
    1ade:	b8 01       	movw	r22, r16
    1ae0:	0e 94 e1 0f 	call	0x1fc2	; 0x1fc2 <__fpcmp_parts_f>
    1ae4:	01 c0       	rjmp	.+2      	; 0x1ae8 <__ltsf2+0x58>
    1ae6:	81 e0       	ldi	r24, 0x01	; 1
    1ae8:	68 96       	adiw	r28, 0x18	; 24
    1aea:	e6 e0       	ldi	r30, 0x06	; 6
    1aec:	0c 94 b1 3b 	jmp	0x7762	; 0x7762 <__epilogue_restores__+0x18>

00001af0 <__fixsfsi>:
    1af0:	ac e0       	ldi	r26, 0x0C	; 12
    1af2:	b0 e0       	ldi	r27, 0x00	; 0
    1af4:	ee e7       	ldi	r30, 0x7E	; 126
    1af6:	fd e0       	ldi	r31, 0x0D	; 13
    1af8:	0c 94 99 3b 	jmp	0x7732	; 0x7732 <__prologue_saves__+0x20>
    1afc:	69 83       	std	Y+1, r22	; 0x01
    1afe:	7a 83       	std	Y+2, r23	; 0x02
    1b00:	8b 83       	std	Y+3, r24	; 0x03
    1b02:	9c 83       	std	Y+4, r25	; 0x04
    1b04:	ce 01       	movw	r24, r28
    1b06:	01 96       	adiw	r24, 0x01	; 1
    1b08:	be 01       	movw	r22, r28
    1b0a:	6b 5f       	subi	r22, 0xFB	; 251
    1b0c:	7f 4f       	sbci	r23, 0xFF	; 255
    1b0e:	0e 94 69 0f 	call	0x1ed2	; 0x1ed2 <__unpack_f>
    1b12:	8d 81       	ldd	r24, Y+5	; 0x05
    1b14:	82 30       	cpi	r24, 0x02	; 2
    1b16:	61 f1       	breq	.+88     	; 0x1b70 <__fixsfsi+0x80>
    1b18:	82 30       	cpi	r24, 0x02	; 2
    1b1a:	50 f1       	brcs	.+84     	; 0x1b70 <__fixsfsi+0x80>
    1b1c:	84 30       	cpi	r24, 0x04	; 4
    1b1e:	21 f4       	brne	.+8      	; 0x1b28 <__fixsfsi+0x38>
    1b20:	8e 81       	ldd	r24, Y+6	; 0x06
    1b22:	88 23       	and	r24, r24
    1b24:	51 f1       	breq	.+84     	; 0x1b7a <__fixsfsi+0x8a>
    1b26:	2e c0       	rjmp	.+92     	; 0x1b84 <__fixsfsi+0x94>
    1b28:	2f 81       	ldd	r18, Y+7	; 0x07
    1b2a:	38 85       	ldd	r19, Y+8	; 0x08
    1b2c:	37 fd       	sbrc	r19, 7
    1b2e:	20 c0       	rjmp	.+64     	; 0x1b70 <__fixsfsi+0x80>
    1b30:	6e 81       	ldd	r22, Y+6	; 0x06
    1b32:	2f 31       	cpi	r18, 0x1F	; 31
    1b34:	31 05       	cpc	r19, r1
    1b36:	1c f0       	brlt	.+6      	; 0x1b3e <__fixsfsi+0x4e>
    1b38:	66 23       	and	r22, r22
    1b3a:	f9 f0       	breq	.+62     	; 0x1b7a <__fixsfsi+0x8a>
    1b3c:	23 c0       	rjmp	.+70     	; 0x1b84 <__fixsfsi+0x94>
    1b3e:	8e e1       	ldi	r24, 0x1E	; 30
    1b40:	90 e0       	ldi	r25, 0x00	; 0
    1b42:	82 1b       	sub	r24, r18
    1b44:	93 0b       	sbc	r25, r19
    1b46:	29 85       	ldd	r18, Y+9	; 0x09
    1b48:	3a 85       	ldd	r19, Y+10	; 0x0a
    1b4a:	4b 85       	ldd	r20, Y+11	; 0x0b
    1b4c:	5c 85       	ldd	r21, Y+12	; 0x0c
    1b4e:	04 c0       	rjmp	.+8      	; 0x1b58 <__fixsfsi+0x68>
    1b50:	56 95       	lsr	r21
    1b52:	47 95       	ror	r20
    1b54:	37 95       	ror	r19
    1b56:	27 95       	ror	r18
    1b58:	8a 95       	dec	r24
    1b5a:	d2 f7       	brpl	.-12     	; 0x1b50 <__fixsfsi+0x60>
    1b5c:	66 23       	and	r22, r22
    1b5e:	b1 f0       	breq	.+44     	; 0x1b8c <__fixsfsi+0x9c>
    1b60:	50 95       	com	r21
    1b62:	40 95       	com	r20
    1b64:	30 95       	com	r19
    1b66:	21 95       	neg	r18
    1b68:	3f 4f       	sbci	r19, 0xFF	; 255
    1b6a:	4f 4f       	sbci	r20, 0xFF	; 255
    1b6c:	5f 4f       	sbci	r21, 0xFF	; 255
    1b6e:	0e c0       	rjmp	.+28     	; 0x1b8c <__fixsfsi+0x9c>
    1b70:	20 e0       	ldi	r18, 0x00	; 0
    1b72:	30 e0       	ldi	r19, 0x00	; 0
    1b74:	40 e0       	ldi	r20, 0x00	; 0
    1b76:	50 e0       	ldi	r21, 0x00	; 0
    1b78:	09 c0       	rjmp	.+18     	; 0x1b8c <__fixsfsi+0x9c>
    1b7a:	2f ef       	ldi	r18, 0xFF	; 255
    1b7c:	3f ef       	ldi	r19, 0xFF	; 255
    1b7e:	4f ef       	ldi	r20, 0xFF	; 255
    1b80:	5f e7       	ldi	r21, 0x7F	; 127
    1b82:	04 c0       	rjmp	.+8      	; 0x1b8c <__fixsfsi+0x9c>
    1b84:	20 e0       	ldi	r18, 0x00	; 0
    1b86:	30 e0       	ldi	r19, 0x00	; 0
    1b88:	40 e0       	ldi	r20, 0x00	; 0
    1b8a:	50 e8       	ldi	r21, 0x80	; 128
    1b8c:	b9 01       	movw	r22, r18
    1b8e:	ca 01       	movw	r24, r20
    1b90:	2c 96       	adiw	r28, 0x0c	; 12
    1b92:	e2 e0       	ldi	r30, 0x02	; 2
    1b94:	0c 94 b5 3b 	jmp	0x776a	; 0x776a <__epilogue_restores__+0x20>

00001b98 <__floatunsisf>:
    1b98:	a8 e0       	ldi	r26, 0x08	; 8
    1b9a:	b0 e0       	ldi	r27, 0x00	; 0
    1b9c:	e2 ed       	ldi	r30, 0xD2	; 210
    1b9e:	fd e0       	ldi	r31, 0x0D	; 13
    1ba0:	0c 94 91 3b 	jmp	0x7722	; 0x7722 <__prologue_saves__+0x10>
    1ba4:	7b 01       	movw	r14, r22
    1ba6:	8c 01       	movw	r16, r24
    1ba8:	61 15       	cp	r22, r1
    1baa:	71 05       	cpc	r23, r1
    1bac:	81 05       	cpc	r24, r1
    1bae:	91 05       	cpc	r25, r1
    1bb0:	19 f4       	brne	.+6      	; 0x1bb8 <__floatunsisf+0x20>
    1bb2:	82 e0       	ldi	r24, 0x02	; 2
    1bb4:	89 83       	std	Y+1, r24	; 0x01
    1bb6:	60 c0       	rjmp	.+192    	; 0x1c78 <__floatunsisf+0xe0>
    1bb8:	83 e0       	ldi	r24, 0x03	; 3
    1bba:	89 83       	std	Y+1, r24	; 0x01
    1bbc:	8e e1       	ldi	r24, 0x1E	; 30
    1bbe:	c8 2e       	mov	r12, r24
    1bc0:	d1 2c       	mov	r13, r1
    1bc2:	dc 82       	std	Y+4, r13	; 0x04
    1bc4:	cb 82       	std	Y+3, r12	; 0x03
    1bc6:	ed 82       	std	Y+5, r14	; 0x05
    1bc8:	fe 82       	std	Y+6, r15	; 0x06
    1bca:	0f 83       	std	Y+7, r16	; 0x07
    1bcc:	18 87       	std	Y+8, r17	; 0x08
    1bce:	c8 01       	movw	r24, r16
    1bd0:	b7 01       	movw	r22, r14
    1bd2:	0e 94 45 0e 	call	0x1c8a	; 0x1c8a <__clzsi2>
    1bd6:	fc 01       	movw	r30, r24
    1bd8:	31 97       	sbiw	r30, 0x01	; 1
    1bda:	f7 ff       	sbrs	r31, 7
    1bdc:	3b c0       	rjmp	.+118    	; 0x1c54 <__floatunsisf+0xbc>
    1bde:	22 27       	eor	r18, r18
    1be0:	33 27       	eor	r19, r19
    1be2:	2e 1b       	sub	r18, r30
    1be4:	3f 0b       	sbc	r19, r31
    1be6:	57 01       	movw	r10, r14
    1be8:	68 01       	movw	r12, r16
    1bea:	02 2e       	mov	r0, r18
    1bec:	04 c0       	rjmp	.+8      	; 0x1bf6 <__floatunsisf+0x5e>
    1bee:	d6 94       	lsr	r13
    1bf0:	c7 94       	ror	r12
    1bf2:	b7 94       	ror	r11
    1bf4:	a7 94       	ror	r10
    1bf6:	0a 94       	dec	r0
    1bf8:	d2 f7       	brpl	.-12     	; 0x1bee <__floatunsisf+0x56>
    1bfa:	40 e0       	ldi	r20, 0x00	; 0
    1bfc:	50 e0       	ldi	r21, 0x00	; 0
    1bfe:	60 e0       	ldi	r22, 0x00	; 0
    1c00:	70 e0       	ldi	r23, 0x00	; 0
    1c02:	81 e0       	ldi	r24, 0x01	; 1
    1c04:	90 e0       	ldi	r25, 0x00	; 0
    1c06:	a0 e0       	ldi	r26, 0x00	; 0
    1c08:	b0 e0       	ldi	r27, 0x00	; 0
    1c0a:	04 c0       	rjmp	.+8      	; 0x1c14 <__floatunsisf+0x7c>
    1c0c:	88 0f       	add	r24, r24
    1c0e:	99 1f       	adc	r25, r25
    1c10:	aa 1f       	adc	r26, r26
    1c12:	bb 1f       	adc	r27, r27
    1c14:	2a 95       	dec	r18
    1c16:	d2 f7       	brpl	.-12     	; 0x1c0c <__floatunsisf+0x74>
    1c18:	01 97       	sbiw	r24, 0x01	; 1
    1c1a:	a1 09       	sbc	r26, r1
    1c1c:	b1 09       	sbc	r27, r1
    1c1e:	8e 21       	and	r24, r14
    1c20:	9f 21       	and	r25, r15
    1c22:	a0 23       	and	r26, r16
    1c24:	b1 23       	and	r27, r17
    1c26:	00 97       	sbiw	r24, 0x00	; 0
    1c28:	a1 05       	cpc	r26, r1
    1c2a:	b1 05       	cpc	r27, r1
    1c2c:	21 f0       	breq	.+8      	; 0x1c36 <__floatunsisf+0x9e>
    1c2e:	41 e0       	ldi	r20, 0x01	; 1
    1c30:	50 e0       	ldi	r21, 0x00	; 0
    1c32:	60 e0       	ldi	r22, 0x00	; 0
    1c34:	70 e0       	ldi	r23, 0x00	; 0
    1c36:	4a 29       	or	r20, r10
    1c38:	5b 29       	or	r21, r11
    1c3a:	6c 29       	or	r22, r12
    1c3c:	7d 29       	or	r23, r13
    1c3e:	4d 83       	std	Y+5, r20	; 0x05
    1c40:	5e 83       	std	Y+6, r21	; 0x06
    1c42:	6f 83       	std	Y+7, r22	; 0x07
    1c44:	78 87       	std	Y+8, r23	; 0x08
    1c46:	8e e1       	ldi	r24, 0x1E	; 30
    1c48:	90 e0       	ldi	r25, 0x00	; 0
    1c4a:	8e 1b       	sub	r24, r30
    1c4c:	9f 0b       	sbc	r25, r31
    1c4e:	9c 83       	std	Y+4, r25	; 0x04
    1c50:	8b 83       	std	Y+3, r24	; 0x03
    1c52:	12 c0       	rjmp	.+36     	; 0x1c78 <__floatunsisf+0xe0>
    1c54:	30 97       	sbiw	r30, 0x00	; 0
    1c56:	81 f0       	breq	.+32     	; 0x1c78 <__floatunsisf+0xe0>
    1c58:	0e 2e       	mov	r0, r30
    1c5a:	04 c0       	rjmp	.+8      	; 0x1c64 <__floatunsisf+0xcc>
    1c5c:	ee 0c       	add	r14, r14
    1c5e:	ff 1c       	adc	r15, r15
    1c60:	00 1f       	adc	r16, r16
    1c62:	11 1f       	adc	r17, r17
    1c64:	0a 94       	dec	r0
    1c66:	d2 f7       	brpl	.-12     	; 0x1c5c <__floatunsisf+0xc4>
    1c68:	ed 82       	std	Y+5, r14	; 0x05
    1c6a:	fe 82       	std	Y+6, r15	; 0x06
    1c6c:	0f 83       	std	Y+7, r16	; 0x07
    1c6e:	18 87       	std	Y+8, r17	; 0x08
    1c70:	ce 1a       	sub	r12, r30
    1c72:	df 0a       	sbc	r13, r31
    1c74:	dc 82       	std	Y+4, r13	; 0x04
    1c76:	cb 82       	std	Y+3, r12	; 0x03
    1c78:	1a 82       	std	Y+2, r1	; 0x02
    1c7a:	ce 01       	movw	r24, r28
    1c7c:	01 96       	adiw	r24, 0x01	; 1
    1c7e:	0e 94 94 0e 	call	0x1d28	; 0x1d28 <__pack_f>
    1c82:	28 96       	adiw	r28, 0x08	; 8
    1c84:	ea e0       	ldi	r30, 0x0A	; 10
    1c86:	0c 94 ad 3b 	jmp	0x775a	; 0x775a <__epilogue_restores__+0x10>

00001c8a <__clzsi2>:
    1c8a:	ef 92       	push	r14
    1c8c:	ff 92       	push	r15
    1c8e:	0f 93       	push	r16
    1c90:	1f 93       	push	r17
    1c92:	7b 01       	movw	r14, r22
    1c94:	8c 01       	movw	r16, r24
    1c96:	80 e0       	ldi	r24, 0x00	; 0
    1c98:	e8 16       	cp	r14, r24
    1c9a:	80 e0       	ldi	r24, 0x00	; 0
    1c9c:	f8 06       	cpc	r15, r24
    1c9e:	81 e0       	ldi	r24, 0x01	; 1
    1ca0:	08 07       	cpc	r16, r24
    1ca2:	80 e0       	ldi	r24, 0x00	; 0
    1ca4:	18 07       	cpc	r17, r24
    1ca6:	88 f4       	brcc	.+34     	; 0x1cca <__clzsi2+0x40>
    1ca8:	8f ef       	ldi	r24, 0xFF	; 255
    1caa:	e8 16       	cp	r14, r24
    1cac:	f1 04       	cpc	r15, r1
    1cae:	01 05       	cpc	r16, r1
    1cb0:	11 05       	cpc	r17, r1
    1cb2:	31 f0       	breq	.+12     	; 0x1cc0 <__clzsi2+0x36>
    1cb4:	28 f0       	brcs	.+10     	; 0x1cc0 <__clzsi2+0x36>
    1cb6:	88 e0       	ldi	r24, 0x08	; 8
    1cb8:	90 e0       	ldi	r25, 0x00	; 0
    1cba:	a0 e0       	ldi	r26, 0x00	; 0
    1cbc:	b0 e0       	ldi	r27, 0x00	; 0
    1cbe:	17 c0       	rjmp	.+46     	; 0x1cee <__clzsi2+0x64>
    1cc0:	80 e0       	ldi	r24, 0x00	; 0
    1cc2:	90 e0       	ldi	r25, 0x00	; 0
    1cc4:	a0 e0       	ldi	r26, 0x00	; 0
    1cc6:	b0 e0       	ldi	r27, 0x00	; 0
    1cc8:	12 c0       	rjmp	.+36     	; 0x1cee <__clzsi2+0x64>
    1cca:	80 e0       	ldi	r24, 0x00	; 0
    1ccc:	e8 16       	cp	r14, r24
    1cce:	80 e0       	ldi	r24, 0x00	; 0
    1cd0:	f8 06       	cpc	r15, r24
    1cd2:	80 e0       	ldi	r24, 0x00	; 0
    1cd4:	08 07       	cpc	r16, r24
    1cd6:	81 e0       	ldi	r24, 0x01	; 1
    1cd8:	18 07       	cpc	r17, r24
    1cda:	28 f0       	brcs	.+10     	; 0x1ce6 <__clzsi2+0x5c>
    1cdc:	88 e1       	ldi	r24, 0x18	; 24
    1cde:	90 e0       	ldi	r25, 0x00	; 0
    1ce0:	a0 e0       	ldi	r26, 0x00	; 0
    1ce2:	b0 e0       	ldi	r27, 0x00	; 0
    1ce4:	04 c0       	rjmp	.+8      	; 0x1cee <__clzsi2+0x64>
    1ce6:	80 e1       	ldi	r24, 0x10	; 16
    1ce8:	90 e0       	ldi	r25, 0x00	; 0
    1cea:	a0 e0       	ldi	r26, 0x00	; 0
    1cec:	b0 e0       	ldi	r27, 0x00	; 0
    1cee:	20 e2       	ldi	r18, 0x20	; 32
    1cf0:	30 e0       	ldi	r19, 0x00	; 0
    1cf2:	40 e0       	ldi	r20, 0x00	; 0
    1cf4:	50 e0       	ldi	r21, 0x00	; 0
    1cf6:	28 1b       	sub	r18, r24
    1cf8:	39 0b       	sbc	r19, r25
    1cfa:	4a 0b       	sbc	r20, r26
    1cfc:	5b 0b       	sbc	r21, r27
    1cfe:	04 c0       	rjmp	.+8      	; 0x1d08 <__clzsi2+0x7e>
    1d00:	16 95       	lsr	r17
    1d02:	07 95       	ror	r16
    1d04:	f7 94       	ror	r15
    1d06:	e7 94       	ror	r14
    1d08:	8a 95       	dec	r24
    1d0a:	d2 f7       	brpl	.-12     	; 0x1d00 <__clzsi2+0x76>
    1d0c:	f7 01       	movw	r30, r14
    1d0e:	e8 59       	subi	r30, 0x98	; 152
    1d10:	ff 4f       	sbci	r31, 0xFF	; 255
    1d12:	80 81       	ld	r24, Z
    1d14:	28 1b       	sub	r18, r24
    1d16:	31 09       	sbc	r19, r1
    1d18:	41 09       	sbc	r20, r1
    1d1a:	51 09       	sbc	r21, r1
    1d1c:	c9 01       	movw	r24, r18
    1d1e:	1f 91       	pop	r17
    1d20:	0f 91       	pop	r16
    1d22:	ff 90       	pop	r15
    1d24:	ef 90       	pop	r14
    1d26:	08 95       	ret

00001d28 <__pack_f>:
    1d28:	df 92       	push	r13
    1d2a:	ef 92       	push	r14
    1d2c:	ff 92       	push	r15
    1d2e:	0f 93       	push	r16
    1d30:	1f 93       	push	r17
    1d32:	fc 01       	movw	r30, r24
    1d34:	e4 80       	ldd	r14, Z+4	; 0x04
    1d36:	f5 80       	ldd	r15, Z+5	; 0x05
    1d38:	06 81       	ldd	r16, Z+6	; 0x06
    1d3a:	17 81       	ldd	r17, Z+7	; 0x07
    1d3c:	d1 80       	ldd	r13, Z+1	; 0x01
    1d3e:	80 81       	ld	r24, Z
    1d40:	82 30       	cpi	r24, 0x02	; 2
    1d42:	48 f4       	brcc	.+18     	; 0x1d56 <__pack_f+0x2e>
    1d44:	80 e0       	ldi	r24, 0x00	; 0
    1d46:	90 e0       	ldi	r25, 0x00	; 0
    1d48:	a0 e1       	ldi	r26, 0x10	; 16
    1d4a:	b0 e0       	ldi	r27, 0x00	; 0
    1d4c:	e8 2a       	or	r14, r24
    1d4e:	f9 2a       	or	r15, r25
    1d50:	0a 2b       	or	r16, r26
    1d52:	1b 2b       	or	r17, r27
    1d54:	a5 c0       	rjmp	.+330    	; 0x1ea0 <__pack_f+0x178>
    1d56:	84 30       	cpi	r24, 0x04	; 4
    1d58:	09 f4       	brne	.+2      	; 0x1d5c <__pack_f+0x34>
    1d5a:	9f c0       	rjmp	.+318    	; 0x1e9a <__pack_f+0x172>
    1d5c:	82 30       	cpi	r24, 0x02	; 2
    1d5e:	21 f4       	brne	.+8      	; 0x1d68 <__pack_f+0x40>
    1d60:	ee 24       	eor	r14, r14
    1d62:	ff 24       	eor	r15, r15
    1d64:	87 01       	movw	r16, r14
    1d66:	05 c0       	rjmp	.+10     	; 0x1d72 <__pack_f+0x4a>
    1d68:	e1 14       	cp	r14, r1
    1d6a:	f1 04       	cpc	r15, r1
    1d6c:	01 05       	cpc	r16, r1
    1d6e:	11 05       	cpc	r17, r1
    1d70:	19 f4       	brne	.+6      	; 0x1d78 <__pack_f+0x50>
    1d72:	e0 e0       	ldi	r30, 0x00	; 0
    1d74:	f0 e0       	ldi	r31, 0x00	; 0
    1d76:	96 c0       	rjmp	.+300    	; 0x1ea4 <__pack_f+0x17c>
    1d78:	62 81       	ldd	r22, Z+2	; 0x02
    1d7a:	73 81       	ldd	r23, Z+3	; 0x03
    1d7c:	9f ef       	ldi	r25, 0xFF	; 255
    1d7e:	62 38       	cpi	r22, 0x82	; 130
    1d80:	79 07       	cpc	r23, r25
    1d82:	0c f0       	brlt	.+2      	; 0x1d86 <__pack_f+0x5e>
    1d84:	5b c0       	rjmp	.+182    	; 0x1e3c <__pack_f+0x114>
    1d86:	22 e8       	ldi	r18, 0x82	; 130
    1d88:	3f ef       	ldi	r19, 0xFF	; 255
    1d8a:	26 1b       	sub	r18, r22
    1d8c:	37 0b       	sbc	r19, r23
    1d8e:	2a 31       	cpi	r18, 0x1A	; 26
    1d90:	31 05       	cpc	r19, r1
    1d92:	2c f0       	brlt	.+10     	; 0x1d9e <__pack_f+0x76>
    1d94:	20 e0       	ldi	r18, 0x00	; 0
    1d96:	30 e0       	ldi	r19, 0x00	; 0
    1d98:	40 e0       	ldi	r20, 0x00	; 0
    1d9a:	50 e0       	ldi	r21, 0x00	; 0
    1d9c:	2a c0       	rjmp	.+84     	; 0x1df2 <__pack_f+0xca>
    1d9e:	b8 01       	movw	r22, r16
    1da0:	a7 01       	movw	r20, r14
    1da2:	02 2e       	mov	r0, r18
    1da4:	04 c0       	rjmp	.+8      	; 0x1dae <__pack_f+0x86>
    1da6:	76 95       	lsr	r23
    1da8:	67 95       	ror	r22
    1daa:	57 95       	ror	r21
    1dac:	47 95       	ror	r20
    1dae:	0a 94       	dec	r0
    1db0:	d2 f7       	brpl	.-12     	; 0x1da6 <__pack_f+0x7e>
    1db2:	81 e0       	ldi	r24, 0x01	; 1
    1db4:	90 e0       	ldi	r25, 0x00	; 0
    1db6:	a0 e0       	ldi	r26, 0x00	; 0
    1db8:	b0 e0       	ldi	r27, 0x00	; 0
    1dba:	04 c0       	rjmp	.+8      	; 0x1dc4 <__pack_f+0x9c>
    1dbc:	88 0f       	add	r24, r24
    1dbe:	99 1f       	adc	r25, r25
    1dc0:	aa 1f       	adc	r26, r26
    1dc2:	bb 1f       	adc	r27, r27
    1dc4:	2a 95       	dec	r18
    1dc6:	d2 f7       	brpl	.-12     	; 0x1dbc <__pack_f+0x94>
    1dc8:	01 97       	sbiw	r24, 0x01	; 1
    1dca:	a1 09       	sbc	r26, r1
    1dcc:	b1 09       	sbc	r27, r1
    1dce:	8e 21       	and	r24, r14
    1dd0:	9f 21       	and	r25, r15
    1dd2:	a0 23       	and	r26, r16
    1dd4:	b1 23       	and	r27, r17
    1dd6:	00 97       	sbiw	r24, 0x00	; 0
    1dd8:	a1 05       	cpc	r26, r1
    1dda:	b1 05       	cpc	r27, r1
    1ddc:	21 f0       	breq	.+8      	; 0x1de6 <__pack_f+0xbe>
    1dde:	81 e0       	ldi	r24, 0x01	; 1
    1de0:	90 e0       	ldi	r25, 0x00	; 0
    1de2:	a0 e0       	ldi	r26, 0x00	; 0
    1de4:	b0 e0       	ldi	r27, 0x00	; 0
    1de6:	9a 01       	movw	r18, r20
    1de8:	ab 01       	movw	r20, r22
    1dea:	28 2b       	or	r18, r24
    1dec:	39 2b       	or	r19, r25
    1dee:	4a 2b       	or	r20, r26
    1df0:	5b 2b       	or	r21, r27
    1df2:	da 01       	movw	r26, r20
    1df4:	c9 01       	movw	r24, r18
    1df6:	8f 77       	andi	r24, 0x7F	; 127
    1df8:	90 70       	andi	r25, 0x00	; 0
    1dfa:	a0 70       	andi	r26, 0x00	; 0
    1dfc:	b0 70       	andi	r27, 0x00	; 0
    1dfe:	80 34       	cpi	r24, 0x40	; 64
    1e00:	91 05       	cpc	r25, r1
    1e02:	a1 05       	cpc	r26, r1
    1e04:	b1 05       	cpc	r27, r1
    1e06:	39 f4       	brne	.+14     	; 0x1e16 <__pack_f+0xee>
    1e08:	27 ff       	sbrs	r18, 7
    1e0a:	09 c0       	rjmp	.+18     	; 0x1e1e <__pack_f+0xf6>
    1e0c:	20 5c       	subi	r18, 0xC0	; 192
    1e0e:	3f 4f       	sbci	r19, 0xFF	; 255
    1e10:	4f 4f       	sbci	r20, 0xFF	; 255
    1e12:	5f 4f       	sbci	r21, 0xFF	; 255
    1e14:	04 c0       	rjmp	.+8      	; 0x1e1e <__pack_f+0xf6>
    1e16:	21 5c       	subi	r18, 0xC1	; 193
    1e18:	3f 4f       	sbci	r19, 0xFF	; 255
    1e1a:	4f 4f       	sbci	r20, 0xFF	; 255
    1e1c:	5f 4f       	sbci	r21, 0xFF	; 255
    1e1e:	e0 e0       	ldi	r30, 0x00	; 0
    1e20:	f0 e0       	ldi	r31, 0x00	; 0
    1e22:	20 30       	cpi	r18, 0x00	; 0
    1e24:	a0 e0       	ldi	r26, 0x00	; 0
    1e26:	3a 07       	cpc	r19, r26
    1e28:	a0 e0       	ldi	r26, 0x00	; 0
    1e2a:	4a 07       	cpc	r20, r26
    1e2c:	a0 e4       	ldi	r26, 0x40	; 64
    1e2e:	5a 07       	cpc	r21, r26
    1e30:	10 f0       	brcs	.+4      	; 0x1e36 <__pack_f+0x10e>
    1e32:	e1 e0       	ldi	r30, 0x01	; 1
    1e34:	f0 e0       	ldi	r31, 0x00	; 0
    1e36:	79 01       	movw	r14, r18
    1e38:	8a 01       	movw	r16, r20
    1e3a:	27 c0       	rjmp	.+78     	; 0x1e8a <__pack_f+0x162>
    1e3c:	60 38       	cpi	r22, 0x80	; 128
    1e3e:	71 05       	cpc	r23, r1
    1e40:	64 f5       	brge	.+88     	; 0x1e9a <__pack_f+0x172>
    1e42:	fb 01       	movw	r30, r22
    1e44:	e1 58       	subi	r30, 0x81	; 129
    1e46:	ff 4f       	sbci	r31, 0xFF	; 255
    1e48:	d8 01       	movw	r26, r16
    1e4a:	c7 01       	movw	r24, r14
    1e4c:	8f 77       	andi	r24, 0x7F	; 127
    1e4e:	90 70       	andi	r25, 0x00	; 0
    1e50:	a0 70       	andi	r26, 0x00	; 0
    1e52:	b0 70       	andi	r27, 0x00	; 0
    1e54:	80 34       	cpi	r24, 0x40	; 64
    1e56:	91 05       	cpc	r25, r1
    1e58:	a1 05       	cpc	r26, r1
    1e5a:	b1 05       	cpc	r27, r1
    1e5c:	39 f4       	brne	.+14     	; 0x1e6c <__pack_f+0x144>
    1e5e:	e7 fe       	sbrs	r14, 7
    1e60:	0d c0       	rjmp	.+26     	; 0x1e7c <__pack_f+0x154>
    1e62:	80 e4       	ldi	r24, 0x40	; 64
    1e64:	90 e0       	ldi	r25, 0x00	; 0
    1e66:	a0 e0       	ldi	r26, 0x00	; 0
    1e68:	b0 e0       	ldi	r27, 0x00	; 0
    1e6a:	04 c0       	rjmp	.+8      	; 0x1e74 <__pack_f+0x14c>
    1e6c:	8f e3       	ldi	r24, 0x3F	; 63
    1e6e:	90 e0       	ldi	r25, 0x00	; 0
    1e70:	a0 e0       	ldi	r26, 0x00	; 0
    1e72:	b0 e0       	ldi	r27, 0x00	; 0
    1e74:	e8 0e       	add	r14, r24
    1e76:	f9 1e       	adc	r15, r25
    1e78:	0a 1f       	adc	r16, r26
    1e7a:	1b 1f       	adc	r17, r27
    1e7c:	17 ff       	sbrs	r17, 7
    1e7e:	05 c0       	rjmp	.+10     	; 0x1e8a <__pack_f+0x162>
    1e80:	16 95       	lsr	r17
    1e82:	07 95       	ror	r16
    1e84:	f7 94       	ror	r15
    1e86:	e7 94       	ror	r14
    1e88:	31 96       	adiw	r30, 0x01	; 1
    1e8a:	87 e0       	ldi	r24, 0x07	; 7
    1e8c:	16 95       	lsr	r17
    1e8e:	07 95       	ror	r16
    1e90:	f7 94       	ror	r15
    1e92:	e7 94       	ror	r14
    1e94:	8a 95       	dec	r24
    1e96:	d1 f7       	brne	.-12     	; 0x1e8c <__pack_f+0x164>
    1e98:	05 c0       	rjmp	.+10     	; 0x1ea4 <__pack_f+0x17c>
    1e9a:	ee 24       	eor	r14, r14
    1e9c:	ff 24       	eor	r15, r15
    1e9e:	87 01       	movw	r16, r14
    1ea0:	ef ef       	ldi	r30, 0xFF	; 255
    1ea2:	f0 e0       	ldi	r31, 0x00	; 0
    1ea4:	6e 2f       	mov	r22, r30
    1ea6:	67 95       	ror	r22
    1ea8:	66 27       	eor	r22, r22
    1eaa:	67 95       	ror	r22
    1eac:	90 2f       	mov	r25, r16
    1eae:	9f 77       	andi	r25, 0x7F	; 127
    1eb0:	d7 94       	ror	r13
    1eb2:	dd 24       	eor	r13, r13
    1eb4:	d7 94       	ror	r13
    1eb6:	8e 2f       	mov	r24, r30
    1eb8:	86 95       	lsr	r24
    1eba:	49 2f       	mov	r20, r25
    1ebc:	46 2b       	or	r20, r22
    1ebe:	58 2f       	mov	r21, r24
    1ec0:	5d 29       	or	r21, r13
    1ec2:	b7 01       	movw	r22, r14
    1ec4:	ca 01       	movw	r24, r20
    1ec6:	1f 91       	pop	r17
    1ec8:	0f 91       	pop	r16
    1eca:	ff 90       	pop	r15
    1ecc:	ef 90       	pop	r14
    1ece:	df 90       	pop	r13
    1ed0:	08 95       	ret

00001ed2 <__unpack_f>:
    1ed2:	fc 01       	movw	r30, r24
    1ed4:	db 01       	movw	r26, r22
    1ed6:	40 81       	ld	r20, Z
    1ed8:	51 81       	ldd	r21, Z+1	; 0x01
    1eda:	22 81       	ldd	r18, Z+2	; 0x02
    1edc:	62 2f       	mov	r22, r18
    1ede:	6f 77       	andi	r22, 0x7F	; 127
    1ee0:	70 e0       	ldi	r23, 0x00	; 0
    1ee2:	22 1f       	adc	r18, r18
    1ee4:	22 27       	eor	r18, r18
    1ee6:	22 1f       	adc	r18, r18
    1ee8:	93 81       	ldd	r25, Z+3	; 0x03
    1eea:	89 2f       	mov	r24, r25
    1eec:	88 0f       	add	r24, r24
    1eee:	82 2b       	or	r24, r18
    1ef0:	28 2f       	mov	r18, r24
    1ef2:	30 e0       	ldi	r19, 0x00	; 0
    1ef4:	99 1f       	adc	r25, r25
    1ef6:	99 27       	eor	r25, r25
    1ef8:	99 1f       	adc	r25, r25
    1efa:	11 96       	adiw	r26, 0x01	; 1
    1efc:	9c 93       	st	X, r25
    1efe:	11 97       	sbiw	r26, 0x01	; 1
    1f00:	21 15       	cp	r18, r1
    1f02:	31 05       	cpc	r19, r1
    1f04:	a9 f5       	brne	.+106    	; 0x1f70 <__unpack_f+0x9e>
    1f06:	41 15       	cp	r20, r1
    1f08:	51 05       	cpc	r21, r1
    1f0a:	61 05       	cpc	r22, r1
    1f0c:	71 05       	cpc	r23, r1
    1f0e:	11 f4       	brne	.+4      	; 0x1f14 <__unpack_f+0x42>
    1f10:	82 e0       	ldi	r24, 0x02	; 2
    1f12:	37 c0       	rjmp	.+110    	; 0x1f82 <__unpack_f+0xb0>
    1f14:	82 e8       	ldi	r24, 0x82	; 130
    1f16:	9f ef       	ldi	r25, 0xFF	; 255
    1f18:	13 96       	adiw	r26, 0x03	; 3
    1f1a:	9c 93       	st	X, r25
    1f1c:	8e 93       	st	-X, r24
    1f1e:	12 97       	sbiw	r26, 0x02	; 2
    1f20:	9a 01       	movw	r18, r20
    1f22:	ab 01       	movw	r20, r22
    1f24:	67 e0       	ldi	r22, 0x07	; 7
    1f26:	22 0f       	add	r18, r18
    1f28:	33 1f       	adc	r19, r19
    1f2a:	44 1f       	adc	r20, r20
    1f2c:	55 1f       	adc	r21, r21
    1f2e:	6a 95       	dec	r22
    1f30:	d1 f7       	brne	.-12     	; 0x1f26 <__unpack_f+0x54>
    1f32:	83 e0       	ldi	r24, 0x03	; 3
    1f34:	8c 93       	st	X, r24
    1f36:	0d c0       	rjmp	.+26     	; 0x1f52 <__unpack_f+0x80>
    1f38:	22 0f       	add	r18, r18
    1f3a:	33 1f       	adc	r19, r19
    1f3c:	44 1f       	adc	r20, r20
    1f3e:	55 1f       	adc	r21, r21
    1f40:	12 96       	adiw	r26, 0x02	; 2
    1f42:	8d 91       	ld	r24, X+
    1f44:	9c 91       	ld	r25, X
    1f46:	13 97       	sbiw	r26, 0x03	; 3
    1f48:	01 97       	sbiw	r24, 0x01	; 1
    1f4a:	13 96       	adiw	r26, 0x03	; 3
    1f4c:	9c 93       	st	X, r25
    1f4e:	8e 93       	st	-X, r24
    1f50:	12 97       	sbiw	r26, 0x02	; 2
    1f52:	20 30       	cpi	r18, 0x00	; 0
    1f54:	80 e0       	ldi	r24, 0x00	; 0
    1f56:	38 07       	cpc	r19, r24
    1f58:	80 e0       	ldi	r24, 0x00	; 0
    1f5a:	48 07       	cpc	r20, r24
    1f5c:	80 e4       	ldi	r24, 0x40	; 64
    1f5e:	58 07       	cpc	r21, r24
    1f60:	58 f3       	brcs	.-42     	; 0x1f38 <__unpack_f+0x66>
    1f62:	14 96       	adiw	r26, 0x04	; 4
    1f64:	2d 93       	st	X+, r18
    1f66:	3d 93       	st	X+, r19
    1f68:	4d 93       	st	X+, r20
    1f6a:	5c 93       	st	X, r21
    1f6c:	17 97       	sbiw	r26, 0x07	; 7
    1f6e:	08 95       	ret
    1f70:	2f 3f       	cpi	r18, 0xFF	; 255
    1f72:	31 05       	cpc	r19, r1
    1f74:	79 f4       	brne	.+30     	; 0x1f94 <__unpack_f+0xc2>
    1f76:	41 15       	cp	r20, r1
    1f78:	51 05       	cpc	r21, r1
    1f7a:	61 05       	cpc	r22, r1
    1f7c:	71 05       	cpc	r23, r1
    1f7e:	19 f4       	brne	.+6      	; 0x1f86 <__unpack_f+0xb4>
    1f80:	84 e0       	ldi	r24, 0x04	; 4
    1f82:	8c 93       	st	X, r24
    1f84:	08 95       	ret
    1f86:	64 ff       	sbrs	r22, 4
    1f88:	03 c0       	rjmp	.+6      	; 0x1f90 <__unpack_f+0xbe>
    1f8a:	81 e0       	ldi	r24, 0x01	; 1
    1f8c:	8c 93       	st	X, r24
    1f8e:	12 c0       	rjmp	.+36     	; 0x1fb4 <__unpack_f+0xe2>
    1f90:	1c 92       	st	X, r1
    1f92:	10 c0       	rjmp	.+32     	; 0x1fb4 <__unpack_f+0xe2>
    1f94:	2f 57       	subi	r18, 0x7F	; 127
    1f96:	30 40       	sbci	r19, 0x00	; 0
    1f98:	13 96       	adiw	r26, 0x03	; 3
    1f9a:	3c 93       	st	X, r19
    1f9c:	2e 93       	st	-X, r18
    1f9e:	12 97       	sbiw	r26, 0x02	; 2
    1fa0:	83 e0       	ldi	r24, 0x03	; 3
    1fa2:	8c 93       	st	X, r24
    1fa4:	87 e0       	ldi	r24, 0x07	; 7
    1fa6:	44 0f       	add	r20, r20
    1fa8:	55 1f       	adc	r21, r21
    1faa:	66 1f       	adc	r22, r22
    1fac:	77 1f       	adc	r23, r23
    1fae:	8a 95       	dec	r24
    1fb0:	d1 f7       	brne	.-12     	; 0x1fa6 <__unpack_f+0xd4>
    1fb2:	70 64       	ori	r23, 0x40	; 64
    1fb4:	14 96       	adiw	r26, 0x04	; 4
    1fb6:	4d 93       	st	X+, r20
    1fb8:	5d 93       	st	X+, r21
    1fba:	6d 93       	st	X+, r22
    1fbc:	7c 93       	st	X, r23
    1fbe:	17 97       	sbiw	r26, 0x07	; 7
    1fc0:	08 95       	ret

00001fc2 <__fpcmp_parts_f>:
    1fc2:	1f 93       	push	r17
    1fc4:	dc 01       	movw	r26, r24
    1fc6:	fb 01       	movw	r30, r22
    1fc8:	9c 91       	ld	r25, X
    1fca:	92 30       	cpi	r25, 0x02	; 2
    1fcc:	08 f4       	brcc	.+2      	; 0x1fd0 <__fpcmp_parts_f+0xe>
    1fce:	47 c0       	rjmp	.+142    	; 0x205e <__fpcmp_parts_f+0x9c>
    1fd0:	80 81       	ld	r24, Z
    1fd2:	82 30       	cpi	r24, 0x02	; 2
    1fd4:	08 f4       	brcc	.+2      	; 0x1fd8 <__fpcmp_parts_f+0x16>
    1fd6:	43 c0       	rjmp	.+134    	; 0x205e <__fpcmp_parts_f+0x9c>
    1fd8:	94 30       	cpi	r25, 0x04	; 4
    1fda:	51 f4       	brne	.+20     	; 0x1ff0 <__fpcmp_parts_f+0x2e>
    1fdc:	11 96       	adiw	r26, 0x01	; 1
    1fde:	1c 91       	ld	r17, X
    1fe0:	84 30       	cpi	r24, 0x04	; 4
    1fe2:	99 f5       	brne	.+102    	; 0x204a <__fpcmp_parts_f+0x88>
    1fe4:	81 81       	ldd	r24, Z+1	; 0x01
    1fe6:	68 2f       	mov	r22, r24
    1fe8:	70 e0       	ldi	r23, 0x00	; 0
    1fea:	61 1b       	sub	r22, r17
    1fec:	71 09       	sbc	r23, r1
    1fee:	3f c0       	rjmp	.+126    	; 0x206e <__fpcmp_parts_f+0xac>
    1ff0:	84 30       	cpi	r24, 0x04	; 4
    1ff2:	21 f0       	breq	.+8      	; 0x1ffc <__fpcmp_parts_f+0x3a>
    1ff4:	92 30       	cpi	r25, 0x02	; 2
    1ff6:	31 f4       	brne	.+12     	; 0x2004 <__fpcmp_parts_f+0x42>
    1ff8:	82 30       	cpi	r24, 0x02	; 2
    1ffa:	b9 f1       	breq	.+110    	; 0x206a <__fpcmp_parts_f+0xa8>
    1ffc:	81 81       	ldd	r24, Z+1	; 0x01
    1ffe:	88 23       	and	r24, r24
    2000:	89 f1       	breq	.+98     	; 0x2064 <__fpcmp_parts_f+0xa2>
    2002:	2d c0       	rjmp	.+90     	; 0x205e <__fpcmp_parts_f+0x9c>
    2004:	11 96       	adiw	r26, 0x01	; 1
    2006:	1c 91       	ld	r17, X
    2008:	11 97       	sbiw	r26, 0x01	; 1
    200a:	82 30       	cpi	r24, 0x02	; 2
    200c:	f1 f0       	breq	.+60     	; 0x204a <__fpcmp_parts_f+0x88>
    200e:	81 81       	ldd	r24, Z+1	; 0x01
    2010:	18 17       	cp	r17, r24
    2012:	d9 f4       	brne	.+54     	; 0x204a <__fpcmp_parts_f+0x88>
    2014:	12 96       	adiw	r26, 0x02	; 2
    2016:	2d 91       	ld	r18, X+
    2018:	3c 91       	ld	r19, X
    201a:	13 97       	sbiw	r26, 0x03	; 3
    201c:	82 81       	ldd	r24, Z+2	; 0x02
    201e:	93 81       	ldd	r25, Z+3	; 0x03
    2020:	82 17       	cp	r24, r18
    2022:	93 07       	cpc	r25, r19
    2024:	94 f0       	brlt	.+36     	; 0x204a <__fpcmp_parts_f+0x88>
    2026:	28 17       	cp	r18, r24
    2028:	39 07       	cpc	r19, r25
    202a:	bc f0       	brlt	.+46     	; 0x205a <__fpcmp_parts_f+0x98>
    202c:	14 96       	adiw	r26, 0x04	; 4
    202e:	8d 91       	ld	r24, X+
    2030:	9d 91       	ld	r25, X+
    2032:	0d 90       	ld	r0, X+
    2034:	bc 91       	ld	r27, X
    2036:	a0 2d       	mov	r26, r0
    2038:	24 81       	ldd	r18, Z+4	; 0x04
    203a:	35 81       	ldd	r19, Z+5	; 0x05
    203c:	46 81       	ldd	r20, Z+6	; 0x06
    203e:	57 81       	ldd	r21, Z+7	; 0x07
    2040:	28 17       	cp	r18, r24
    2042:	39 07       	cpc	r19, r25
    2044:	4a 07       	cpc	r20, r26
    2046:	5b 07       	cpc	r21, r27
    2048:	18 f4       	brcc	.+6      	; 0x2050 <__fpcmp_parts_f+0x8e>
    204a:	11 23       	and	r17, r17
    204c:	41 f0       	breq	.+16     	; 0x205e <__fpcmp_parts_f+0x9c>
    204e:	0a c0       	rjmp	.+20     	; 0x2064 <__fpcmp_parts_f+0xa2>
    2050:	82 17       	cp	r24, r18
    2052:	93 07       	cpc	r25, r19
    2054:	a4 07       	cpc	r26, r20
    2056:	b5 07       	cpc	r27, r21
    2058:	40 f4       	brcc	.+16     	; 0x206a <__fpcmp_parts_f+0xa8>
    205a:	11 23       	and	r17, r17
    205c:	19 f0       	breq	.+6      	; 0x2064 <__fpcmp_parts_f+0xa2>
    205e:	61 e0       	ldi	r22, 0x01	; 1
    2060:	70 e0       	ldi	r23, 0x00	; 0
    2062:	05 c0       	rjmp	.+10     	; 0x206e <__fpcmp_parts_f+0xac>
    2064:	6f ef       	ldi	r22, 0xFF	; 255
    2066:	7f ef       	ldi	r23, 0xFF	; 255
    2068:	02 c0       	rjmp	.+4      	; 0x206e <__fpcmp_parts_f+0xac>
    206a:	60 e0       	ldi	r22, 0x00	; 0
    206c:	70 e0       	ldi	r23, 0x00	; 0
    206e:	cb 01       	movw	r24, r22
    2070:	1f 91       	pop	r17
    2072:	08 95       	ret

00002074 <get_Ubbr_Value>:
 *				passed to it into a real ubrrValue that is ready
 *				to be set inside the ubrr register to get the right
 *				baudRate.
 */
static uint16 get_Ubbr_Value(uint32 baud,uint8 flag)
{
    2074:	df 93       	push	r29
    2076:	cf 93       	push	r28
    2078:	cd b7       	in	r28, 0x3d	; 61
    207a:	de b7       	in	r29, 0x3e	; 62
    207c:	29 97       	sbiw	r28, 0x09	; 9
    207e:	0f b6       	in	r0, 0x3f	; 63
    2080:	f8 94       	cli
    2082:	de bf       	out	0x3e, r29	; 62
    2084:	0f be       	out	0x3f, r0	; 63
    2086:	cd bf       	out	0x3d, r28	; 61
    2088:	6b 83       	std	Y+3, r22	; 0x03
    208a:	7c 83       	std	Y+4, r23	; 0x04
    208c:	8d 83       	std	Y+5, r24	; 0x05
    208e:	9e 83       	std	Y+6, r25	; 0x06
    2090:	4f 83       	std	Y+7, r20	; 0x07
	uint16 ubrrValue = 0;
    2092:	1a 82       	std	Y+2, r1	; 0x02
    2094:	19 82       	std	Y+1, r1	; 0x01

	switch(flag)
    2096:	8f 81       	ldd	r24, Y+7	; 0x07
    2098:	28 2f       	mov	r18, r24
    209a:	30 e0       	ldi	r19, 0x00	; 0
    209c:	39 87       	std	Y+9, r19	; 0x09
    209e:	28 87       	std	Y+8, r18	; 0x08
    20a0:	88 85       	ldd	r24, Y+8	; 0x08
    20a2:	99 85       	ldd	r25, Y+9	; 0x09
    20a4:	81 30       	cpi	r24, 0x01	; 1
    20a6:	91 05       	cpc	r25, r1
    20a8:	79 f1       	breq	.+94     	; 0x2108 <get_Ubbr_Value+0x94>
    20aa:	28 85       	ldd	r18, Y+8	; 0x08
    20ac:	39 85       	ldd	r19, Y+9	; 0x09
    20ae:	22 30       	cpi	r18, 0x02	; 2
    20b0:	31 05       	cpc	r19, r1
    20b2:	09 f4       	brne	.+2      	; 0x20b6 <get_Ubbr_Value+0x42>
    20b4:	49 c0       	rjmp	.+146    	; 0x2148 <get_Ubbr_Value+0xd4>
    20b6:	88 85       	ldd	r24, Y+8	; 0x08
    20b8:	99 85       	ldd	r25, Y+9	; 0x09
    20ba:	00 97       	sbiw	r24, 0x00	; 0
    20bc:	09 f0       	breq	.+2      	; 0x20c0 <get_Ubbr_Value+0x4c>
    20be:	5c c0       	rjmp	.+184    	; 0x2178 <get_Ubbr_Value+0x104>
	{
	case 0:
		ubrrValue = ((uint32)FOSC/(16*baud))-1;
    20c0:	8b 81       	ldd	r24, Y+3	; 0x03
    20c2:	9c 81       	ldd	r25, Y+4	; 0x04
    20c4:	ad 81       	ldd	r26, Y+5	; 0x05
    20c6:	be 81       	ldd	r27, Y+6	; 0x06
    20c8:	88 0f       	add	r24, r24
    20ca:	99 1f       	adc	r25, r25
    20cc:	aa 1f       	adc	r26, r26
    20ce:	bb 1f       	adc	r27, r27
    20d0:	88 0f       	add	r24, r24
    20d2:	99 1f       	adc	r25, r25
    20d4:	aa 1f       	adc	r26, r26
    20d6:	bb 1f       	adc	r27, r27
    20d8:	88 0f       	add	r24, r24
    20da:	99 1f       	adc	r25, r25
    20dc:	aa 1f       	adc	r26, r26
    20de:	bb 1f       	adc	r27, r27
    20e0:	88 0f       	add	r24, r24
    20e2:	99 1f       	adc	r25, r25
    20e4:	aa 1f       	adc	r26, r26
    20e6:	bb 1f       	adc	r27, r27
    20e8:	9c 01       	movw	r18, r24
    20ea:	ad 01       	movw	r20, r26
    20ec:	80 e0       	ldi	r24, 0x00	; 0
    20ee:	94 e2       	ldi	r25, 0x24	; 36
    20f0:	a4 ef       	ldi	r26, 0xF4	; 244
    20f2:	b0 e0       	ldi	r27, 0x00	; 0
    20f4:	bc 01       	movw	r22, r24
    20f6:	cd 01       	movw	r24, r26
    20f8:	0e 94 67 3b 	call	0x76ce	; 0x76ce <__udivmodsi4>
    20fc:	da 01       	movw	r26, r20
    20fe:	c9 01       	movw	r24, r18
    2100:	01 97       	sbiw	r24, 0x01	; 1
    2102:	9a 83       	std	Y+2, r25	; 0x02
    2104:	89 83       	std	Y+1, r24	; 0x01
    2106:	3c c0       	rjmp	.+120    	; 0x2180 <get_Ubbr_Value+0x10c>
		break;
	case 1:
		ubrrValue = ((uint32)FOSC/(8*baud))-1;
    2108:	8b 81       	ldd	r24, Y+3	; 0x03
    210a:	9c 81       	ldd	r25, Y+4	; 0x04
    210c:	ad 81       	ldd	r26, Y+5	; 0x05
    210e:	be 81       	ldd	r27, Y+6	; 0x06
    2110:	88 0f       	add	r24, r24
    2112:	99 1f       	adc	r25, r25
    2114:	aa 1f       	adc	r26, r26
    2116:	bb 1f       	adc	r27, r27
    2118:	88 0f       	add	r24, r24
    211a:	99 1f       	adc	r25, r25
    211c:	aa 1f       	adc	r26, r26
    211e:	bb 1f       	adc	r27, r27
    2120:	88 0f       	add	r24, r24
    2122:	99 1f       	adc	r25, r25
    2124:	aa 1f       	adc	r26, r26
    2126:	bb 1f       	adc	r27, r27
    2128:	9c 01       	movw	r18, r24
    212a:	ad 01       	movw	r20, r26
    212c:	80 e0       	ldi	r24, 0x00	; 0
    212e:	94 e2       	ldi	r25, 0x24	; 36
    2130:	a4 ef       	ldi	r26, 0xF4	; 244
    2132:	b0 e0       	ldi	r27, 0x00	; 0
    2134:	bc 01       	movw	r22, r24
    2136:	cd 01       	movw	r24, r26
    2138:	0e 94 67 3b 	call	0x76ce	; 0x76ce <__udivmodsi4>
    213c:	da 01       	movw	r26, r20
    213e:	c9 01       	movw	r24, r18
    2140:	01 97       	sbiw	r24, 0x01	; 1
    2142:	9a 83       	std	Y+2, r25	; 0x02
    2144:	89 83       	std	Y+1, r24	; 0x01
    2146:	1c c0       	rjmp	.+56     	; 0x2180 <get_Ubbr_Value+0x10c>
		break;
	case 2:
		ubrrValue = ((uint32)FOSC/(2*baud))-1;
    2148:	8b 81       	ldd	r24, Y+3	; 0x03
    214a:	9c 81       	ldd	r25, Y+4	; 0x04
    214c:	ad 81       	ldd	r26, Y+5	; 0x05
    214e:	be 81       	ldd	r27, Y+6	; 0x06
    2150:	9c 01       	movw	r18, r24
    2152:	ad 01       	movw	r20, r26
    2154:	22 0f       	add	r18, r18
    2156:	33 1f       	adc	r19, r19
    2158:	44 1f       	adc	r20, r20
    215a:	55 1f       	adc	r21, r21
    215c:	80 e0       	ldi	r24, 0x00	; 0
    215e:	94 e2       	ldi	r25, 0x24	; 36
    2160:	a4 ef       	ldi	r26, 0xF4	; 244
    2162:	b0 e0       	ldi	r27, 0x00	; 0
    2164:	bc 01       	movw	r22, r24
    2166:	cd 01       	movw	r24, r26
    2168:	0e 94 67 3b 	call	0x76ce	; 0x76ce <__udivmodsi4>
    216c:	da 01       	movw	r26, r20
    216e:	c9 01       	movw	r24, r18
    2170:	01 97       	sbiw	r24, 0x01	; 1
    2172:	9a 83       	std	Y+2, r25	; 0x02
    2174:	89 83       	std	Y+1, r24	; 0x01
    2176:	04 c0       	rjmp	.+8      	; 0x2180 <get_Ubbr_Value+0x10c>
		break;
	default:
		ubrrValue = 51;
    2178:	83 e3       	ldi	r24, 0x33	; 51
    217a:	90 e0       	ldi	r25, 0x00	; 0
    217c:	9a 83       	std	Y+2, r25	; 0x02
    217e:	89 83       	std	Y+1, r24	; 0x01
		break;
	}



	return ubrrValue;
    2180:	89 81       	ldd	r24, Y+1	; 0x01
    2182:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2184:	29 96       	adiw	r28, 0x09	; 9
    2186:	0f b6       	in	r0, 0x3f	; 63
    2188:	f8 94       	cli
    218a:	de bf       	out	0x3e, r29	; 62
    218c:	0f be       	out	0x3f, r0	; 63
    218e:	cd bf       	out	0x3d, r28	; 61
    2190:	cf 91       	pop	r28
    2192:	df 91       	pop	r29
    2194:	08 95       	ret

00002196 <usart_Init>:
 *				it sets the mode of usart module
 *
 */

void usart_Init(void)
{
    2196:	df 93       	push	r29
    2198:	cf 93       	push	r28
    219a:	00 d0       	rcall	.+0      	; 0x219c <usart_Init+0x6>
    219c:	00 d0       	rcall	.+0      	; 0x219e <usart_Init+0x8>
    219e:	cd b7       	in	r28, 0x3d	; 61
    21a0:	de b7       	in	r29, 0x3e	; 62

	uint8 UCSRC_Cfg = (1<<UCSRC_URSEL);
    21a2:	80 e8       	ldi	r24, 0x80	; 128
    21a4:	8c 83       	std	Y+4, r24	; 0x04
	uint8 asyncDoubleSpeed = 0;
    21a6:	1b 82       	std	Y+3, r1	; 0x03
	SET_BIT(USART_UCSRB,UCSRB_RXEN);
#elif USART_CFG_MODE == USART_TRANSMITTER_CFG
	SET_BIT(USART_UCSRB,UCSRB_TXEN);

#elif USART_CFG_MODE == USART_RECEIVER_TRANSMITTER_CFG
	SET_BIT(USART_UCSRB,UCSRB_RXEN);
    21a8:	aa e2       	ldi	r26, 0x2A	; 42
    21aa:	b0 e0       	ldi	r27, 0x00	; 0
    21ac:	ea e2       	ldi	r30, 0x2A	; 42
    21ae:	f0 e0       	ldi	r31, 0x00	; 0
    21b0:	80 81       	ld	r24, Z
    21b2:	80 61       	ori	r24, 0x10	; 16
    21b4:	8c 93       	st	X, r24
	SET_BIT(USART_UCSRB,UCSRB_TXEN);
    21b6:	aa e2       	ldi	r26, 0x2A	; 42
    21b8:	b0 e0       	ldi	r27, 0x00	; 0
    21ba:	ea e2       	ldi	r30, 0x2A	; 42
    21bc:	f0 e0       	ldi	r31, 0x00	; 0
    21be:	80 81       	ld	r24, Z
    21c0:	88 60       	ori	r24, 0x08	; 8
    21c2:	8c 93       	st	X, r24
#endif



#if USART_MODE == USART_ASYNCHRONOUS_MODE
	CLEAR_BIT(UCSRC_Cfg,UCSRC_UMSEL);
    21c4:	8c 81       	ldd	r24, Y+4	; 0x04
    21c6:	8f 7b       	andi	r24, 0xBF	; 191
    21c8:	8c 83       	std	Y+4, r24	; 0x04
	asyncDoubleSpeed = 0;
    21ca:	1b 82       	std	Y+3, r1	; 0x03




#if USART_PARITY == USART_PARITY_DISABLED
	CLEAR_BIT(UCSRC_Cfg,UCSRC_UPM0);
    21cc:	8c 81       	ldd	r24, Y+4	; 0x04
    21ce:	8f 7e       	andi	r24, 0xEF	; 239
    21d0:	8c 83       	std	Y+4, r24	; 0x04
	CLEAR_BIT(UCSRC_Cfg,UCSRC_UPM1);
    21d2:	8c 81       	ldd	r24, Y+4	; 0x04
    21d4:	8f 7d       	andi	r24, 0xDF	; 223
    21d6:	8c 83       	std	Y+4, r24	; 0x04
	SET_BIT(UCSRC_Cfg,UCSRC_UPM1);
#else
#endif

#if USART_STOP_BITS == USART_1BIT_STOP
	CLEAR_BIT(UCSRC_Cfg,UCSRC_USBS);
    21d8:	8c 81       	ldd	r24, Y+4	; 0x04
    21da:	87 7f       	andi	r24, 0xF7	; 247
    21dc:	8c 83       	std	Y+4, r24	; 0x04
#else
#endif


#if USART_DATA_FRAME_BITS == USART_8BIT_DATA
	SET_BIT(UCSRC_Cfg,UCSRC_UCSZ0);
    21de:	8c 81       	ldd	r24, Y+4	; 0x04
    21e0:	82 60       	ori	r24, 0x02	; 2
    21e2:	8c 83       	std	Y+4, r24	; 0x04
	SET_BIT(UCSRC_Cfg,UCSRC_UCSZ1);
    21e4:	8c 81       	ldd	r24, Y+4	; 0x04
    21e6:	84 60       	ori	r24, 0x04	; 4
    21e8:	8c 83       	std	Y+4, r24	; 0x04
	CLEAR_BIT(USART_UCSRB,UCSRB_UCSZ2);
    21ea:	aa e2       	ldi	r26, 0x2A	; 42
    21ec:	b0 e0       	ldi	r27, 0x00	; 0
    21ee:	ea e2       	ldi	r30, 0x2A	; 42
    21f0:	f0 e0       	ldi	r31, 0x00	; 0
    21f2:	80 81       	ld	r24, Z
    21f4:	8b 7f       	andi	r24, 0xFB	; 251
    21f6:	8c 93       	st	X, r24
	bitNinthFlag = 1;
#else
#endif

#if USART_POLARITY == USART_RTRANSMIT_FRECEIVE
	CLEAR_BIT(UCSRC_Cfg,UCSRC_UCPOL);
    21f8:	8c 81       	ldd	r24, Y+4	; 0x04
    21fa:	8e 7f       	andi	r24, 0xFE	; 254
    21fc:	8c 83       	std	Y+4, r24	; 0x04
#endif




	USART_UCSRC = UCSRC_Cfg;
    21fe:	e0 e4       	ldi	r30, 0x40	; 64
    2200:	f0 e0       	ldi	r31, 0x00	; 0
    2202:	8c 81       	ldd	r24, Y+4	; 0x04
    2204:	80 83       	st	Z, r24
	ubrrValue = get_Ubbr_Value(USART_BAUDRATE,asyncDoubleSpeed);
    2206:	60 e8       	ldi	r22, 0x80	; 128
    2208:	75 e2       	ldi	r23, 0x25	; 37
    220a:	80 e0       	ldi	r24, 0x00	; 0
    220c:	90 e0       	ldi	r25, 0x00	; 0
    220e:	4b 81       	ldd	r20, Y+3	; 0x03
    2210:	0e 94 3a 10 	call	0x2074	; 0x2074 <get_Ubbr_Value>
    2214:	9a 83       	std	Y+2, r25	; 0x02
    2216:	89 83       	std	Y+1, r24	; 0x01
	USART_UBRRH = (ubrrValue>>8);
    2218:	e0 e4       	ldi	r30, 0x40	; 64
    221a:	f0 e0       	ldi	r31, 0x00	; 0
    221c:	89 81       	ldd	r24, Y+1	; 0x01
    221e:	9a 81       	ldd	r25, Y+2	; 0x02
    2220:	89 2f       	mov	r24, r25
    2222:	99 27       	eor	r25, r25
    2224:	80 83       	st	Z, r24
	USART_UBRRL = (ubrrValue);
    2226:	e9 e2       	ldi	r30, 0x29	; 41
    2228:	f0 e0       	ldi	r31, 0x00	; 0
    222a:	89 81       	ldd	r24, Y+1	; 0x01
    222c:	80 83       	st	Z, r24

#endif

	return ;

}
    222e:	0f 90       	pop	r0
    2230:	0f 90       	pop	r0
    2232:	0f 90       	pop	r0
    2234:	0f 90       	pop	r0
    2236:	cf 91       	pop	r28
    2238:	df 91       	pop	r29
    223a:	08 95       	ret

0000223c <usartSendPolling>:
 *				it sets the mode of usart module
 *
 */

void usartSendPolling(uint16 value)
{
    223c:	df 93       	push	r29
    223e:	cf 93       	push	r28
    2240:	00 d0       	rcall	.+0      	; 0x2242 <usartSendPolling+0x6>
    2242:	cd b7       	in	r28, 0x3d	; 61
    2244:	de b7       	in	r29, 0x3e	; 62
    2246:	9a 83       	std	Y+2, r25	; 0x02
    2248:	89 83       	std	Y+1, r24	; 0x01


	if(bitNinthFlag)
    224a:	80 91 af 01 	lds	r24, 0x01AF
    224e:	88 23       	and	r24, r24
    2250:	a9 f0       	breq	.+42     	; 0x227c <usartSendPolling+0x40>
	{
		if(value>>8)
    2252:	89 81       	ldd	r24, Y+1	; 0x01
    2254:	9a 81       	ldd	r25, Y+2	; 0x02
    2256:	89 2f       	mov	r24, r25
    2258:	99 27       	eor	r25, r25
    225a:	00 97       	sbiw	r24, 0x00	; 0
    225c:	41 f0       	breq	.+16     	; 0x226e <usartSendPolling+0x32>
		{
			SET_BIT(USART_UCSRB,UCSRB_TXB8);
    225e:	aa e2       	ldi	r26, 0x2A	; 42
    2260:	b0 e0       	ldi	r27, 0x00	; 0
    2262:	ea e2       	ldi	r30, 0x2A	; 42
    2264:	f0 e0       	ldi	r31, 0x00	; 0
    2266:	80 81       	ld	r24, Z
    2268:	81 60       	ori	r24, 0x01	; 1
    226a:	8c 93       	st	X, r24
    226c:	07 c0       	rjmp	.+14     	; 0x227c <usartSendPolling+0x40>
		}
		else
		{
			CLEAR_BIT(USART_UCSRB,UCSRB_TXB8);
    226e:	aa e2       	ldi	r26, 0x2A	; 42
    2270:	b0 e0       	ldi	r27, 0x00	; 0
    2272:	ea e2       	ldi	r30, 0x2A	; 42
    2274:	f0 e0       	ldi	r31, 0x00	; 0
    2276:	80 81       	ld	r24, Z
    2278:	8e 7f       	andi	r24, 0xFE	; 254
    227a:	8c 93       	st	X, r24
	}




	while(!(USART_UCSRA & (1<<UCSRA_UDRE)));
    227c:	eb e2       	ldi	r30, 0x2B	; 43
    227e:	f0 e0       	ldi	r31, 0x00	; 0
    2280:	80 81       	ld	r24, Z
    2282:	88 2f       	mov	r24, r24
    2284:	90 e0       	ldi	r25, 0x00	; 0
    2286:	80 72       	andi	r24, 0x20	; 32
    2288:	90 70       	andi	r25, 0x00	; 0
    228a:	00 97       	sbiw	r24, 0x00	; 0
    228c:	b9 f3       	breq	.-18     	; 0x227c <usartSendPolling+0x40>


	USART_UDR  = value;
    228e:	ec e2       	ldi	r30, 0x2C	; 44
    2290:	f0 e0       	ldi	r31, 0x00	; 0
    2292:	89 81       	ldd	r24, Y+1	; 0x01
    2294:	80 83       	st	Z, r24

	return;

}
    2296:	0f 90       	pop	r0
    2298:	0f 90       	pop	r0
    229a:	cf 91       	pop	r28
    229c:	df 91       	pop	r29
    229e:	08 95       	ret

000022a0 <getDataPolling>:
 *				of the register udr as a returned from function.
 *
 */

uint16 getDataPolling(void)
{
    22a0:	df 93       	push	r29
    22a2:	cf 93       	push	r28
    22a4:	00 d0       	rcall	.+0      	; 0x22a6 <getDataPolling+0x6>
    22a6:	cd b7       	in	r28, 0x3d	; 61
    22a8:	de b7       	in	r29, 0x3e	; 62

	uint16 data ;

	while(!(USART_UCSRA&(1<<UCSRA_RXC)));
    22aa:	eb e2       	ldi	r30, 0x2B	; 43
    22ac:	f0 e0       	ldi	r31, 0x00	; 0
    22ae:	80 81       	ld	r24, Z
    22b0:	88 23       	and	r24, r24
    22b2:	dc f7       	brge	.-10     	; 0x22aa <getDataPolling+0xa>
//	if(bitNinthFlag)
//	{
//		bitNinthFlag = GET_BIT(USART_UCSRB,UCSRB_RXB8);
//	}

	data = USART_UDR;
    22b4:	ec e2       	ldi	r30, 0x2C	; 44
    22b6:	f0 e0       	ldi	r31, 0x00	; 0
    22b8:	80 81       	ld	r24, Z
    22ba:	88 2f       	mov	r24, r24
    22bc:	90 e0       	ldi	r25, 0x00	; 0
    22be:	9a 83       	std	Y+2, r25	; 0x02
    22c0:	89 83       	std	Y+1, r24	; 0x01

//	if(bitNinthFlag)
//	{
//		data |= (1<<8);
//	}
	return data;
    22c2:	89 81       	ldd	r24, Y+1	; 0x01
    22c4:	9a 81       	ldd	r25, Y+2	; 0x02

}
    22c6:	0f 90       	pop	r0
    22c8:	0f 90       	pop	r0
    22ca:	cf 91       	pop	r28
    22cc:	df 91       	pop	r29
    22ce:	08 95       	ret

000022d0 <setRecieveCallBack>:




void setRecieveCallBack(void (*ptf)(void))
{
    22d0:	df 93       	push	r29
    22d2:	cf 93       	push	r28
    22d4:	00 d0       	rcall	.+0      	; 0x22d6 <setRecieveCallBack+0x6>
    22d6:	cd b7       	in	r28, 0x3d	; 61
    22d8:	de b7       	in	r29, 0x3e	; 62
    22da:	9a 83       	std	Y+2, r25	; 0x02
    22dc:	89 83       	std	Y+1, r24	; 0x01
	cbs.rxCallBack = ptf;
    22de:	89 81       	ldd	r24, Y+1	; 0x01
    22e0:	9a 81       	ldd	r25, Y+2	; 0x02
    22e2:	90 93 b3 01 	sts	0x01B3, r25
    22e6:	80 93 b2 01 	sts	0x01B2, r24
}
    22ea:	0f 90       	pop	r0
    22ec:	0f 90       	pop	r0
    22ee:	cf 91       	pop	r28
    22f0:	df 91       	pop	r29
    22f2:	08 95       	ret

000022f4 <setTransmitCallBack>:

void setTransmitCallBack(void (*ptf)(void))
{
    22f4:	df 93       	push	r29
    22f6:	cf 93       	push	r28
    22f8:	00 d0       	rcall	.+0      	; 0x22fa <setTransmitCallBack+0x6>
    22fa:	cd b7       	in	r28, 0x3d	; 61
    22fc:	de b7       	in	r29, 0x3e	; 62
    22fe:	9a 83       	std	Y+2, r25	; 0x02
    2300:	89 83       	std	Y+1, r24	; 0x01
	cbs.txCallBack = ptf;
    2302:	89 81       	ldd	r24, Y+1	; 0x01
    2304:	9a 81       	ldd	r25, Y+2	; 0x02
    2306:	90 93 b1 01 	sts	0x01B1, r25
    230a:	80 93 b0 01 	sts	0x01B0, r24
}
    230e:	0f 90       	pop	r0
    2310:	0f 90       	pop	r0
    2312:	cf 91       	pop	r28
    2314:	df 91       	pop	r29
    2316:	08 95       	ret

00002318 <setUdrCallBack>:

void setUdrCallBack(void (*ptf)(void))
{
    2318:	df 93       	push	r29
    231a:	cf 93       	push	r28
    231c:	00 d0       	rcall	.+0      	; 0x231e <setUdrCallBack+0x6>
    231e:	cd b7       	in	r28, 0x3d	; 61
    2320:	de b7       	in	r29, 0x3e	; 62
    2322:	9a 83       	std	Y+2, r25	; 0x02
    2324:	89 83       	std	Y+1, r24	; 0x01
	cbs.udrCallBack = ptf;
    2326:	89 81       	ldd	r24, Y+1	; 0x01
    2328:	9a 81       	ldd	r25, Y+2	; 0x02
    232a:	90 93 b5 01 	sts	0x01B5, r25
    232e:	80 93 b4 01 	sts	0x01B4, r24
}
    2332:	0f 90       	pop	r0
    2334:	0f 90       	pop	r0
    2336:	cf 91       	pop	r28
    2338:	df 91       	pop	r29
    233a:	08 95       	ret

0000233c <getTransmittedData>:



uint8 getTransmittedData(void)
{
    233c:	df 93       	push	r29
    233e:	cf 93       	push	r28
    2340:	cd b7       	in	r28, 0x3d	; 61
    2342:	de b7       	in	r29, 0x3e	; 62
	return receivedValue;
    2344:	80 91 ae 01 	lds	r24, 0x01AE
}
    2348:	cf 91       	pop	r28
    234a:	df 91       	pop	r29
    234c:	08 95       	ret

0000234e <__vector_15>:
 * you need to set the value to be transmitted using the usartSetTValue
 * in order for that function to fire properly.
 *
 */
USART_TXC_Handler()
{
    234e:	1f 92       	push	r1
    2350:	0f 92       	push	r0
    2352:	0f b6       	in	r0, 0x3f	; 63
    2354:	0f 92       	push	r0
    2356:	11 24       	eor	r1, r1
    2358:	2f 93       	push	r18
    235a:	3f 93       	push	r19
    235c:	4f 93       	push	r20
    235e:	5f 93       	push	r21
    2360:	6f 93       	push	r22
    2362:	7f 93       	push	r23
    2364:	8f 93       	push	r24
    2366:	9f 93       	push	r25
    2368:	af 93       	push	r26
    236a:	bf 93       	push	r27
    236c:	ef 93       	push	r30
    236e:	ff 93       	push	r31
    2370:	df 93       	push	r29
    2372:	cf 93       	push	r28
    2374:	cd b7       	in	r28, 0x3d	; 61
    2376:	de b7       	in	r29, 0x3e	; 62
	if(cbs.txCallBack != NULL)
    2378:	80 91 b0 01 	lds	r24, 0x01B0
    237c:	90 91 b1 01 	lds	r25, 0x01B1
    2380:	00 97       	sbiw	r24, 0x00	; 0
    2382:	29 f0       	breq	.+10     	; 0x238e <__vector_15+0x40>
	{
		cbs.txCallBack();
    2384:	e0 91 b0 01 	lds	r30, 0x01B0
    2388:	f0 91 b1 01 	lds	r31, 0x01B1
    238c:	09 95       	icall
	else
	{


	}
	if(bitNinthFlag)
    238e:	80 91 af 01 	lds	r24, 0x01AF
    2392:	88 23       	and	r24, r24
    2394:	b9 f0       	breq	.+46     	; 0x23c4 <__vector_15+0x76>
	{
		if(dataToBeSent>>8)
    2396:	80 91 b6 01 	lds	r24, 0x01B6
    239a:	90 91 b7 01 	lds	r25, 0x01B7
    239e:	89 2f       	mov	r24, r25
    23a0:	99 27       	eor	r25, r25
    23a2:	00 97       	sbiw	r24, 0x00	; 0
    23a4:	41 f0       	breq	.+16     	; 0x23b6 <__vector_15+0x68>
		{
			SET_BIT(USART_UCSRB,UCSRB_TXB8);
    23a6:	aa e2       	ldi	r26, 0x2A	; 42
    23a8:	b0 e0       	ldi	r27, 0x00	; 0
    23aa:	ea e2       	ldi	r30, 0x2A	; 42
    23ac:	f0 e0       	ldi	r31, 0x00	; 0
    23ae:	80 81       	ld	r24, Z
    23b0:	81 60       	ori	r24, 0x01	; 1
    23b2:	8c 93       	st	X, r24
    23b4:	07 c0       	rjmp	.+14     	; 0x23c4 <__vector_15+0x76>
		}
		else
		{
			CLEAR_BIT(USART_UCSRB,UCSRB_TXB8);
    23b6:	aa e2       	ldi	r26, 0x2A	; 42
    23b8:	b0 e0       	ldi	r27, 0x00	; 0
    23ba:	ea e2       	ldi	r30, 0x2A	; 42
    23bc:	f0 e0       	ldi	r31, 0x00	; 0
    23be:	80 81       	ld	r24, Z
    23c0:	8e 7f       	andi	r24, 0xFE	; 254
    23c2:	8c 93       	st	X, r24
		}
	}
	USART_UDR  = dataToBeSent;
    23c4:	ec e2       	ldi	r30, 0x2C	; 44
    23c6:	f0 e0       	ldi	r31, 0x00	; 0
    23c8:	80 91 b6 01 	lds	r24, 0x01B6
    23cc:	90 91 b7 01 	lds	r25, 0x01B7
    23d0:	80 83       	st	Z, r24


}
    23d2:	cf 91       	pop	r28
    23d4:	df 91       	pop	r29
    23d6:	ff 91       	pop	r31
    23d8:	ef 91       	pop	r30
    23da:	bf 91       	pop	r27
    23dc:	af 91       	pop	r26
    23de:	9f 91       	pop	r25
    23e0:	8f 91       	pop	r24
    23e2:	7f 91       	pop	r23
    23e4:	6f 91       	pop	r22
    23e6:	5f 91       	pop	r21
    23e8:	4f 91       	pop	r20
    23ea:	3f 91       	pop	r19
    23ec:	2f 91       	pop	r18
    23ee:	0f 90       	pop	r0
    23f0:	0f be       	out	0x3f, r0	; 63
    23f2:	0f 90       	pop	r0
    23f4:	1f 90       	pop	r1
    23f6:	18 95       	reti

000023f8 <__vector_13>:


USART_RXC_Handler()
{
    23f8:	1f 92       	push	r1
    23fa:	0f 92       	push	r0
    23fc:	0f b6       	in	r0, 0x3f	; 63
    23fe:	0f 92       	push	r0
    2400:	11 24       	eor	r1, r1
    2402:	2f 93       	push	r18
    2404:	3f 93       	push	r19
    2406:	4f 93       	push	r20
    2408:	5f 93       	push	r21
    240a:	6f 93       	push	r22
    240c:	7f 93       	push	r23
    240e:	8f 93       	push	r24
    2410:	9f 93       	push	r25
    2412:	af 93       	push	r26
    2414:	bf 93       	push	r27
    2416:	ef 93       	push	r30
    2418:	ff 93       	push	r31
    241a:	df 93       	push	r29
    241c:	cf 93       	push	r28
    241e:	cd b7       	in	r28, 0x3d	; 61
    2420:	de b7       	in	r29, 0x3e	; 62
	if(bitNinthFlag)
    2422:	80 91 af 01 	lds	r24, 0x01AF
    2426:	88 23       	and	r24, r24
    2428:	39 f0       	breq	.+14     	; 0x2438 <__vector_13+0x40>
	{
		bitNinthFlag = GET_BIT(USART_UCSRB,UCSRB_RXB8);
    242a:	ea e2       	ldi	r30, 0x2A	; 42
    242c:	f0 e0       	ldi	r31, 0x00	; 0
    242e:	80 81       	ld	r24, Z
    2430:	86 95       	lsr	r24
    2432:	81 70       	andi	r24, 0x01	; 1
    2434:	80 93 af 01 	sts	0x01AF, r24
	}

	receivedValue = USART_UDR;
    2438:	ec e2       	ldi	r30, 0x2C	; 44
    243a:	f0 e0       	ldi	r31, 0x00	; 0
    243c:	80 81       	ld	r24, Z
    243e:	80 93 ae 01 	sts	0x01AE, r24
	if(bitNinthFlag)
    2442:	80 91 af 01 	lds	r24, 0x01AF
    2446:	88 23       	and	r24, r24
    2448:	21 f0       	breq	.+8      	; 0x2452 <__vector_13+0x5a>
	{
		receivedValue |= (1<<8);
    244a:	80 91 ae 01 	lds	r24, 0x01AE
    244e:	80 93 ae 01 	sts	0x01AE, r24
	}
	USART_UDR = receivedValue;
    2452:	ec e2       	ldi	r30, 0x2C	; 44
    2454:	f0 e0       	ldi	r31, 0x00	; 0
    2456:	80 91 ae 01 	lds	r24, 0x01AE
    245a:	80 83       	st	Z, r24
	AVEManipulateLeds(HIGH);
    245c:	81 e0       	ldi	r24, 0x01	; 1
    245e:	0e 94 6c 34 	call	0x68d8	; 0x68d8 <AVEManipulateLeds>
	if(cbs.rxCallBack!=NULL)
    2462:	80 91 b2 01 	lds	r24, 0x01B2
    2466:	90 91 b3 01 	lds	r25, 0x01B3
    246a:	00 97       	sbiw	r24, 0x00	; 0
    246c:	29 f0       	breq	.+10     	; 0x2478 <__vector_13+0x80>
	{
		cbs.rxCallBack();
    246e:	e0 91 b2 01 	lds	r30, 0x01B2
    2472:	f0 91 b3 01 	lds	r31, 0x01B3
    2476:	09 95       	icall
	   else
	   {
		   //AVEManipulateLed(BIT6,PORTB,LED_OFF);
	   }
#endif
}
    2478:	cf 91       	pop	r28
    247a:	df 91       	pop	r29
    247c:	ff 91       	pop	r31
    247e:	ef 91       	pop	r30
    2480:	bf 91       	pop	r27
    2482:	af 91       	pop	r26
    2484:	9f 91       	pop	r25
    2486:	8f 91       	pop	r24
    2488:	7f 91       	pop	r23
    248a:	6f 91       	pop	r22
    248c:	5f 91       	pop	r21
    248e:	4f 91       	pop	r20
    2490:	3f 91       	pop	r19
    2492:	2f 91       	pop	r18
    2494:	0f 90       	pop	r0
    2496:	0f be       	out	0x3f, r0	; 63
    2498:	0f 90       	pop	r0
    249a:	1f 90       	pop	r1
    249c:	18 95       	reti

0000249e <AVE_timer1SetAny>:




static void AVE_timer1SetAny(uint16 value,uint8 registerToBeSet)
{
    249e:	df 93       	push	r29
    24a0:	cf 93       	push	r28
    24a2:	00 d0       	rcall	.+0      	; 0x24a4 <AVE_timer1SetAny+0x6>
    24a4:	00 d0       	rcall	.+0      	; 0x24a6 <AVE_timer1SetAny+0x8>
    24a6:	0f 92       	push	r0
    24a8:	cd b7       	in	r28, 0x3d	; 61
    24aa:	de b7       	in	r29, 0x3e	; 62
    24ac:	9a 83       	std	Y+2, r25	; 0x02
    24ae:	89 83       	std	Y+1, r24	; 0x01
    24b0:	6b 83       	std	Y+3, r22	; 0x03


	switch(registerToBeSet)
    24b2:	8b 81       	ldd	r24, Y+3	; 0x03
    24b4:	28 2f       	mov	r18, r24
    24b6:	30 e0       	ldi	r19, 0x00	; 0
    24b8:	3d 83       	std	Y+5, r19	; 0x05
    24ba:	2c 83       	std	Y+4, r18	; 0x04
    24bc:	8c 81       	ldd	r24, Y+4	; 0x04
    24be:	9d 81       	ldd	r25, Y+5	; 0x05
    24c0:	00 97       	sbiw	r24, 0x00	; 0
    24c2:	31 f0       	breq	.+12     	; 0x24d0 <AVE_timer1SetAny+0x32>
    24c4:	2c 81       	ldd	r18, Y+4	; 0x04
    24c6:	3d 81       	ldd	r19, Y+5	; 0x05
    24c8:	21 30       	cpi	r18, 0x01	; 1
    24ca:	31 05       	cpc	r19, r1
    24cc:	69 f0       	breq	.+26     	; 0x24e8 <AVE_timer1SetAny+0x4a>
    24ce:	17 c0       	rjmp	.+46     	; 0x24fe <AVE_timer1SetAny+0x60>
	{


	case SET_OCR1A :
		TIMER1_OCR1AH = (uint8)(value>>8);
    24d0:	eb e4       	ldi	r30, 0x4B	; 75
    24d2:	f0 e0       	ldi	r31, 0x00	; 0
    24d4:	89 81       	ldd	r24, Y+1	; 0x01
    24d6:	9a 81       	ldd	r25, Y+2	; 0x02
    24d8:	89 2f       	mov	r24, r25
    24da:	99 27       	eor	r25, r25
    24dc:	80 83       	st	Z, r24
		TIMER1_OCR1AL = (uint8)(value);
    24de:	ea e4       	ldi	r30, 0x4A	; 74
    24e0:	f0 e0       	ldi	r31, 0x00	; 0
    24e2:	89 81       	ldd	r24, Y+1	; 0x01
    24e4:	80 83       	st	Z, r24
    24e6:	0b c0       	rjmp	.+22     	; 0x24fe <AVE_timer1SetAny+0x60>
		break;
	case SET_ICR1A:
		TIMER1_ICR1H = (uint8)(value>>8);
    24e8:	e7 e4       	ldi	r30, 0x47	; 71
    24ea:	f0 e0       	ldi	r31, 0x00	; 0
    24ec:	89 81       	ldd	r24, Y+1	; 0x01
    24ee:	9a 81       	ldd	r25, Y+2	; 0x02
    24f0:	89 2f       	mov	r24, r25
    24f2:	99 27       	eor	r25, r25
    24f4:	80 83       	st	Z, r24
		TIMER1_ICR1L = (uint8)(value);
    24f6:	e6 e4       	ldi	r30, 0x46	; 70
    24f8:	f0 e0       	ldi	r31, 0x00	; 0
    24fa:	89 81       	ldd	r24, Y+1	; 0x01
    24fc:	80 83       	st	Z, r24
		break;

	}


}
    24fe:	0f 90       	pop	r0
    2500:	0f 90       	pop	r0
    2502:	0f 90       	pop	r0
    2504:	0f 90       	pop	r0
    2506:	0f 90       	pop	r0
    2508:	cf 91       	pop	r28
    250a:	df 91       	pop	r29
    250c:	08 95       	ret

0000250e <AVE_TIMER0_setCallBackForInterrupt>:



 void AVE_TIMER0_setCallBackForInterrupt(void(*ptf)(void))
{
    250e:	df 93       	push	r29
    2510:	cf 93       	push	r28
    2512:	00 d0       	rcall	.+0      	; 0x2514 <AVE_TIMER0_setCallBackForInterrupt+0x6>
    2514:	cd b7       	in	r28, 0x3d	; 61
    2516:	de b7       	in	r29, 0x3e	; 62
    2518:	9a 83       	std	Y+2, r25	; 0x02
    251a:	89 83       	std	Y+1, r24	; 0x01

	TIMER0_ptOverFlowCallBackFunction=ptf;
    251c:	89 81       	ldd	r24, Y+1	; 0x01
    251e:	9a 81       	ldd	r25, Y+2	; 0x02
    2520:	90 93 be 01 	sts	0x01BE, r25
    2524:	80 93 bd 01 	sts	0x01BD, r24
	return;


}
    2528:	0f 90       	pop	r0
    252a:	0f 90       	pop	r0
    252c:	cf 91       	pop	r28
    252e:	df 91       	pop	r29
    2530:	08 95       	ret

00002532 <AVE_MTIMER0_PWMSetFunction>:




void AVE_MTIMER0_PWMSetFunction(void (*ptToPwmFunctionPassed)(void))
{
    2532:	df 93       	push	r29
    2534:	cf 93       	push	r28
    2536:	00 d0       	rcall	.+0      	; 0x2538 <AVE_MTIMER0_PWMSetFunction+0x6>
    2538:	cd b7       	in	r28, 0x3d	; 61
    253a:	de b7       	in	r29, 0x3e	; 62
    253c:	9a 83       	std	Y+2, r25	; 0x02
    253e:	89 83       	std	Y+1, r24	; 0x01

	(ptToPwmFunction) = (ptToPwmFunctionPassed);
    2540:	89 81       	ldd	r24, Y+1	; 0x01
    2542:	9a 81       	ldd	r25, Y+2	; 0x02
    2544:	90 93 cc 01 	sts	0x01CC, r25
    2548:	80 93 cb 01 	sts	0x01CB, r24
}
    254c:	0f 90       	pop	r0
    254e:	0f 90       	pop	r0
    2550:	cf 91       	pop	r28
    2552:	df 91       	pop	r29
    2554:	08 95       	ret

00002556 <AVE_MTIMER0_Initialize>:



void AVE_MTIMER0_Initialize(timerCfg*configurationStruct)
{
    2556:	df 93       	push	r29
    2558:	cf 93       	push	r28
    255a:	00 d0       	rcall	.+0      	; 0x255c <AVE_MTIMER0_Initialize+0x6>
    255c:	00 d0       	rcall	.+0      	; 0x255e <AVE_MTIMER0_Initialize+0x8>
    255e:	cd b7       	in	r28, 0x3d	; 61
    2560:	de b7       	in	r29, 0x3e	; 62
    2562:	9a 83       	std	Y+2, r25	; 0x02
    2564:	89 83       	std	Y+1, r24	; 0x01

	//this will be all replaced at the preprocessing time.
	//and it is by default the intializtion of the timer.

prescalerValue = (0x05);
    2566:	85 e0       	ldi	r24, 0x05	; 5
    2568:	80 93 bc 01 	sts	0x01BC, r24

#if MTIMER0_PRECONFIGURED_MODE == MTIMER0_NORMAL
	CLEAR_BIT(TIMER0_TCCR0,TIMER0_TCCR0_WGM00);
    256c:	a3 e5       	ldi	r26, 0x53	; 83
    256e:	b0 e0       	ldi	r27, 0x00	; 0
    2570:	e3 e5       	ldi	r30, 0x53	; 83
    2572:	f0 e0       	ldi	r31, 0x00	; 0
    2574:	80 81       	ld	r24, Z
    2576:	8f 7b       	andi	r24, 0xBF	; 191
    2578:	8c 93       	st	X, r24
	CLEAR_BIT(TIMER0_TCCR0,TIMER0_TCCR0_WGM01);
    257a:	a3 e5       	ldi	r26, 0x53	; 83
    257c:	b0 e0       	ldi	r27, 0x00	; 0
    257e:	e3 e5       	ldi	r30, 0x53	; 83
    2580:	f0 e0       	ldi	r31, 0x00	; 0
    2582:	80 81       	ld	r24, Z
    2584:	87 7f       	andi	r24, 0xF7	; 247
    2586:	8c 93       	st	X, r24
	globalInterruptManipulate(GLOBAL_INTERRUPT_ENABLE);
#endif


#if MTIMER0_OPERATION_SETTING == TIMER0_TOIE_NORMAL
	globalInterruptManipulate(GLOBAL_INTERRUPT_ENABLE);
    2588:	81 e0       	ldi	r24, 0x01	; 1
    258a:	0e 94 37 38 	call	0x706e	; 0x706e <globalInterruptManipulate>
	SET_BIT(TIMER0_TIMSK,TIMSK_TOIE0);
    258e:	a9 e5       	ldi	r26, 0x59	; 89
    2590:	b0 e0       	ldi	r27, 0x00	; 0
    2592:	e9 e5       	ldi	r30, 0x59	; 89
    2594:	f0 e0       	ldi	r31, 0x00	; 0
    2596:	80 81       	ld	r24, Z
    2598:	81 60       	ori	r24, 0x01	; 1
    259a:	8c 93       	st	X, r24





if(((timerCfg*)configurationStruct)->linkingType == POSTLINKING)
    259c:	e9 81       	ldd	r30, Y+1	; 0x01
    259e:	fa 81       	ldd	r31, Y+2	; 0x02
    25a0:	82 81       	ldd	r24, Z+2	; 0x02
    25a2:	81 30       	cpi	r24, 0x01	; 1
    25a4:	09 f0       	breq	.+2      	; 0x25a8 <AVE_MTIMER0_Initialize+0x52>
    25a6:	45 c0       	rjmp	.+138    	; 0x2632 <AVE_MTIMER0_Initialize+0xdc>
{


	switch(((timerCfg*)configurationStruct)->mode)
    25a8:	e9 81       	ldd	r30, Y+1	; 0x01
    25aa:	fa 81       	ldd	r31, Y+2	; 0x02
    25ac:	80 81       	ld	r24, Z
    25ae:	88 2f       	mov	r24, r24
    25b0:	90 e0       	ldi	r25, 0x00	; 0
    25b2:	00 97       	sbiw	r24, 0x00	; 0
    25b4:	71 f4       	brne	.+28     	; 0x25d2 <AVE_MTIMER0_Initialize+0x7c>
	{

	case TIMER:
		CLEAR_BIT(TIMER0_TCCR0,TIMER0_TCCR0_WGM00);
    25b6:	a3 e5       	ldi	r26, 0x53	; 83
    25b8:	b0 e0       	ldi	r27, 0x00	; 0
    25ba:	e3 e5       	ldi	r30, 0x53	; 83
    25bc:	f0 e0       	ldi	r31, 0x00	; 0
    25be:	80 81       	ld	r24, Z
    25c0:	8f 7b       	andi	r24, 0xBF	; 191
    25c2:	8c 93       	st	X, r24
		CLEAR_BIT(TIMER0_TCCR0,TIMER0_TCCR0_WGM01);
    25c4:	a3 e5       	ldi	r26, 0x53	; 83
    25c6:	b0 e0       	ldi	r27, 0x00	; 0
    25c8:	e3 e5       	ldi	r30, 0x53	; 83
    25ca:	f0 e0       	ldi	r31, 0x00	; 0
    25cc:	80 81       	ld	r24, Z
    25ce:	87 7f       	andi	r24, 0xF7	; 247
    25d0:	8c 93       	st	X, r24
//		prescalerValue = (0x05);
//		break;
//
//	}

	switch(((timerCfg*)configurationStruct)->interruptMode)
    25d2:	e9 81       	ldd	r30, Y+1	; 0x01
    25d4:	fa 81       	ldd	r31, Y+2	; 0x02
    25d6:	81 81       	ldd	r24, Z+1	; 0x01
    25d8:	28 2f       	mov	r18, r24
    25da:	30 e0       	ldi	r19, 0x00	; 0
    25dc:	3c 83       	std	Y+4, r19	; 0x04
    25de:	2b 83       	std	Y+3, r18	; 0x03
    25e0:	8b 81       	ldd	r24, Y+3	; 0x03
    25e2:	9c 81       	ldd	r25, Y+4	; 0x04
    25e4:	00 97       	sbiw	r24, 0x00	; 0
    25e6:	31 f0       	breq	.+12     	; 0x25f4 <AVE_MTIMER0_Initialize+0x9e>
    25e8:	2b 81       	ldd	r18, Y+3	; 0x03
    25ea:	3c 81       	ldd	r19, Y+4	; 0x04
    25ec:	21 30       	cpi	r18, 0x01	; 1
    25ee:	31 05       	cpc	r19, r1
    25f0:	89 f0       	breq	.+34     	; 0x2614 <AVE_MTIMER0_Initialize+0xbe>
    25f2:	1f c0       	rjmp	.+62     	; 0x2632 <AVE_MTIMER0_Initialize+0xdc>
	{

	case TIMER0_OIE_CTC:
		SET_BIT(TIMER0_TIMSK,TIMSK_OCIE0);
    25f4:	a9 e5       	ldi	r26, 0x59	; 89
    25f6:	b0 e0       	ldi	r27, 0x00	; 0
    25f8:	e9 e5       	ldi	r30, 0x59	; 89
    25fa:	f0 e0       	ldi	r31, 0x00	; 0
    25fc:	80 81       	ld	r24, Z
    25fe:	82 60       	ori	r24, 0x02	; 2
    2600:	8c 93       	st	X, r24
		globalInterruptManipulate(GLOBAL_INTERRUPT_ENABLE);
    2602:	81 e0       	ldi	r24, 0x01	; 1
    2604:	0e 94 37 38 	call	0x706e	; 0x706e <globalInterruptManipulate>
		AVE_MTIMER0_set((256-(MTIMER0_COUNT/(maxValueCounter))));
    2608:	86 e0       	ldi	r24, 0x06	; 6
    260a:	0e 94 41 13 	call	0x2682	; 0x2682 <AVE_MTIMER0_set>
		AVE_MTIMER0_start();
    260e:	0e 94 20 13 	call	0x2640	; 0x2640 <AVE_MTIMER0_start>
    2612:	0f c0       	rjmp	.+30     	; 0x2632 <AVE_MTIMER0_Initialize+0xdc>
		break;
	case TIMER0_TOIE_NORMAL:
		globalInterruptManipulate(GLOBAL_INTERRUPT_ENABLE);
    2614:	81 e0       	ldi	r24, 0x01	; 1
    2616:	0e 94 37 38 	call	0x706e	; 0x706e <globalInterruptManipulate>
		SET_BIT(TIMER0_TIMSK,TIMSK_TOIE0);
    261a:	a9 e5       	ldi	r26, 0x59	; 89
    261c:	b0 e0       	ldi	r27, 0x00	; 0
    261e:	e9 e5       	ldi	r30, 0x59	; 89
    2620:	f0 e0       	ldi	r31, 0x00	; 0
    2622:	80 81       	ld	r24, Z
    2624:	81 60       	ori	r24, 0x01	; 1
    2626:	8c 93       	st	X, r24
		AVE_MTIMER0_set((256-(MTIMER0_COUNT/(maxValueCounter))));
    2628:	86 e0       	ldi	r24, 0x06	; 6
    262a:	0e 94 41 13 	call	0x2682	; 0x2682 <AVE_MTIMER0_set>
		AVE_MTIMER0_start();
    262e:	0e 94 20 13 	call	0x2640	; 0x2640 <AVE_MTIMER0_start>

}



}
    2632:	0f 90       	pop	r0
    2634:	0f 90       	pop	r0
    2636:	0f 90       	pop	r0
    2638:	0f 90       	pop	r0
    263a:	cf 91       	pop	r28
    263c:	df 91       	pop	r29
    263e:	08 95       	ret

00002640 <AVE_MTIMER0_start>:

void AVE_MTIMER0_start(void)
{
    2640:	df 93       	push	r29
    2642:	cf 93       	push	r28
    2644:	cd b7       	in	r28, 0x3d	; 61
    2646:	de b7       	in	r29, 0x3e	; 62
	TIMER0_TCCR0 &= (0xF8);
    2648:	a3 e5       	ldi	r26, 0x53	; 83
    264a:	b0 e0       	ldi	r27, 0x00	; 0
    264c:	e3 e5       	ldi	r30, 0x53	; 83
    264e:	f0 e0       	ldi	r31, 0x00	; 0
    2650:	80 81       	ld	r24, Z
    2652:	88 7f       	andi	r24, 0xF8	; 248
    2654:	8c 93       	st	X, r24

	TIMER0_TCCR0 |= prescalerValue;
    2656:	a3 e5       	ldi	r26, 0x53	; 83
    2658:	b0 e0       	ldi	r27, 0x00	; 0
    265a:	e3 e5       	ldi	r30, 0x53	; 83
    265c:	f0 e0       	ldi	r31, 0x00	; 0
    265e:	90 81       	ld	r25, Z
    2660:	80 91 bc 01 	lds	r24, 0x01BC
    2664:	89 2b       	or	r24, r25
    2666:	8c 93       	st	X, r24


	return;
}
    2668:	cf 91       	pop	r28
    266a:	df 91       	pop	r29
    266c:	08 95       	ret

0000266e <AVE_MTIMER0_read>:

uint8 AVE_MTIMER0_read(void)
{
    266e:	df 93       	push	r29
    2670:	cf 93       	push	r28
    2672:	cd b7       	in	r28, 0x3d	; 61
    2674:	de b7       	in	r29, 0x3e	; 62

	return TIMER0_TCNT0;
    2676:	e2 e5       	ldi	r30, 0x52	; 82
    2678:	f0 e0       	ldi	r31, 0x00	; 0
    267a:	80 81       	ld	r24, Z

}
    267c:	cf 91       	pop	r28
    267e:	df 91       	pop	r29
    2680:	08 95       	ret

00002682 <AVE_MTIMER0_set>:

void AVE_MTIMER0_set(uint8 setValue)
{
    2682:	df 93       	push	r29
    2684:	cf 93       	push	r28
    2686:	0f 92       	push	r0
    2688:	cd b7       	in	r28, 0x3d	; 61
    268a:	de b7       	in	r29, 0x3e	; 62
    268c:	89 83       	std	Y+1, r24	; 0x01
	TIMER0_TCNT0 = setValue;
    268e:	e2 e5       	ldi	r30, 0x52	; 82
    2690:	f0 e0       	ldi	r31, 0x00	; 0
    2692:	89 81       	ldd	r24, Y+1	; 0x01
    2694:	80 83       	st	Z, r24
}
    2696:	0f 90       	pop	r0
    2698:	cf 91       	pop	r28
    269a:	df 91       	pop	r29
    269c:	08 95       	ret

0000269e <AVE_MTIMER0_stop>:

void AVE_MTIMER0_stop(void)
{
    269e:	df 93       	push	r29
    26a0:	cf 93       	push	r28
    26a2:	cd b7       	in	r28, 0x3d	; 61
    26a4:	de b7       	in	r29, 0x3e	; 62

	TIMER0_TCCR0 &= (0xF8);
    26a6:	a3 e5       	ldi	r26, 0x53	; 83
    26a8:	b0 e0       	ldi	r27, 0x00	; 0
    26aa:	e3 e5       	ldi	r30, 0x53	; 83
    26ac:	f0 e0       	ldi	r31, 0x00	; 0
    26ae:	80 81       	ld	r24, Z
    26b0:	88 7f       	andi	r24, 0xF8	; 248
    26b2:	8c 93       	st	X, r24
	TIMER0_TCNT0 = 0;
    26b4:	e2 e5       	ldi	r30, 0x52	; 82
    26b6:	f0 e0       	ldi	r31, 0x00	; 0
    26b8:	10 82       	st	Z, r1

	return;
}
    26ba:	cf 91       	pop	r28
    26bc:	df 91       	pop	r29
    26be:	08 95       	ret

000026c0 <AVE_MTIMER0_delay_ms>:

void AVE_MTIMER0_delay_ms(uint32 delayValue,uint8 interruptValue)
{
    26c0:	df 93       	push	r29
    26c2:	cf 93       	push	r28
    26c4:	cd b7       	in	r28, 0x3d	; 61
    26c6:	de b7       	in	r29, 0x3e	; 62
    26c8:	67 97       	sbiw	r28, 0x17	; 23
    26ca:	0f b6       	in	r0, 0x3f	; 63
    26cc:	f8 94       	cli
    26ce:	de bf       	out	0x3e, r29	; 62
    26d0:	0f be       	out	0x3f, r0	; 63
    26d2:	cd bf       	out	0x3d, r28	; 61
    26d4:	6b 8b       	std	Y+19, r22	; 0x13
    26d6:	7c 8b       	std	Y+20, r23	; 0x14
    26d8:	8d 8b       	std	Y+21, r24	; 0x15
    26da:	9e 8b       	std	Y+22, r25	; 0x16
    26dc:	4f 8b       	std	Y+23, r20	; 0x17
#elif MTIMER0_PRESCALER == MTIMER0_PRESCALER64
	prescalingValue = 64;
#elif MTIMER0_PRESCALER == MTIMER0_PRESCALER256
	prescalingValue = 256;
#elif MTIMER0_PRESCALER == MTIMER0_PRESCALER1024
	prescalingValue = 1024;
    26de:	80 e0       	ldi	r24, 0x00	; 0
    26e0:	90 e0       	ldi	r25, 0x00	; 0
    26e2:	a0 e8       	ldi	r26, 0x80	; 128
    26e4:	b4 e4       	ldi	r27, 0x44	; 68
    26e6:	8b 87       	std	Y+11, r24	; 0x0b
    26e8:	9c 87       	std	Y+12, r25	; 0x0c
    26ea:	ad 87       	std	Y+13, r26	; 0x0d
    26ec:	be 87       	std	Y+14, r27	; 0x0e
#else
	prescalingValue = 1;
#endif

	tickTime =(f32)(1000000*(prescalingValue/(f32)MTIMER0_SPEED));
    26ee:	6b 85       	ldd	r22, Y+11	; 0x0b
    26f0:	7c 85       	ldd	r23, Y+12	; 0x0c
    26f2:	8d 85       	ldd	r24, Y+13	; 0x0d
    26f4:	9e 85       	ldd	r25, Y+14	; 0x0e
    26f6:	20 e0       	ldi	r18, 0x00	; 0
    26f8:	34 e2       	ldi	r19, 0x24	; 36
    26fa:	44 ef       	ldi	r20, 0xF4	; 244
    26fc:	5a e4       	ldi	r21, 0x4A	; 74
    26fe:	0e 94 3c 0c 	call	0x1878	; 0x1878 <__divsf3>
    2702:	dc 01       	movw	r26, r24
    2704:	cb 01       	movw	r24, r22
    2706:	bc 01       	movw	r22, r24
    2708:	cd 01       	movw	r24, r26
    270a:	20 e0       	ldi	r18, 0x00	; 0
    270c:	34 e2       	ldi	r19, 0x24	; 36
    270e:	44 e7       	ldi	r20, 0x74	; 116
    2710:	59 e4       	ldi	r21, 0x49	; 73
    2712:	0e 94 42 0b 	call	0x1684	; 0x1684 <__mulsf3>
    2716:	dc 01       	movw	r26, r24
    2718:	cb 01       	movw	r24, r22
    271a:	8f 87       	std	Y+15, r24	; 0x0f
    271c:	98 8b       	std	Y+16, r25	; 0x10
    271e:	a9 8b       	std	Y+17, r26	; 0x11
    2720:	ba 8b       	std	Y+18, r27	; 0x12



	uint32 timeOfOverFlow = 256 * tickTime;
    2722:	6f 85       	ldd	r22, Y+15	; 0x0f
    2724:	78 89       	ldd	r23, Y+16	; 0x10
    2726:	89 89       	ldd	r24, Y+17	; 0x11
    2728:	9a 89       	ldd	r25, Y+18	; 0x12
    272a:	20 e0       	ldi	r18, 0x00	; 0
    272c:	30 e0       	ldi	r19, 0x00	; 0
    272e:	40 e8       	ldi	r20, 0x80	; 128
    2730:	53 e4       	ldi	r21, 0x43	; 67
    2732:	0e 94 42 0b 	call	0x1684	; 0x1684 <__mulsf3>
    2736:	dc 01       	movw	r26, r24
    2738:	cb 01       	movw	r24, r22
    273a:	bc 01       	movw	r22, r24
    273c:	cd 01       	movw	r24, r26
    273e:	0e 94 44 01 	call	0x288	; 0x288 <__fixunssfsi>
    2742:	dc 01       	movw	r26, r24
    2744:	cb 01       	movw	r24, r22
    2746:	8f 83       	std	Y+7, r24	; 0x07
    2748:	98 87       	std	Y+8, r25	; 0x08
    274a:	a9 87       	std	Y+9, r26	; 0x09
    274c:	ba 87       	std	Y+10, r27	; 0x0a
	uint32 numberOfOverflows = ((delayValue*1000)/timeOfOverFlow);
    274e:	8b 89       	ldd	r24, Y+19	; 0x13
    2750:	9c 89       	ldd	r25, Y+20	; 0x14
    2752:	ad 89       	ldd	r26, Y+21	; 0x15
    2754:	be 89       	ldd	r27, Y+22	; 0x16
    2756:	28 ee       	ldi	r18, 0xE8	; 232
    2758:	33 e0       	ldi	r19, 0x03	; 3
    275a:	40 e0       	ldi	r20, 0x00	; 0
    275c:	50 e0       	ldi	r21, 0x00	; 0
    275e:	bc 01       	movw	r22, r24
    2760:	cd 01       	movw	r24, r26
    2762:	0e 94 34 3b 	call	0x7668	; 0x7668 <__mulsi3>
    2766:	dc 01       	movw	r26, r24
    2768:	cb 01       	movw	r24, r22
    276a:	2f 81       	ldd	r18, Y+7	; 0x07
    276c:	38 85       	ldd	r19, Y+8	; 0x08
    276e:	49 85       	ldd	r20, Y+9	; 0x09
    2770:	5a 85       	ldd	r21, Y+10	; 0x0a
    2772:	bc 01       	movw	r22, r24
    2774:	cd 01       	movw	r24, r26
    2776:	0e 94 67 3b 	call	0x76ce	; 0x76ce <__udivmodsi4>
    277a:	da 01       	movw	r26, r20
    277c:	c9 01       	movw	r24, r18
    277e:	8b 83       	std	Y+3, r24	; 0x03
    2780:	9c 83       	std	Y+4, r25	; 0x04
    2782:	ad 83       	std	Y+5, r26	; 0x05
    2784:	be 83       	std	Y+6, r27	; 0x06
	uint16 preLoad = 256-((delayValue*1000)%timeOfOverFlow);
    2786:	8b 89       	ldd	r24, Y+19	; 0x13
    2788:	9c 89       	ldd	r25, Y+20	; 0x14
    278a:	ad 89       	ldd	r26, Y+21	; 0x15
    278c:	be 89       	ldd	r27, Y+22	; 0x16
    278e:	28 ee       	ldi	r18, 0xE8	; 232
    2790:	33 e0       	ldi	r19, 0x03	; 3
    2792:	40 e0       	ldi	r20, 0x00	; 0
    2794:	50 e0       	ldi	r21, 0x00	; 0
    2796:	bc 01       	movw	r22, r24
    2798:	cd 01       	movw	r24, r26
    279a:	0e 94 34 3b 	call	0x7668	; 0x7668 <__mulsi3>
    279e:	dc 01       	movw	r26, r24
    27a0:	cb 01       	movw	r24, r22
    27a2:	2f 81       	ldd	r18, Y+7	; 0x07
    27a4:	38 85       	ldd	r19, Y+8	; 0x08
    27a6:	49 85       	ldd	r20, Y+9	; 0x09
    27a8:	5a 85       	ldd	r21, Y+10	; 0x0a
    27aa:	bc 01       	movw	r22, r24
    27ac:	cd 01       	movw	r24, r26
    27ae:	0e 94 67 3b 	call	0x76ce	; 0x76ce <__udivmodsi4>
    27b2:	dc 01       	movw	r26, r24
    27b4:	cb 01       	movw	r24, r22
    27b6:	9c 01       	movw	r18, r24
    27b8:	80 e0       	ldi	r24, 0x00	; 0
    27ba:	91 e0       	ldi	r25, 0x01	; 1
    27bc:	82 1b       	sub	r24, r18
    27be:	93 0b       	sbc	r25, r19
    27c0:	9a 83       	std	Y+2, r25	; 0x02
    27c2:	89 83       	std	Y+1, r24	; 0x01

	if(preLoad<256)
    27c4:	89 81       	ldd	r24, Y+1	; 0x01
    27c6:	9a 81       	ldd	r25, Y+2	; 0x02
    27c8:	8f 3f       	cpi	r24, 0xFF	; 255
    27ca:	91 05       	cpc	r25, r1
    27cc:	09 f0       	breq	.+2      	; 0x27d0 <AVE_MTIMER0_delay_ms+0x110>
    27ce:	78 f4       	brcc	.+30     	; 0x27ee <AVE_MTIMER0_delay_ms+0x12e>
	{
		TIMER0_TCNT0 = preLoad;
    27d0:	e2 e5       	ldi	r30, 0x52	; 82
    27d2:	f0 e0       	ldi	r31, 0x00	; 0
    27d4:	89 81       	ldd	r24, Y+1	; 0x01
    27d6:	80 83       	st	Z, r24
		numberOfOverflows++;
    27d8:	8b 81       	ldd	r24, Y+3	; 0x03
    27da:	9c 81       	ldd	r25, Y+4	; 0x04
    27dc:	ad 81       	ldd	r26, Y+5	; 0x05
    27de:	be 81       	ldd	r27, Y+6	; 0x06
    27e0:	01 96       	adiw	r24, 0x01	; 1
    27e2:	a1 1d       	adc	r26, r1
    27e4:	b1 1d       	adc	r27, r1
    27e6:	8b 83       	std	Y+3, r24	; 0x03
    27e8:	9c 83       	std	Y+4, r25	; 0x04
    27ea:	ad 83       	std	Y+5, r26	; 0x05
    27ec:	be 83       	std	Y+6, r27	; 0x06

	}
	TIMER0_preservedNumberOfOverflows =numberOfOverFlows=numberOfOverflows;
    27ee:	8b 81       	ldd	r24, Y+3	; 0x03
    27f0:	9c 81       	ldd	r25, Y+4	; 0x04
    27f2:	ad 81       	ldd	r26, Y+5	; 0x05
    27f4:	be 81       	ldd	r27, Y+6	; 0x06
    27f6:	80 93 bf 01 	sts	0x01BF, r24
    27fa:	90 93 c0 01 	sts	0x01C0, r25
    27fe:	a0 93 c1 01 	sts	0x01C1, r26
    2802:	b0 93 c2 01 	sts	0x01C2, r27
    2806:	80 91 bf 01 	lds	r24, 0x01BF
    280a:	90 91 c0 01 	lds	r25, 0x01C0
    280e:	a0 91 c1 01 	lds	r26, 0x01C1
    2812:	b0 91 c2 01 	lds	r27, 0x01C2
    2816:	80 93 c3 01 	sts	0x01C3, r24
    281a:	90 93 c4 01 	sts	0x01C4, r25
    281e:	a0 93 c5 01 	sts	0x01C5, r26
    2822:	b0 93 c6 01 	sts	0x01C6, r27



//#if MTIMER0_OPERATION_SETTING == MTIMER0_POLLING

	AVE_MTIMER0_start();
    2826:	0e 94 20 13 	call	0x2640	; 0x2640 <AVE_MTIMER0_start>

	switch(interruptValue)
    282a:	8f 89       	ldd	r24, Y+23	; 0x17
    282c:	88 2f       	mov	r24, r24
    282e:	90 e0       	ldi	r25, 0x00	; 0
    2830:	82 30       	cpi	r24, 0x02	; 2
    2832:	91 05       	cpc	r25, r1
    2834:	e1 f0       	breq	.+56     	; 0x286e <AVE_MTIMER0_delay_ms+0x1ae>
    2836:	23 c0       	rjmp	.+70     	; 0x287e <AVE_MTIMER0_delay_ms+0x1be>
	case TIMER0_POLLING:

	while(numberOfOverflows)
		{

			if(((TIMER0_TIFR)&(1<<TIMER0_TIFR_TOV0))==1)
    2838:	e8 e5       	ldi	r30, 0x58	; 88
    283a:	f0 e0       	ldi	r31, 0x00	; 0
    283c:	80 81       	ld	r24, Z
    283e:	88 2f       	mov	r24, r24
    2840:	90 e0       	ldi	r25, 0x00	; 0
    2842:	81 70       	andi	r24, 0x01	; 1
    2844:	90 70       	andi	r25, 0x00	; 0
    2846:	88 23       	and	r24, r24
    2848:	91 f0       	breq	.+36     	; 0x286e <AVE_MTIMER0_delay_ms+0x1ae>
			{
				numberOfOverflows--;
    284a:	8b 81       	ldd	r24, Y+3	; 0x03
    284c:	9c 81       	ldd	r25, Y+4	; 0x04
    284e:	ad 81       	ldd	r26, Y+5	; 0x05
    2850:	be 81       	ldd	r27, Y+6	; 0x06
    2852:	01 97       	sbiw	r24, 0x01	; 1
    2854:	a1 09       	sbc	r26, r1
    2856:	b1 09       	sbc	r27, r1
    2858:	8b 83       	std	Y+3, r24	; 0x03
    285a:	9c 83       	std	Y+4, r25	; 0x04
    285c:	ad 83       	std	Y+5, r26	; 0x05
    285e:	be 83       	std	Y+6, r27	; 0x06
				SET_BIT(TIMER0_TIFR,TIMER0_TIFR_TOV0);
    2860:	a8 e5       	ldi	r26, 0x58	; 88
    2862:	b0 e0       	ldi	r27, 0x00	; 0
    2864:	e8 e5       	ldi	r30, 0x58	; 88
    2866:	f0 e0       	ldi	r31, 0x00	; 0
    2868:	80 81       	ld	r24, Z
    286a:	81 60       	ori	r24, 0x01	; 1
    286c:	8c 93       	st	X, r24
	switch(interruptValue)
	{

	case TIMER0_POLLING:

	while(numberOfOverflows)
    286e:	8b 81       	ldd	r24, Y+3	; 0x03
    2870:	9c 81       	ldd	r25, Y+4	; 0x04
    2872:	ad 81       	ldd	r26, Y+5	; 0x05
    2874:	be 81       	ldd	r27, Y+6	; 0x06
    2876:	00 97       	sbiw	r24, 0x00	; 0
    2878:	a1 05       	cpc	r26, r1
    287a:	b1 05       	cpc	r27, r1
    287c:	e9 f6       	brne	.-70     	; 0x2838 <AVE_MTIMER0_delay_ms+0x178>



	}

}
    287e:	67 96       	adiw	r28, 0x17	; 23
    2880:	0f b6       	in	r0, 0x3f	; 63
    2882:	f8 94       	cli
    2884:	de bf       	out	0x3e, r29	; 62
    2886:	0f be       	out	0x3f, r0	; 63
    2888:	cd bf       	out	0x3d, r28	; 61
    288a:	cf 91       	pop	r28
    288c:	df 91       	pop	r29
    288e:	08 95       	ret

00002890 <AVE_updateIcuNumberOfOverFlows>:




void AVE_updateIcuNumberOfOverFlows(void)
{
    2890:	df 93       	push	r29
    2892:	cf 93       	push	r28
    2894:	cd b7       	in	r28, 0x3d	; 61
    2896:	de b7       	in	r29, 0x3e	; 62

	IMER0IcuOverFlows++;
    2898:	80 91 b8 01 	lds	r24, 0x01B8
    289c:	90 91 b9 01 	lds	r25, 0x01B9
    28a0:	a0 91 ba 01 	lds	r26, 0x01BA
    28a4:	b0 91 bb 01 	lds	r27, 0x01BB
    28a8:	01 96       	adiw	r24, 0x01	; 1
    28aa:	a1 1d       	adc	r26, r1
    28ac:	b1 1d       	adc	r27, r1
    28ae:	80 93 b8 01 	sts	0x01B8, r24
    28b2:	90 93 b9 01 	sts	0x01B9, r25
    28b6:	a0 93 ba 01 	sts	0x01BA, r26
    28ba:	b0 93 bb 01 	sts	0x01BB, r27

	//AVE_MTIMER0_stop();


}
    28be:	cf 91       	pop	r28
    28c0:	df 91       	pop	r29
    28c2:	08 95       	ret

000028c4 <AVE_MTIMER0_ICU>:




void AVE_MTIMER0_ICU(void)
{
    28c4:	df 93       	push	r29
    28c6:	cf 93       	push	r28
    28c8:	cd b7       	in	r28, 0x3d	; 61
    28ca:	de b7       	in	r29, 0x3e	; 62
	AVE_TIMER0_setCallBackForInterrupt(AVE_updateIcuNumberOfOverFlows);
    28cc:	88 e4       	ldi	r24, 0x48	; 72
    28ce:	94 e1       	ldi	r25, 0x14	; 20
    28d0:	0e 94 87 12 	call	0x250e	; 0x250e <AVE_TIMER0_setCallBackForInterrupt>
	numberOfOverFlows = TIMER0_preservedNumberOfOverflows = 0;
    28d4:	10 92 c3 01 	sts	0x01C3, r1
    28d8:	10 92 c4 01 	sts	0x01C4, r1
    28dc:	10 92 c5 01 	sts	0x01C5, r1
    28e0:	10 92 c6 01 	sts	0x01C6, r1
    28e4:	80 91 c3 01 	lds	r24, 0x01C3
    28e8:	90 91 c4 01 	lds	r25, 0x01C4
    28ec:	a0 91 c5 01 	lds	r26, 0x01C5
    28f0:	b0 91 c6 01 	lds	r27, 0x01C6
    28f4:	80 93 bf 01 	sts	0x01BF, r24
    28f8:	90 93 c0 01 	sts	0x01C0, r25
    28fc:	a0 93 c1 01 	sts	0x01C1, r26
    2900:	b0 93 c2 01 	sts	0x01C2, r27
	AVE_MTIMER0_start();
    2904:	0e 94 20 13 	call	0x2640	; 0x2640 <AVE_MTIMER0_start>





}
    2908:	cf 91       	pop	r28
    290a:	df 91       	pop	r29
    290c:	08 95       	ret

0000290e <AVE_IcuGetNumberOfOverFlows>:




uint32 AVE_IcuGetNumberOfOverFlows(void)
{
    290e:	df 93       	push	r29
    2910:	cf 93       	push	r28
    2912:	cd b7       	in	r28, 0x3d	; 61
    2914:	de b7       	in	r29, 0x3e	; 62

	return IMER0IcuOverFlows;
    2916:	80 91 b8 01 	lds	r24, 0x01B8
    291a:	90 91 b9 01 	lds	r25, 0x01B9
    291e:	a0 91 ba 01 	lds	r26, 0x01BA
    2922:	b0 91 bb 01 	lds	r27, 0x01BB

}
    2926:	bc 01       	movw	r22, r24
    2928:	cd 01       	movw	r24, r26
    292a:	cf 91       	pop	r28
    292c:	df 91       	pop	r29
    292e:	08 95       	ret

00002930 <AVE_ClearIcuOverFlows>:

void AVE_ClearIcuOverFlows(void)
{
    2930:	df 93       	push	r29
    2932:	cf 93       	push	r28
    2934:	cd b7       	in	r28, 0x3d	; 61
    2936:	de b7       	in	r29, 0x3e	; 62
	IMER0IcuOverFlows = 0;
    2938:	10 92 b8 01 	sts	0x01B8, r1
    293c:	10 92 b9 01 	sts	0x01B9, r1
    2940:	10 92 ba 01 	sts	0x01BA, r1
    2944:	10 92 bb 01 	sts	0x01BB, r1

}
    2948:	cf 91       	pop	r28
    294a:	df 91       	pop	r29
    294c:	08 95       	ret

0000294e <AVE_timer0SetPrescalerValue>:

static uint16 AVE_timer0SetPrescalerValue(void)
{
    294e:	df 93       	push	r29
    2950:	cf 93       	push	r28
    2952:	00 d0       	rcall	.+0      	; 0x2954 <AVE_timer0SetPrescalerValue+0x6>
    2954:	cd b7       	in	r28, 0x3d	; 61
    2956:	de b7       	in	r29, 0x3e	; 62
	uint16 prescalerReturnedValue;
	if(prescalerValue == (0x01))
    2958:	80 91 bc 01 	lds	r24, 0x01BC
    295c:	81 30       	cpi	r24, 0x01	; 1
    295e:	29 f4       	brne	.+10     	; 0x296a <AVE_timer0SetPrescalerValue+0x1c>
	{
		prescalerReturnedValue = 1;
    2960:	81 e0       	ldi	r24, 0x01	; 1
    2962:	90 e0       	ldi	r25, 0x00	; 0
    2964:	9a 83       	std	Y+2, r25	; 0x02
    2966:	89 83       	std	Y+1, r24	; 0x01
    2968:	1f c0       	rjmp	.+62     	; 0x29a8 <AVE_timer0SetPrescalerValue+0x5a>

	}
	else if(prescalerValue==(0x02))
    296a:	80 91 bc 01 	lds	r24, 0x01BC
    296e:	82 30       	cpi	r24, 0x02	; 2
    2970:	29 f4       	brne	.+10     	; 0x297c <AVE_timer0SetPrescalerValue+0x2e>
	{
		prescalerReturnedValue = 8;
    2972:	88 e0       	ldi	r24, 0x08	; 8
    2974:	90 e0       	ldi	r25, 0x00	; 0
    2976:	9a 83       	std	Y+2, r25	; 0x02
    2978:	89 83       	std	Y+1, r24	; 0x01
    297a:	16 c0       	rjmp	.+44     	; 0x29a8 <AVE_timer0SetPrescalerValue+0x5a>

	}
	else if(prescalerValue==(0x03))
    297c:	80 91 bc 01 	lds	r24, 0x01BC
    2980:	83 30       	cpi	r24, 0x03	; 3
    2982:	29 f4       	brne	.+10     	; 0x298e <AVE_timer0SetPrescalerValue+0x40>
	{
		prescalerReturnedValue = 64;
    2984:	80 e4       	ldi	r24, 0x40	; 64
    2986:	90 e0       	ldi	r25, 0x00	; 0
    2988:	9a 83       	std	Y+2, r25	; 0x02
    298a:	89 83       	std	Y+1, r24	; 0x01
    298c:	0d c0       	rjmp	.+26     	; 0x29a8 <AVE_timer0SetPrescalerValue+0x5a>
	}
	else if(prescalerValue == (0x04))
    298e:	80 91 bc 01 	lds	r24, 0x01BC
    2992:	84 30       	cpi	r24, 0x04	; 4
    2994:	29 f4       	brne	.+10     	; 0x29a0 <AVE_timer0SetPrescalerValue+0x52>
	{
		prescalerReturnedValue = 256;
    2996:	80 e0       	ldi	r24, 0x00	; 0
    2998:	91 e0       	ldi	r25, 0x01	; 1
    299a:	9a 83       	std	Y+2, r25	; 0x02
    299c:	89 83       	std	Y+1, r24	; 0x01
    299e:	04 c0       	rjmp	.+8      	; 0x29a8 <AVE_timer0SetPrescalerValue+0x5a>

	}
	else
	{
		prescalerReturnedValue = 1024;
    29a0:	80 e0       	ldi	r24, 0x00	; 0
    29a2:	94 e0       	ldi	r25, 0x04	; 4
    29a4:	9a 83       	std	Y+2, r25	; 0x02
    29a6:	89 83       	std	Y+1, r24	; 0x01
	}

	return prescalerReturnedValue;
    29a8:	89 81       	ldd	r24, Y+1	; 0x01
    29aa:	9a 81       	ldd	r25, Y+2	; 0x02
}
    29ac:	0f 90       	pop	r0
    29ae:	0f 90       	pop	r0
    29b0:	cf 91       	pop	r28
    29b2:	df 91       	pop	r29
    29b4:	08 95       	ret

000029b6 <AVE_TIMER0_CTC_delay_ms>:


void AVE_TIMER0_CTC_delay_ms(uint32 delayValue,uint8 ocr0State)
{
    29b6:	0f 93       	push	r16
    29b8:	1f 93       	push	r17
    29ba:	df 93       	push	r29
    29bc:	cf 93       	push	r28
    29be:	cd b7       	in	r28, 0x3d	; 61
    29c0:	de b7       	in	r29, 0x3e	; 62
    29c2:	69 97       	sbiw	r28, 0x19	; 25
    29c4:	0f b6       	in	r0, 0x3f	; 63
    29c6:	f8 94       	cli
    29c8:	de bf       	out	0x3e, r29	; 62
    29ca:	0f be       	out	0x3f, r0	; 63
    29cc:	cd bf       	out	0x3d, r28	; 61
    29ce:	6b 8b       	std	Y+19, r22	; 0x13
    29d0:	7c 8b       	std	Y+20, r23	; 0x14
    29d2:	8d 8b       	std	Y+21, r24	; 0x15
    29d4:	9e 8b       	std	Y+22, r25	; 0x16
    29d6:	4f 8b       	std	Y+23, r20	; 0x17


	switch(ocr0State)
    29d8:	8f 89       	ldd	r24, Y+23	; 0x17
    29da:	28 2f       	mov	r18, r24
    29dc:	30 e0       	ldi	r19, 0x00	; 0
    29de:	39 8f       	std	Y+25, r19	; 0x19
    29e0:	28 8f       	std	Y+24, r18	; 0x18
    29e2:	88 8d       	ldd	r24, Y+24	; 0x18
    29e4:	99 8d       	ldd	r25, Y+25	; 0x19
    29e6:	81 30       	cpi	r24, 0x01	; 1
    29e8:	91 05       	cpc	r25, r1
    29ea:	21 f1       	breq	.+72     	; 0x2a34 <AVE_TIMER0_CTC_delay_ms+0x7e>
    29ec:	28 8d       	ldd	r18, Y+24	; 0x18
    29ee:	39 8d       	ldd	r19, Y+25	; 0x19
    29f0:	22 30       	cpi	r18, 0x02	; 2
    29f2:	31 05       	cpc	r19, r1
    29f4:	2c f4       	brge	.+10     	; 0x2a00 <AVE_TIMER0_CTC_delay_ms+0x4a>
    29f6:	88 8d       	ldd	r24, Y+24	; 0x18
    29f8:	99 8d       	ldd	r25, Y+25	; 0x19
    29fa:	00 97       	sbiw	r24, 0x00	; 0
    29fc:	61 f0       	breq	.+24     	; 0x2a16 <AVE_TIMER0_CTC_delay_ms+0x60>
    29fe:	46 c0       	rjmp	.+140    	; 0x2a8c <AVE_TIMER0_CTC_delay_ms+0xd6>
    2a00:	28 8d       	ldd	r18, Y+24	; 0x18
    2a02:	39 8d       	ldd	r19, Y+25	; 0x19
    2a04:	22 30       	cpi	r18, 0x02	; 2
    2a06:	31 05       	cpc	r19, r1
    2a08:	21 f1       	breq	.+72     	; 0x2a52 <AVE_TIMER0_CTC_delay_ms+0x9c>
    2a0a:	88 8d       	ldd	r24, Y+24	; 0x18
    2a0c:	99 8d       	ldd	r25, Y+25	; 0x19
    2a0e:	83 30       	cpi	r24, 0x03	; 3
    2a10:	91 05       	cpc	r25, r1
    2a12:	71 f1       	breq	.+92     	; 0x2a70 <AVE_TIMER0_CTC_delay_ms+0xba>
    2a14:	3b c0       	rjmp	.+118    	; 0x2a8c <AVE_TIMER0_CTC_delay_ms+0xd6>
	{

	case TIMER0_OCR_DISCONNECTED:
		CLEAR_BIT(TIMER0_TCCR0,TIMER0_TCCR0_COM00);
    2a16:	a3 e5       	ldi	r26, 0x53	; 83
    2a18:	b0 e0       	ldi	r27, 0x00	; 0
    2a1a:	e3 e5       	ldi	r30, 0x53	; 83
    2a1c:	f0 e0       	ldi	r31, 0x00	; 0
    2a1e:	80 81       	ld	r24, Z
    2a20:	8f 7e       	andi	r24, 0xEF	; 239
    2a22:	8c 93       	st	X, r24
		CLEAR_BIT(TIMER0_TCCR0,TIMER0_TCCR0_COM01);
    2a24:	a3 e5       	ldi	r26, 0x53	; 83
    2a26:	b0 e0       	ldi	r27, 0x00	; 0
    2a28:	e3 e5       	ldi	r30, 0x53	; 83
    2a2a:	f0 e0       	ldi	r31, 0x00	; 0
    2a2c:	80 81       	ld	r24, Z
    2a2e:	8f 7d       	andi	r24, 0xDF	; 223
    2a30:	8c 93       	st	X, r24
    2a32:	2c c0       	rjmp	.+88     	; 0x2a8c <AVE_TIMER0_CTC_delay_ms+0xd6>
		break;
	case TIMER0_OCR_SET:
		SET_BIT(TIMER0_TCCR0,TIMER0_TCCR0_COM00);
    2a34:	a3 e5       	ldi	r26, 0x53	; 83
    2a36:	b0 e0       	ldi	r27, 0x00	; 0
    2a38:	e3 e5       	ldi	r30, 0x53	; 83
    2a3a:	f0 e0       	ldi	r31, 0x00	; 0
    2a3c:	80 81       	ld	r24, Z
    2a3e:	80 61       	ori	r24, 0x10	; 16
    2a40:	8c 93       	st	X, r24
		SET_BIT(TIMER0_TCCR0,TIMER0_TCCR0_COM01);
    2a42:	a3 e5       	ldi	r26, 0x53	; 83
    2a44:	b0 e0       	ldi	r27, 0x00	; 0
    2a46:	e3 e5       	ldi	r30, 0x53	; 83
    2a48:	f0 e0       	ldi	r31, 0x00	; 0
    2a4a:	80 81       	ld	r24, Z
    2a4c:	80 62       	ori	r24, 0x20	; 32
    2a4e:	8c 93       	st	X, r24
    2a50:	1d c0       	rjmp	.+58     	; 0x2a8c <AVE_TIMER0_CTC_delay_ms+0xd6>
		break;
	case TIMER0_OCR_CLEAR:
		CLEAR_BIT(TIMER0_TCCR0,TIMER0_TCCR0_COM00);
    2a52:	a3 e5       	ldi	r26, 0x53	; 83
    2a54:	b0 e0       	ldi	r27, 0x00	; 0
    2a56:	e3 e5       	ldi	r30, 0x53	; 83
    2a58:	f0 e0       	ldi	r31, 0x00	; 0
    2a5a:	80 81       	ld	r24, Z
    2a5c:	8f 7e       	andi	r24, 0xEF	; 239
    2a5e:	8c 93       	st	X, r24
		SET_BIT(TIMER0_TCCR0,TIMER0_TCCR0_COM01);
    2a60:	a3 e5       	ldi	r26, 0x53	; 83
    2a62:	b0 e0       	ldi	r27, 0x00	; 0
    2a64:	e3 e5       	ldi	r30, 0x53	; 83
    2a66:	f0 e0       	ldi	r31, 0x00	; 0
    2a68:	80 81       	ld	r24, Z
    2a6a:	80 62       	ori	r24, 0x20	; 32
    2a6c:	8c 93       	st	X, r24
    2a6e:	0e c0       	rjmp	.+28     	; 0x2a8c <AVE_TIMER0_CTC_delay_ms+0xd6>
		break;
	case TIMER0_OCR_TOGGLE:
		SET_BIT(TIMER0_TCCR0,TIMER0_TCCR0_COM00);
    2a70:	a3 e5       	ldi	r26, 0x53	; 83
    2a72:	b0 e0       	ldi	r27, 0x00	; 0
    2a74:	e3 e5       	ldi	r30, 0x53	; 83
    2a76:	f0 e0       	ldi	r31, 0x00	; 0
    2a78:	80 81       	ld	r24, Z
    2a7a:	80 61       	ori	r24, 0x10	; 16
    2a7c:	8c 93       	st	X, r24
		CLEAR_BIT(TIMER0_TCCR0,TIMER0_TCCR0_COM01);
    2a7e:	a3 e5       	ldi	r26, 0x53	; 83
    2a80:	b0 e0       	ldi	r27, 0x00	; 0
    2a82:	e3 e5       	ldi	r30, 0x53	; 83
    2a84:	f0 e0       	ldi	r31, 0x00	; 0
    2a86:	80 81       	ld	r24, Z
    2a88:	8f 7d       	andi	r24, 0xDF	; 223
    2a8a:	8c 93       	st	X, r24
		break;


	}

	uint32 prescalerValue = AVE_timer0SetPrescalerValue();
    2a8c:	0e 94 a7 14 	call	0x294e	; 0x294e <AVE_timer0SetPrescalerValue>
    2a90:	cc 01       	movw	r24, r24
    2a92:	a0 e0       	ldi	r26, 0x00	; 0
    2a94:	b0 e0       	ldi	r27, 0x00	; 0
    2a96:	8f 87       	std	Y+15, r24	; 0x0f
    2a98:	98 8b       	std	Y+16, r25	; 0x10
    2a9a:	a9 8b       	std	Y+17, r26	; 0x11
    2a9c:	ba 8b       	std	Y+18, r27	; 0x12

	f32 tickTime =(f32)(1000000*(prescalerValue/(f32)MTIMER0_SPEED));
    2a9e:	6f 85       	ldd	r22, Y+15	; 0x0f
    2aa0:	78 89       	ldd	r23, Y+16	; 0x10
    2aa2:	89 89       	ldd	r24, Y+17	; 0x11
    2aa4:	9a 89       	ldd	r25, Y+18	; 0x12
    2aa6:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <__floatunsisf>
    2aaa:	dc 01       	movw	r26, r24
    2aac:	cb 01       	movw	r24, r22
    2aae:	bc 01       	movw	r22, r24
    2ab0:	cd 01       	movw	r24, r26
    2ab2:	20 e0       	ldi	r18, 0x00	; 0
    2ab4:	34 e2       	ldi	r19, 0x24	; 36
    2ab6:	44 ef       	ldi	r20, 0xF4	; 244
    2ab8:	5a e4       	ldi	r21, 0x4A	; 74
    2aba:	0e 94 3c 0c 	call	0x1878	; 0x1878 <__divsf3>
    2abe:	dc 01       	movw	r26, r24
    2ac0:	cb 01       	movw	r24, r22
    2ac2:	bc 01       	movw	r22, r24
    2ac4:	cd 01       	movw	r24, r26
    2ac6:	20 e0       	ldi	r18, 0x00	; 0
    2ac8:	34 e2       	ldi	r19, 0x24	; 36
    2aca:	44 e7       	ldi	r20, 0x74	; 116
    2acc:	59 e4       	ldi	r21, 0x49	; 73
    2ace:	0e 94 42 0b 	call	0x1684	; 0x1684 <__mulsf3>
    2ad2:	dc 01       	movw	r26, r24
    2ad4:	cb 01       	movw	r24, r22
    2ad6:	8b 87       	std	Y+11, r24	; 0x0b
    2ad8:	9c 87       	std	Y+12, r25	; 0x0c
    2ada:	ad 87       	std	Y+13, r26	; 0x0d
    2adc:	be 87       	std	Y+14, r27	; 0x0e



	uint32 timeOfOverFlow = (TIMER0_OCRValue+1) * tickTime;
    2ade:	80 91 c7 01 	lds	r24, 0x01C7
    2ae2:	90 91 c8 01 	lds	r25, 0x01C8
    2ae6:	a0 91 c9 01 	lds	r26, 0x01C9
    2aea:	b0 91 ca 01 	lds	r27, 0x01CA
    2aee:	01 96       	adiw	r24, 0x01	; 1
    2af0:	a1 1d       	adc	r26, r1
    2af2:	b1 1d       	adc	r27, r1
    2af4:	bc 01       	movw	r22, r24
    2af6:	cd 01       	movw	r24, r26
    2af8:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <__floatunsisf>
    2afc:	dc 01       	movw	r26, r24
    2afe:	cb 01       	movw	r24, r22
    2b00:	bc 01       	movw	r22, r24
    2b02:	cd 01       	movw	r24, r26
    2b04:	2b 85       	ldd	r18, Y+11	; 0x0b
    2b06:	3c 85       	ldd	r19, Y+12	; 0x0c
    2b08:	4d 85       	ldd	r20, Y+13	; 0x0d
    2b0a:	5e 85       	ldd	r21, Y+14	; 0x0e
    2b0c:	0e 94 42 0b 	call	0x1684	; 0x1684 <__mulsf3>
    2b10:	dc 01       	movw	r26, r24
    2b12:	cb 01       	movw	r24, r22
    2b14:	bc 01       	movw	r22, r24
    2b16:	cd 01       	movw	r24, r26
    2b18:	0e 94 44 01 	call	0x288	; 0x288 <__fixunssfsi>
    2b1c:	dc 01       	movw	r26, r24
    2b1e:	cb 01       	movw	r24, r22
    2b20:	8f 83       	std	Y+7, r24	; 0x07
    2b22:	98 87       	std	Y+8, r25	; 0x08
    2b24:	a9 87       	std	Y+9, r26	; 0x09
    2b26:	ba 87       	std	Y+10, r27	; 0x0a
	uint32 numberOfOverflows = ((delayValue*1000)/timeOfOverFlow);
    2b28:	8b 89       	ldd	r24, Y+19	; 0x13
    2b2a:	9c 89       	ldd	r25, Y+20	; 0x14
    2b2c:	ad 89       	ldd	r26, Y+21	; 0x15
    2b2e:	be 89       	ldd	r27, Y+22	; 0x16
    2b30:	28 ee       	ldi	r18, 0xE8	; 232
    2b32:	33 e0       	ldi	r19, 0x03	; 3
    2b34:	40 e0       	ldi	r20, 0x00	; 0
    2b36:	50 e0       	ldi	r21, 0x00	; 0
    2b38:	bc 01       	movw	r22, r24
    2b3a:	cd 01       	movw	r24, r26
    2b3c:	0e 94 34 3b 	call	0x7668	; 0x7668 <__mulsi3>
    2b40:	dc 01       	movw	r26, r24
    2b42:	cb 01       	movw	r24, r22
    2b44:	2f 81       	ldd	r18, Y+7	; 0x07
    2b46:	38 85       	ldd	r19, Y+8	; 0x08
    2b48:	49 85       	ldd	r20, Y+9	; 0x09
    2b4a:	5a 85       	ldd	r21, Y+10	; 0x0a
    2b4c:	bc 01       	movw	r22, r24
    2b4e:	cd 01       	movw	r24, r26
    2b50:	0e 94 67 3b 	call	0x76ce	; 0x76ce <__udivmodsi4>
    2b54:	da 01       	movw	r26, r20
    2b56:	c9 01       	movw	r24, r18
    2b58:	8b 83       	std	Y+3, r24	; 0x03
    2b5a:	9c 83       	std	Y+4, r25	; 0x04
    2b5c:	ad 83       	std	Y+5, r26	; 0x05
    2b5e:	be 83       	std	Y+6, r27	; 0x06
	uint16 preLoad = (TIMER0_OCRValue+1)-((delayValue*1000)%timeOfOverFlow);
    2b60:	80 91 c7 01 	lds	r24, 0x01C7
    2b64:	90 91 c8 01 	lds	r25, 0x01C8
    2b68:	a0 91 c9 01 	lds	r26, 0x01C9
    2b6c:	b0 91 ca 01 	lds	r27, 0x01CA
    2b70:	8c 01       	movw	r16, r24
    2b72:	8b 89       	ldd	r24, Y+19	; 0x13
    2b74:	9c 89       	ldd	r25, Y+20	; 0x14
    2b76:	ad 89       	ldd	r26, Y+21	; 0x15
    2b78:	be 89       	ldd	r27, Y+22	; 0x16
    2b7a:	28 ee       	ldi	r18, 0xE8	; 232
    2b7c:	33 e0       	ldi	r19, 0x03	; 3
    2b7e:	40 e0       	ldi	r20, 0x00	; 0
    2b80:	50 e0       	ldi	r21, 0x00	; 0
    2b82:	bc 01       	movw	r22, r24
    2b84:	cd 01       	movw	r24, r26
    2b86:	0e 94 34 3b 	call	0x7668	; 0x7668 <__mulsi3>
    2b8a:	dc 01       	movw	r26, r24
    2b8c:	cb 01       	movw	r24, r22
    2b8e:	2f 81       	ldd	r18, Y+7	; 0x07
    2b90:	38 85       	ldd	r19, Y+8	; 0x08
    2b92:	49 85       	ldd	r20, Y+9	; 0x09
    2b94:	5a 85       	ldd	r21, Y+10	; 0x0a
    2b96:	bc 01       	movw	r22, r24
    2b98:	cd 01       	movw	r24, r26
    2b9a:	0e 94 67 3b 	call	0x76ce	; 0x76ce <__udivmodsi4>
    2b9e:	dc 01       	movw	r26, r24
    2ba0:	cb 01       	movw	r24, r22
    2ba2:	98 01       	movw	r18, r16
    2ba4:	28 1b       	sub	r18, r24
    2ba6:	39 0b       	sbc	r19, r25
    2ba8:	c9 01       	movw	r24, r18
    2baa:	01 96       	adiw	r24, 0x01	; 1
    2bac:	9a 83       	std	Y+2, r25	; 0x02
    2bae:	89 83       	std	Y+1, r24	; 0x01




	if(preLoad<(TIMER0_OCRValue+1))
    2bb0:	89 81       	ldd	r24, Y+1	; 0x01
    2bb2:	9a 81       	ldd	r25, Y+2	; 0x02
    2bb4:	9c 01       	movw	r18, r24
    2bb6:	40 e0       	ldi	r20, 0x00	; 0
    2bb8:	50 e0       	ldi	r21, 0x00	; 0
    2bba:	80 91 c7 01 	lds	r24, 0x01C7
    2bbe:	90 91 c8 01 	lds	r25, 0x01C8
    2bc2:	a0 91 c9 01 	lds	r26, 0x01C9
    2bc6:	b0 91 ca 01 	lds	r27, 0x01CA
    2bca:	01 96       	adiw	r24, 0x01	; 1
    2bcc:	a1 1d       	adc	r26, r1
    2bce:	b1 1d       	adc	r27, r1
    2bd0:	28 17       	cp	r18, r24
    2bd2:	39 07       	cpc	r19, r25
    2bd4:	4a 07       	cpc	r20, r26
    2bd6:	5b 07       	cpc	r21, r27
    2bd8:	78 f4       	brcc	.+30     	; 0x2bf8 <AVE_TIMER0_CTC_delay_ms+0x242>
	{
		TIMER0_TCNT0 = preLoad;
    2bda:	e2 e5       	ldi	r30, 0x52	; 82
    2bdc:	f0 e0       	ldi	r31, 0x00	; 0
    2bde:	89 81       	ldd	r24, Y+1	; 0x01
    2be0:	80 83       	st	Z, r24
		numberOfOverflows++;
    2be2:	8b 81       	ldd	r24, Y+3	; 0x03
    2be4:	9c 81       	ldd	r25, Y+4	; 0x04
    2be6:	ad 81       	ldd	r26, Y+5	; 0x05
    2be8:	be 81       	ldd	r27, Y+6	; 0x06
    2bea:	01 96       	adiw	r24, 0x01	; 1
    2bec:	a1 1d       	adc	r26, r1
    2bee:	b1 1d       	adc	r27, r1
    2bf0:	8b 83       	std	Y+3, r24	; 0x03
    2bf2:	9c 83       	std	Y+4, r25	; 0x04
    2bf4:	ad 83       	std	Y+5, r26	; 0x05
    2bf6:	be 83       	std	Y+6, r27	; 0x06

	}
	TIMER0_preservedNumberOfOverflows = numberOfOverflows;
    2bf8:	8b 81       	ldd	r24, Y+3	; 0x03
    2bfa:	9c 81       	ldd	r25, Y+4	; 0x04
    2bfc:	ad 81       	ldd	r26, Y+5	; 0x05
    2bfe:	be 81       	ldd	r27, Y+6	; 0x06
    2c00:	80 93 c3 01 	sts	0x01C3, r24
    2c04:	90 93 c4 01 	sts	0x01C4, r25
    2c08:	a0 93 c5 01 	sts	0x01C5, r26
    2c0c:	b0 93 c6 01 	sts	0x01C6, r27





	AVE_MTIMER0_start();
    2c10:	0e 94 20 13 	call	0x2640	; 0x2640 <AVE_MTIMER0_start>
    2c14:	1b c0       	rjmp	.+54     	; 0x2c4c <AVE_TIMER0_CTC_delay_ms+0x296>

	while(numberOfOverflows)
	{

		if(((TIMER0_TIFR)&(1<<TIMER0_TIFR_TOV0))==1)
    2c16:	e8 e5       	ldi	r30, 0x58	; 88
    2c18:	f0 e0       	ldi	r31, 0x00	; 0
    2c1a:	80 81       	ld	r24, Z
    2c1c:	88 2f       	mov	r24, r24
    2c1e:	90 e0       	ldi	r25, 0x00	; 0
    2c20:	81 70       	andi	r24, 0x01	; 1
    2c22:	90 70       	andi	r25, 0x00	; 0
    2c24:	88 23       	and	r24, r24
    2c26:	91 f0       	breq	.+36     	; 0x2c4c <AVE_TIMER0_CTC_delay_ms+0x296>
		{
			numberOfOverflows--;
    2c28:	8b 81       	ldd	r24, Y+3	; 0x03
    2c2a:	9c 81       	ldd	r25, Y+4	; 0x04
    2c2c:	ad 81       	ldd	r26, Y+5	; 0x05
    2c2e:	be 81       	ldd	r27, Y+6	; 0x06
    2c30:	01 97       	sbiw	r24, 0x01	; 1
    2c32:	a1 09       	sbc	r26, r1
    2c34:	b1 09       	sbc	r27, r1
    2c36:	8b 83       	std	Y+3, r24	; 0x03
    2c38:	9c 83       	std	Y+4, r25	; 0x04
    2c3a:	ad 83       	std	Y+5, r26	; 0x05
    2c3c:	be 83       	std	Y+6, r27	; 0x06
			SET_BIT(TIMER0_TIFR,TIMER0_TIFR_TOV0);
    2c3e:	a8 e5       	ldi	r26, 0x58	; 88
    2c40:	b0 e0       	ldi	r27, 0x00	; 0
    2c42:	e8 e5       	ldi	r30, 0x58	; 88
    2c44:	f0 e0       	ldi	r31, 0x00	; 0
    2c46:	80 81       	ld	r24, Z
    2c48:	81 60       	ori	r24, 0x01	; 1
    2c4a:	8c 93       	st	X, r24



	AVE_MTIMER0_start();

	while(numberOfOverflows)
    2c4c:	8b 81       	ldd	r24, Y+3	; 0x03
    2c4e:	9c 81       	ldd	r25, Y+4	; 0x04
    2c50:	ad 81       	ldd	r26, Y+5	; 0x05
    2c52:	be 81       	ldd	r27, Y+6	; 0x06
    2c54:	00 97       	sbiw	r24, 0x00	; 0
    2c56:	a1 05       	cpc	r26, r1
    2c58:	b1 05       	cpc	r27, r1
    2c5a:	e9 f6       	brne	.-70     	; 0x2c16 <AVE_TIMER0_CTC_delay_ms+0x260>

		}
	}


	AVE_MTIMER0_stop();
    2c5c:	0e 94 4f 13 	call	0x269e	; 0x269e <AVE_MTIMER0_stop>
}
    2c60:	69 96       	adiw	r28, 0x19	; 25
    2c62:	0f b6       	in	r0, 0x3f	; 63
    2c64:	f8 94       	cli
    2c66:	de bf       	out	0x3e, r29	; 62
    2c68:	0f be       	out	0x3f, r0	; 63
    2c6a:	cd bf       	out	0x3d, r28	; 61
    2c6c:	cf 91       	pop	r28
    2c6e:	df 91       	pop	r29
    2c70:	1f 91       	pop	r17
    2c72:	0f 91       	pop	r16
    2c74:	08 95       	ret

00002c76 <AVE_timer0SwPWM>:




void AVE_timer0SwPWM(uint8 dutyCycle)
{
    2c76:	df 93       	push	r29
    2c78:	cf 93       	push	r28
    2c7a:	cd b7       	in	r28, 0x3d	; 61
    2c7c:	de b7       	in	r29, 0x3e	; 62
    2c7e:	27 97       	sbiw	r28, 0x07	; 7
    2c80:	0f b6       	in	r0, 0x3f	; 63
    2c82:	f8 94       	cli
    2c84:	de bf       	out	0x3e, r29	; 62
    2c86:	0f be       	out	0x3f, r0	; 63
    2c88:	cd bf       	out	0x3d, r28	; 61
    2c8a:	8f 83       	std	Y+7, r24	; 0x07
	uint16 T = (1000/1);
    2c8c:	88 ee       	ldi	r24, 0xE8	; 232
    2c8e:	93 e0       	ldi	r25, 0x03	; 3
    2c90:	9e 83       	std	Y+6, r25	; 0x06
    2c92:	8d 83       	std	Y+5, r24	; 0x05

	uint16 TON = (dutyCycle*T)/100 ;
    2c94:	8f 81       	ldd	r24, Y+7	; 0x07
    2c96:	28 2f       	mov	r18, r24
    2c98:	30 e0       	ldi	r19, 0x00	; 0
    2c9a:	8d 81       	ldd	r24, Y+5	; 0x05
    2c9c:	9e 81       	ldd	r25, Y+6	; 0x06
    2c9e:	ac 01       	movw	r20, r24
    2ca0:	24 9f       	mul	r18, r20
    2ca2:	c0 01       	movw	r24, r0
    2ca4:	25 9f       	mul	r18, r21
    2ca6:	90 0d       	add	r25, r0
    2ca8:	34 9f       	mul	r19, r20
    2caa:	90 0d       	add	r25, r0
    2cac:	11 24       	eor	r1, r1
    2cae:	24 e6       	ldi	r18, 0x64	; 100
    2cb0:	30 e0       	ldi	r19, 0x00	; 0
    2cb2:	b9 01       	movw	r22, r18
    2cb4:	0e 94 53 3b 	call	0x76a6	; 0x76a6 <__udivmodhi4>
    2cb8:	cb 01       	movw	r24, r22
    2cba:	9c 83       	std	Y+4, r25	; 0x04
    2cbc:	8b 83       	std	Y+3, r24	; 0x03

	uint16 TOFF = T-TON;
    2cbe:	2d 81       	ldd	r18, Y+5	; 0x05
    2cc0:	3e 81       	ldd	r19, Y+6	; 0x06
    2cc2:	8b 81       	ldd	r24, Y+3	; 0x03
    2cc4:	9c 81       	ldd	r25, Y+4	; 0x04
    2cc6:	a9 01       	movw	r20, r18
    2cc8:	48 1b       	sub	r20, r24
    2cca:	59 0b       	sbc	r21, r25
    2ccc:	ca 01       	movw	r24, r20
    2cce:	9a 83       	std	Y+2, r25	; 0x02
    2cd0:	89 83       	std	Y+1, r24	; 0x01
	(ptToPwmFunction)();
    2cd2:	e0 91 cb 01 	lds	r30, 0x01CB
    2cd6:	f0 91 cc 01 	lds	r31, 0x01CC
    2cda:	09 95       	icall
	AVE_MTIMER0_delay_ms(TON,TIMER0_POLLING);
    2cdc:	8b 81       	ldd	r24, Y+3	; 0x03
    2cde:	9c 81       	ldd	r25, Y+4	; 0x04
    2ce0:	cc 01       	movw	r24, r24
    2ce2:	a0 e0       	ldi	r26, 0x00	; 0
    2ce4:	b0 e0       	ldi	r27, 0x00	; 0
    2ce6:	bc 01       	movw	r22, r24
    2ce8:	cd 01       	movw	r24, r26
    2cea:	42 e0       	ldi	r20, 0x02	; 2
    2cec:	0e 94 60 13 	call	0x26c0	; 0x26c0 <AVE_MTIMER0_delay_ms>
	(ptToPwmFunction)();
    2cf0:	e0 91 cb 01 	lds	r30, 0x01CB
    2cf4:	f0 91 cc 01 	lds	r31, 0x01CC
    2cf8:	09 95       	icall
	AVE_MTIMER0_delay_ms(TOFF,TIMER0_POLLING);
    2cfa:	89 81       	ldd	r24, Y+1	; 0x01
    2cfc:	9a 81       	ldd	r25, Y+2	; 0x02
    2cfe:	cc 01       	movw	r24, r24
    2d00:	a0 e0       	ldi	r26, 0x00	; 0
    2d02:	b0 e0       	ldi	r27, 0x00	; 0
    2d04:	bc 01       	movw	r22, r24
    2d06:	cd 01       	movw	r24, r26
    2d08:	42 e0       	ldi	r20, 0x02	; 2
    2d0a:	0e 94 60 13 	call	0x26c0	; 0x26c0 <AVE_MTIMER0_delay_ms>





}
    2d0e:	27 96       	adiw	r28, 0x07	; 7
    2d10:	0f b6       	in	r0, 0x3f	; 63
    2d12:	f8 94       	cli
    2d14:	de bf       	out	0x3e, r29	; 62
    2d16:	0f be       	out	0x3f, r0	; 63
    2d18:	cd bf       	out	0x3d, r28	; 61
    2d1a:	cf 91       	pop	r28
    2d1c:	df 91       	pop	r29
    2d1e:	08 95       	ret

00002d20 <__vector_11>:




ISR(INT10_TIMER0_OVF)
{
    2d20:	1f 92       	push	r1
    2d22:	0f 92       	push	r0
    2d24:	0f b6       	in	r0, 0x3f	; 63
    2d26:	0f 92       	push	r0
    2d28:	11 24       	eor	r1, r1
    2d2a:	2f 93       	push	r18
    2d2c:	3f 93       	push	r19
    2d2e:	4f 93       	push	r20
    2d30:	5f 93       	push	r21
    2d32:	6f 93       	push	r22
    2d34:	7f 93       	push	r23
    2d36:	8f 93       	push	r24
    2d38:	9f 93       	push	r25
    2d3a:	af 93       	push	r26
    2d3c:	bf 93       	push	r27
    2d3e:	ef 93       	push	r30
    2d40:	ff 93       	push	r31
    2d42:	df 93       	push	r29
    2d44:	cf 93       	push	r28
    2d46:	cd b7       	in	r28, 0x3d	; 61
    2d48:	de b7       	in	r29, 0x3e	; 62


	if(numberOfOverFlows!=0)
    2d4a:	80 91 bf 01 	lds	r24, 0x01BF
    2d4e:	90 91 c0 01 	lds	r25, 0x01C0
    2d52:	a0 91 c1 01 	lds	r26, 0x01C1
    2d56:	b0 91 c2 01 	lds	r27, 0x01C2
    2d5a:	00 97       	sbiw	r24, 0x00	; 0
    2d5c:	a1 05       	cpc	r26, r1
    2d5e:	b1 05       	cpc	r27, r1
    2d60:	a1 f0       	breq	.+40     	; 0x2d8a <__vector_11+0x6a>
	{
		numberOfOverFlows--;
    2d62:	80 91 bf 01 	lds	r24, 0x01BF
    2d66:	90 91 c0 01 	lds	r25, 0x01C0
    2d6a:	a0 91 c1 01 	lds	r26, 0x01C1
    2d6e:	b0 91 c2 01 	lds	r27, 0x01C2
    2d72:	01 97       	sbiw	r24, 0x01	; 1
    2d74:	a1 09       	sbc	r26, r1
    2d76:	b1 09       	sbc	r27, r1
    2d78:	80 93 bf 01 	sts	0x01BF, r24
    2d7c:	90 93 c0 01 	sts	0x01C0, r25
    2d80:	a0 93 c1 01 	sts	0x01C1, r26
    2d84:	b0 93 c2 01 	sts	0x01C2, r27
    2d88:	15 c0       	rjmp	.+42     	; 0x2db4 <__vector_11+0x94>
	}
	else
	{
		numberOfOverFlows = TIMER0_preservedNumberOfOverflows;
    2d8a:	80 91 c3 01 	lds	r24, 0x01C3
    2d8e:	90 91 c4 01 	lds	r25, 0x01C4
    2d92:	a0 91 c5 01 	lds	r26, 0x01C5
    2d96:	b0 91 c6 01 	lds	r27, 0x01C6
    2d9a:	80 93 bf 01 	sts	0x01BF, r24
    2d9e:	90 93 c0 01 	sts	0x01C0, r25
    2da2:	a0 93 c1 01 	sts	0x01C1, r26
    2da6:	b0 93 c2 01 	sts	0x01C2, r27
		TIMER0_ptOverFlowCallBackFunction();
    2daa:	e0 91 bd 01 	lds	r30, 0x01BD
    2dae:	f0 91 be 01 	lds	r31, 0x01BE
    2db2:	09 95       	icall

	}

}
    2db4:	cf 91       	pop	r28
    2db6:	df 91       	pop	r29
    2db8:	ff 91       	pop	r31
    2dba:	ef 91       	pop	r30
    2dbc:	bf 91       	pop	r27
    2dbe:	af 91       	pop	r26
    2dc0:	9f 91       	pop	r25
    2dc2:	8f 91       	pop	r24
    2dc4:	7f 91       	pop	r23
    2dc6:	6f 91       	pop	r22
    2dc8:	5f 91       	pop	r21
    2dca:	4f 91       	pop	r20
    2dcc:	3f 91       	pop	r19
    2dce:	2f 91       	pop	r18
    2dd0:	0f 90       	pop	r0
    2dd2:	0f be       	out	0x3f, r0	; 63
    2dd4:	0f 90       	pop	r0
    2dd6:	1f 90       	pop	r1
    2dd8:	18 95       	reti

00002dda <AVE_timer1Init>:
 *
 *
 */

void AVE_timer1Init(timerCfg*configuration)//uint8 mode,uint8 prescaler, uint16 initialValue, uint16 outputCompareValue,uint16 inputCapture, uint8 interruptMask)
{
    2dda:	df 93       	push	r29
    2ddc:	cf 93       	push	r28
    2dde:	cd b7       	in	r28, 0x3d	; 61
    2de0:	de b7       	in	r29, 0x3e	; 62
    2de2:	28 97       	sbiw	r28, 0x08	; 8
    2de4:	0f b6       	in	r0, 0x3f	; 63
    2de6:	f8 94       	cli
    2de8:	de bf       	out	0x3e, r29	; 62
    2dea:	0f be       	out	0x3f, r0	; 63
    2dec:	cd bf       	out	0x3d, r28	; 61
    2dee:	9a 83       	std	Y+2, r25	; 0x02
    2df0:	89 83       	std	Y+1, r24	; 0x01




#if MTIMER1_PRECONFIGURED_MODE == TIMER1_PHASE_ICR1
	CLEAR_BIT(TIMER1_TCCR1A,TCCR1A_WGM01);
    2df2:	af e4       	ldi	r26, 0x4F	; 79
    2df4:	b0 e0       	ldi	r27, 0x00	; 0
    2df6:	ef e4       	ldi	r30, 0x4F	; 79
    2df8:	f0 e0       	ldi	r31, 0x00	; 0
    2dfa:	80 81       	ld	r24, Z
    2dfc:	8e 7f       	andi	r24, 0xFE	; 254
    2dfe:	8c 93       	st	X, r24
	SET_BIT(TIMER1_TCCR1A,TCCR1A_WGM11);
    2e00:	af e4       	ldi	r26, 0x4F	; 79
    2e02:	b0 e0       	ldi	r27, 0x00	; 0
    2e04:	ef e4       	ldi	r30, 0x4F	; 79
    2e06:	f0 e0       	ldi	r31, 0x00	; 0
    2e08:	80 81       	ld	r24, Z
    2e0a:	82 60       	ori	r24, 0x02	; 2
    2e0c:	8c 93       	st	X, r24
	CLEAR_BIT(TIMER1_TCCR1B,TCCR1B_WGM12);
    2e0e:	ae e4       	ldi	r26, 0x4E	; 78
    2e10:	b0 e0       	ldi	r27, 0x00	; 0
    2e12:	ee e4       	ldi	r30, 0x4E	; 78
    2e14:	f0 e0       	ldi	r31, 0x00	; 0
    2e16:	80 81       	ld	r24, Z
    2e18:	87 7f       	andi	r24, 0xF7	; 247
    2e1a:	8c 93       	st	X, r24
	SET_BIT(TIMER1_TCCR1B,TCCR1B_WGM13);
    2e1c:	ae e4       	ldi	r26, 0x4E	; 78
    2e1e:	b0 e0       	ldi	r27, 0x00	; 0
    2e20:	ee e4       	ldi	r30, 0x4E	; 78
    2e22:	f0 e0       	ldi	r31, 0x00	; 0
    2e24:	80 81       	ld	r24, Z
    2e26:	80 61       	ori	r24, 0x10	; 16
    2e28:	8c 93       	st	X, r24
	CLEAR_BIT(TIMER1_TCCR1A,TCCR1A_COM1A0);
    2e2a:	af e4       	ldi	r26, 0x4F	; 79
    2e2c:	b0 e0       	ldi	r27, 0x00	; 0
    2e2e:	ef e4       	ldi	r30, 0x4F	; 79
    2e30:	f0 e0       	ldi	r31, 0x00	; 0
    2e32:	80 81       	ld	r24, Z
    2e34:	8f 7b       	andi	r24, 0xBF	; 191
    2e36:	8c 93       	st	X, r24
	SET_BIT(TIMER1_TCCR1A,TCCR1A_COM1A1);
    2e38:	af e4       	ldi	r26, 0x4F	; 79
    2e3a:	b0 e0       	ldi	r27, 0x00	; 0
    2e3c:	ef e4       	ldi	r30, 0x4F	; 79
    2e3e:	f0 e0       	ldi	r31, 0x00	; 0
    2e40:	80 81       	ld	r24, Z
    2e42:	80 68       	ori	r24, 0x80	; 128
    2e44:	8c 93       	st	X, r24
#elif MTIMER1_PRESCALER == TIMER1_PRESCALER64
	TIMER1_prescalerValue = (0x03);
#elif MTIMER1_PRESCALER == TIMER1_PRESCALER256
	TIMER1_prescalerValue = (0x04);
#elif MTIMER1_PRESCALER == TIMER1_PRESCALER1024
	TIMER1_prescalerValue = (0x05);
    2e46:	85 e0       	ldi	r24, 0x05	; 5
    2e48:	80 93 cd 01 	sts	0x01CD, r24


	//uint16 valueToBeSet = outputCompareLow;


	if(configuration->linkingType == POSTLINKING)
    2e4c:	e9 81       	ldd	r30, Y+1	; 0x01
    2e4e:	fa 81       	ldd	r31, Y+2	; 0x02
    2e50:	82 81       	ldd	r24, Z+2	; 0x02
    2e52:	81 30       	cpi	r24, 0x01	; 1
    2e54:	09 f0       	breq	.+2      	; 0x2e58 <AVE_timer1Init+0x7e>
    2e56:	29 c1       	rjmp	.+594    	; 0x30aa <AVE_timer1Init+0x2d0>
	{

	switch(configuration->mode)
    2e58:	e9 81       	ldd	r30, Y+1	; 0x01
    2e5a:	fa 81       	ldd	r31, Y+2	; 0x02
    2e5c:	80 81       	ld	r24, Z
    2e5e:	28 2f       	mov	r18, r24
    2e60:	30 e0       	ldi	r19, 0x00	; 0
    2e62:	38 87       	std	Y+8, r19	; 0x08
    2e64:	2f 83       	std	Y+7, r18	; 0x07
    2e66:	8f 81       	ldd	r24, Y+7	; 0x07
    2e68:	98 85       	ldd	r25, Y+8	; 0x08
    2e6a:	81 30       	cpi	r24, 0x01	; 1
    2e6c:	91 05       	cpc	r25, r1
    2e6e:	a1 f1       	breq	.+104    	; 0x2ed8 <AVE_timer1Init+0xfe>
    2e70:	2f 81       	ldd	r18, Y+7	; 0x07
    2e72:	38 85       	ldd	r19, Y+8	; 0x08
    2e74:	22 30       	cpi	r18, 0x02	; 2
    2e76:	31 05       	cpc	r19, r1
    2e78:	2c f4       	brge	.+10     	; 0x2e84 <AVE_timer1Init+0xaa>
    2e7a:	8f 81       	ldd	r24, Y+7	; 0x07
    2e7c:	98 85       	ldd	r25, Y+8	; 0x08
    2e7e:	00 97       	sbiw	r24, 0x00	; 0
    2e80:	71 f0       	breq	.+28     	; 0x2e9e <AVE_timer1Init+0xc4>
    2e82:	8e c0       	rjmp	.+284    	; 0x2fa0 <AVE_timer1Init+0x1c6>
    2e84:	2f 81       	ldd	r18, Y+7	; 0x07
    2e86:	38 85       	ldd	r19, Y+8	; 0x08
    2e88:	22 30       	cpi	r18, 0x02	; 2
    2e8a:	31 05       	cpc	r19, r1
    2e8c:	09 f4       	brne	.+2      	; 0x2e90 <AVE_timer1Init+0xb6>
    2e8e:	41 c0       	rjmp	.+130    	; 0x2f12 <AVE_timer1Init+0x138>
    2e90:	8f 81       	ldd	r24, Y+7	; 0x07
    2e92:	98 85       	ldd	r25, Y+8	; 0x08
    2e94:	83 30       	cpi	r24, 0x03	; 3
    2e96:	91 05       	cpc	r25, r1
    2e98:	09 f4       	brne	.+2      	; 0x2e9c <AVE_timer1Init+0xc2>
    2e9a:	58 c0       	rjmp	.+176    	; 0x2f4c <AVE_timer1Init+0x172>
    2e9c:	81 c0       	rjmp	.+258    	; 0x2fa0 <AVE_timer1Init+0x1c6>
	{


	case TIMER1_NORMALMODE:
		CLEAR_BIT(TIMER1_TCCR1A,0);
    2e9e:	af e4       	ldi	r26, 0x4F	; 79
    2ea0:	b0 e0       	ldi	r27, 0x00	; 0
    2ea2:	ef e4       	ldi	r30, 0x4F	; 79
    2ea4:	f0 e0       	ldi	r31, 0x00	; 0
    2ea6:	80 81       	ld	r24, Z
    2ea8:	8e 7f       	andi	r24, 0xFE	; 254
    2eaa:	8c 93       	st	X, r24
		CLEAR_BIT(TIMER1_TCCR1A,1);
    2eac:	af e4       	ldi	r26, 0x4F	; 79
    2eae:	b0 e0       	ldi	r27, 0x00	; 0
    2eb0:	ef e4       	ldi	r30, 0x4F	; 79
    2eb2:	f0 e0       	ldi	r31, 0x00	; 0
    2eb4:	80 81       	ld	r24, Z
    2eb6:	8d 7f       	andi	r24, 0xFD	; 253
    2eb8:	8c 93       	st	X, r24
		CLEAR_BIT(TIMER1_TCCR1B,TCCR1B_WGM12);
    2eba:	ae e4       	ldi	r26, 0x4E	; 78
    2ebc:	b0 e0       	ldi	r27, 0x00	; 0
    2ebe:	ee e4       	ldi	r30, 0x4E	; 78
    2ec0:	f0 e0       	ldi	r31, 0x00	; 0
    2ec2:	80 81       	ld	r24, Z
    2ec4:	87 7f       	andi	r24, 0xF7	; 247
    2ec6:	8c 93       	st	X, r24
		CLEAR_BIT(TIMER1_TCCR1B,TCCR1B_WGM13);
    2ec8:	ae e4       	ldi	r26, 0x4E	; 78
    2eca:	b0 e0       	ldi	r27, 0x00	; 0
    2ecc:	ee e4       	ldi	r30, 0x4E	; 78
    2ece:	f0 e0       	ldi	r31, 0x00	; 0
    2ed0:	80 81       	ld	r24, Z
    2ed2:	8f 7e       	andi	r24, 0xEF	; 239
    2ed4:	8c 93       	st	X, r24
    2ed6:	64 c0       	rjmp	.+200    	; 0x2fa0 <AVE_timer1Init+0x1c6>
		break;

	case TIMER1_CTC_OCR1A:
		CLEAR_BIT(TIMER1_TCCR1A,TCCR1A_WGM01);
    2ed8:	af e4       	ldi	r26, 0x4F	; 79
    2eda:	b0 e0       	ldi	r27, 0x00	; 0
    2edc:	ef e4       	ldi	r30, 0x4F	; 79
    2ede:	f0 e0       	ldi	r31, 0x00	; 0
    2ee0:	80 81       	ld	r24, Z
    2ee2:	8e 7f       	andi	r24, 0xFE	; 254
    2ee4:	8c 93       	st	X, r24
		CLEAR_BIT(TIMER1_TCCR1A,TCCR1A_WGM11);
    2ee6:	af e4       	ldi	r26, 0x4F	; 79
    2ee8:	b0 e0       	ldi	r27, 0x00	; 0
    2eea:	ef e4       	ldi	r30, 0x4F	; 79
    2eec:	f0 e0       	ldi	r31, 0x00	; 0
    2eee:	80 81       	ld	r24, Z
    2ef0:	8d 7f       	andi	r24, 0xFD	; 253
    2ef2:	8c 93       	st	X, r24
		SET_BIT(TIMER1_TCCR1B,TCCR1B_WGM12);
    2ef4:	ae e4       	ldi	r26, 0x4E	; 78
    2ef6:	b0 e0       	ldi	r27, 0x00	; 0
    2ef8:	ee e4       	ldi	r30, 0x4E	; 78
    2efa:	f0 e0       	ldi	r31, 0x00	; 0
    2efc:	80 81       	ld	r24, Z
    2efe:	88 60       	ori	r24, 0x08	; 8
    2f00:	8c 93       	st	X, r24
		CLEAR_BIT(TIMER1_TCCR1B,TCCR1B_WGM13);
    2f02:	ae e4       	ldi	r26, 0x4E	; 78
    2f04:	b0 e0       	ldi	r27, 0x00	; 0
    2f06:	ee e4       	ldi	r30, 0x4E	; 78
    2f08:	f0 e0       	ldi	r31, 0x00	; 0
    2f0a:	80 81       	ld	r24, Z
    2f0c:	8f 7e       	andi	r24, 0xEF	; 239
    2f0e:	8c 93       	st	X, r24
    2f10:	47 c0       	rjmp	.+142    	; 0x2fa0 <AVE_timer1Init+0x1c6>
		//AVE_timer1SetAny(outputCompareValue,SET_OCR1A);
		//TIMER1_OCRValue = outputCompareValue;
		break;
	case TIMER1_CTC_ICR1A:
		CLEAR_BIT(TIMER1_TCCR1A,TCCR1A_WGM01);
    2f12:	af e4       	ldi	r26, 0x4F	; 79
    2f14:	b0 e0       	ldi	r27, 0x00	; 0
    2f16:	ef e4       	ldi	r30, 0x4F	; 79
    2f18:	f0 e0       	ldi	r31, 0x00	; 0
    2f1a:	80 81       	ld	r24, Z
    2f1c:	8e 7f       	andi	r24, 0xFE	; 254
    2f1e:	8c 93       	st	X, r24
		CLEAR_BIT(TIMER1_TCCR1A,TCCR1A_WGM11);
    2f20:	af e4       	ldi	r26, 0x4F	; 79
    2f22:	b0 e0       	ldi	r27, 0x00	; 0
    2f24:	ef e4       	ldi	r30, 0x4F	; 79
    2f26:	f0 e0       	ldi	r31, 0x00	; 0
    2f28:	80 81       	ld	r24, Z
    2f2a:	8d 7f       	andi	r24, 0xFD	; 253
    2f2c:	8c 93       	st	X, r24
		SET_BIT(TIMER1_TCCR1B,TCCR1B_WGM12);
    2f2e:	ae e4       	ldi	r26, 0x4E	; 78
    2f30:	b0 e0       	ldi	r27, 0x00	; 0
    2f32:	ee e4       	ldi	r30, 0x4E	; 78
    2f34:	f0 e0       	ldi	r31, 0x00	; 0
    2f36:	80 81       	ld	r24, Z
    2f38:	88 60       	ori	r24, 0x08	; 8
    2f3a:	8c 93       	st	X, r24
		SET_BIT(TIMER1_TCCR1B,TCCR1B_WGM13);
    2f3c:	ae e4       	ldi	r26, 0x4E	; 78
    2f3e:	b0 e0       	ldi	r27, 0x00	; 0
    2f40:	ee e4       	ldi	r30, 0x4E	; 78
    2f42:	f0 e0       	ldi	r31, 0x00	; 0
    2f44:	80 81       	ld	r24, Z
    2f46:	80 61       	ori	r24, 0x10	; 16
    2f48:	8c 93       	st	X, r24
    2f4a:	2a c0       	rjmp	.+84     	; 0x2fa0 <AVE_timer1Init+0x1c6>
		break;
	case TIMER1_PHASE_ICR1:
		CLEAR_BIT(TIMER1_TCCR1A,TCCR1A_WGM01);
    2f4c:	af e4       	ldi	r26, 0x4F	; 79
    2f4e:	b0 e0       	ldi	r27, 0x00	; 0
    2f50:	ef e4       	ldi	r30, 0x4F	; 79
    2f52:	f0 e0       	ldi	r31, 0x00	; 0
    2f54:	80 81       	ld	r24, Z
    2f56:	8e 7f       	andi	r24, 0xFE	; 254
    2f58:	8c 93       	st	X, r24
		SET_BIT(TIMER1_TCCR1A,TCCR1A_WGM11);
    2f5a:	af e4       	ldi	r26, 0x4F	; 79
    2f5c:	b0 e0       	ldi	r27, 0x00	; 0
    2f5e:	ef e4       	ldi	r30, 0x4F	; 79
    2f60:	f0 e0       	ldi	r31, 0x00	; 0
    2f62:	80 81       	ld	r24, Z
    2f64:	82 60       	ori	r24, 0x02	; 2
    2f66:	8c 93       	st	X, r24
		CLEAR_BIT(TIMER1_TCCR1B,TCCR1B_WGM12);
    2f68:	ae e4       	ldi	r26, 0x4E	; 78
    2f6a:	b0 e0       	ldi	r27, 0x00	; 0
    2f6c:	ee e4       	ldi	r30, 0x4E	; 78
    2f6e:	f0 e0       	ldi	r31, 0x00	; 0
    2f70:	80 81       	ld	r24, Z
    2f72:	87 7f       	andi	r24, 0xF7	; 247
    2f74:	8c 93       	st	X, r24
		SET_BIT(TIMER1_TCCR1B,TCCR1B_WGM13);
    2f76:	ae e4       	ldi	r26, 0x4E	; 78
    2f78:	b0 e0       	ldi	r27, 0x00	; 0
    2f7a:	ee e4       	ldi	r30, 0x4E	; 78
    2f7c:	f0 e0       	ldi	r31, 0x00	; 0
    2f7e:	80 81       	ld	r24, Z
    2f80:	80 61       	ori	r24, 0x10	; 16
    2f82:	8c 93       	st	X, r24
		CLEAR_BIT(TIMER1_TCCR1A,TCCR1A_COM1A0);
    2f84:	af e4       	ldi	r26, 0x4F	; 79
    2f86:	b0 e0       	ldi	r27, 0x00	; 0
    2f88:	ef e4       	ldi	r30, 0x4F	; 79
    2f8a:	f0 e0       	ldi	r31, 0x00	; 0
    2f8c:	80 81       	ld	r24, Z
    2f8e:	8f 7b       	andi	r24, 0xBF	; 191
    2f90:	8c 93       	st	X, r24
		SET_BIT(TIMER1_TCCR1A,TCCR1A_COM1A1);
    2f92:	af e4       	ldi	r26, 0x4F	; 79
    2f94:	b0 e0       	ldi	r27, 0x00	; 0
    2f96:	ef e4       	ldi	r30, 0x4F	; 79
    2f98:	f0 e0       	ldi	r31, 0x00	; 0
    2f9a:	80 81       	ld	r24, Z
    2f9c:	80 68       	ori	r24, 0x80	; 128
    2f9e:	8c 93       	st	X, r24




	}
	switch(configuration->mode)
    2fa0:	e9 81       	ldd	r30, Y+1	; 0x01
    2fa2:	fa 81       	ldd	r31, Y+2	; 0x02
    2fa4:	80 81       	ld	r24, Z
    2fa6:	28 2f       	mov	r18, r24
    2fa8:	30 e0       	ldi	r19, 0x00	; 0
    2faa:	3e 83       	std	Y+6, r19	; 0x06
    2fac:	2d 83       	std	Y+5, r18	; 0x05
    2fae:	8d 81       	ldd	r24, Y+5	; 0x05
    2fb0:	9e 81       	ldd	r25, Y+6	; 0x06
    2fb2:	83 30       	cpi	r24, 0x03	; 3
    2fb4:	91 05       	cpc	r25, r1
    2fb6:	11 f1       	breq	.+68     	; 0x2ffc <AVE_timer1Init+0x222>
    2fb8:	2d 81       	ldd	r18, Y+5	; 0x05
    2fba:	3e 81       	ldd	r19, Y+6	; 0x06
    2fbc:	24 30       	cpi	r18, 0x04	; 4
    2fbe:	31 05       	cpc	r19, r1
    2fc0:	54 f4       	brge	.+20     	; 0x2fd6 <AVE_timer1Init+0x1fc>
    2fc2:	8d 81       	ldd	r24, Y+5	; 0x05
    2fc4:	9e 81       	ldd	r25, Y+6	; 0x06
    2fc6:	00 97       	sbiw	r24, 0x00	; 0
    2fc8:	89 f0       	breq	.+34     	; 0x2fec <AVE_timer1Init+0x212>
    2fca:	2d 81       	ldd	r18, Y+5	; 0x05
    2fcc:	3e 81       	ldd	r19, Y+6	; 0x06
    2fce:	22 30       	cpi	r18, 0x02	; 2
    2fd0:	31 05       	cpc	r19, r1
    2fd2:	81 f0       	breq	.+32     	; 0x2ff4 <AVE_timer1Init+0x21a>
    2fd4:	1e c0       	rjmp	.+60     	; 0x3012 <AVE_timer1Init+0x238>
    2fd6:	8d 81       	ldd	r24, Y+5	; 0x05
    2fd8:	9e 81       	ldd	r25, Y+6	; 0x06
    2fda:	84 30       	cpi	r24, 0x04	; 4
    2fdc:	91 05       	cpc	r25, r1
    2fde:	91 f0       	breq	.+36     	; 0x3004 <AVE_timer1Init+0x22a>
    2fe0:	2d 81       	ldd	r18, Y+5	; 0x05
    2fe2:	3e 81       	ldd	r19, Y+6	; 0x06
    2fe4:	25 30       	cpi	r18, 0x05	; 5
    2fe6:	31 05       	cpc	r19, r1
    2fe8:	89 f0       	breq	.+34     	; 0x300c <AVE_timer1Init+0x232>
    2fea:	13 c0       	rjmp	.+38     	; 0x3012 <AVE_timer1Init+0x238>
	{

	case TIMER1_NOPRESCALER:
		TIMER1_prescalerValue = (0x01);
    2fec:	81 e0       	ldi	r24, 0x01	; 1
    2fee:	80 93 cd 01 	sts	0x01CD, r24
    2ff2:	0f c0       	rjmp	.+30     	; 0x3012 <AVE_timer1Init+0x238>
		break;
	case TIMER1_PRESCALER8:
		TIMER1_prescalerValue = (0x02);
    2ff4:	82 e0       	ldi	r24, 0x02	; 2
    2ff6:	80 93 cd 01 	sts	0x01CD, r24
    2ffa:	0b c0       	rjmp	.+22     	; 0x3012 <AVE_timer1Init+0x238>
		break;
	case TIMER1_PRESCALER64:
		TIMER1_prescalerValue = (0x03);
    2ffc:	83 e0       	ldi	r24, 0x03	; 3
    2ffe:	80 93 cd 01 	sts	0x01CD, r24
    3002:	07 c0       	rjmp	.+14     	; 0x3012 <AVE_timer1Init+0x238>
		break;
	case TIMER1_PRESCALER256:
		TIMER1_prescalerValue = (0x04);
    3004:	84 e0       	ldi	r24, 0x04	; 4
    3006:	80 93 cd 01 	sts	0x01CD, r24
    300a:	03 c0       	rjmp	.+6      	; 0x3012 <AVE_timer1Init+0x238>
		break;
	case TIMER1_PRESCALER1024:
		TIMER1_prescalerValue = (0x05);
    300c:	85 e0       	ldi	r24, 0x05	; 5
    300e:	80 93 cd 01 	sts	0x01CD, r24
		break;

	}


	switch(configuration->interruptMode)
    3012:	e9 81       	ldd	r30, Y+1	; 0x01
    3014:	fa 81       	ldd	r31, Y+2	; 0x02
    3016:	81 81       	ldd	r24, Z+1	; 0x01
    3018:	28 2f       	mov	r18, r24
    301a:	30 e0       	ldi	r19, 0x00	; 0
    301c:	3c 83       	std	Y+4, r19	; 0x04
    301e:	2b 83       	std	Y+3, r18	; 0x03
    3020:	8b 81       	ldd	r24, Y+3	; 0x03
    3022:	9c 81       	ldd	r25, Y+4	; 0x04
    3024:	81 30       	cpi	r24, 0x01	; 1
    3026:	91 05       	cpc	r25, r1
    3028:	01 f1       	breq	.+64     	; 0x306a <AVE_timer1Init+0x290>
    302a:	2b 81       	ldd	r18, Y+3	; 0x03
    302c:	3c 81       	ldd	r19, Y+4	; 0x04
    302e:	22 30       	cpi	r18, 0x02	; 2
    3030:	31 05       	cpc	r19, r1
    3032:	2c f4       	brge	.+10     	; 0x303e <AVE_timer1Init+0x264>
    3034:	8b 81       	ldd	r24, Y+3	; 0x03
    3036:	9c 81       	ldd	r25, Y+4	; 0x04
    3038:	00 97       	sbiw	r24, 0x00	; 0
    303a:	61 f0       	breq	.+24     	; 0x3054 <AVE_timer1Init+0x27a>
    303c:	36 c0       	rjmp	.+108    	; 0x30aa <AVE_timer1Init+0x2d0>
    303e:	2b 81       	ldd	r18, Y+3	; 0x03
    3040:	3c 81       	ldd	r19, Y+4	; 0x04
    3042:	22 30       	cpi	r18, 0x02	; 2
    3044:	31 05       	cpc	r19, r1
    3046:	e1 f0       	breq	.+56     	; 0x3080 <AVE_timer1Init+0x2a6>
    3048:	8b 81       	ldd	r24, Y+3	; 0x03
    304a:	9c 81       	ldd	r25, Y+4	; 0x04
    304c:	83 30       	cpi	r24, 0x03	; 3
    304e:	91 05       	cpc	r25, r1
    3050:	11 f1       	breq	.+68     	; 0x3096 <AVE_timer1Init+0x2bc>
    3052:	2b c0       	rjmp	.+86     	; 0x30aa <AVE_timer1Init+0x2d0>
	{

	case TIMER1_TOIE_OVF:
		globalInterruptManipulate(GLOBAL_INTERRUPT_ENABLE);
    3054:	81 e0       	ldi	r24, 0x01	; 1
    3056:	0e 94 37 38 	call	0x706e	; 0x706e <globalInterruptManipulate>
		SET_BIT(TIMER1_TIMSK,TIMSK_TOIE1);
    305a:	a9 e5       	ldi	r26, 0x59	; 89
    305c:	b0 e0       	ldi	r27, 0x00	; 0
    305e:	e9 e5       	ldi	r30, 0x59	; 89
    3060:	f0 e0       	ldi	r31, 0x00	; 0
    3062:	80 81       	ld	r24, Z
    3064:	84 60       	ori	r24, 0x04	; 4
    3066:	8c 93       	st	X, r24
    3068:	20 c0       	rjmp	.+64     	; 0x30aa <AVE_timer1Init+0x2d0>
		break;
	case TIMER1_OCIE1B_CTC:
		globalInterruptManipulate(GLOBAL_INTERRUPT_ENABLE);
    306a:	81 e0       	ldi	r24, 0x01	; 1
    306c:	0e 94 37 38 	call	0x706e	; 0x706e <globalInterruptManipulate>
		SET_BIT(TIMER1_TIMSK,TIMSK_OCIE1B);
    3070:	a9 e5       	ldi	r26, 0x59	; 89
    3072:	b0 e0       	ldi	r27, 0x00	; 0
    3074:	e9 e5       	ldi	r30, 0x59	; 89
    3076:	f0 e0       	ldi	r31, 0x00	; 0
    3078:	80 81       	ld	r24, Z
    307a:	88 60       	ori	r24, 0x08	; 8
    307c:	8c 93       	st	X, r24
    307e:	15 c0       	rjmp	.+42     	; 0x30aa <AVE_timer1Init+0x2d0>
		break;
	case TIMER1_OCIE1A_CTC:
		globalInterruptManipulate(GLOBAL_INTERRUPT_ENABLE);
    3080:	81 e0       	ldi	r24, 0x01	; 1
    3082:	0e 94 37 38 	call	0x706e	; 0x706e <globalInterruptManipulate>
		SET_BIT(TIMER1_TIMSK,TIMSK_OCIE1A);
    3086:	a9 e5       	ldi	r26, 0x59	; 89
    3088:	b0 e0       	ldi	r27, 0x00	; 0
    308a:	e9 e5       	ldi	r30, 0x59	; 89
    308c:	f0 e0       	ldi	r31, 0x00	; 0
    308e:	80 81       	ld	r24, Z
    3090:	80 61       	ori	r24, 0x10	; 16
    3092:	8c 93       	st	X, r24
    3094:	0a c0       	rjmp	.+20     	; 0x30aa <AVE_timer1Init+0x2d0>
		break;
	case TIMER1_TICIE1_ICU:
		globalInterruptManipulate(GLOBAL_INTERRUPT_ENABLE);
    3096:	81 e0       	ldi	r24, 0x01	; 1
    3098:	0e 94 37 38 	call	0x706e	; 0x706e <globalInterruptManipulate>
		SET_BIT(TIMER1_TIMSK,TIMSK_TICIE1);
    309c:	a9 e5       	ldi	r26, 0x59	; 89
    309e:	b0 e0       	ldi	r27, 0x00	; 0
    30a0:	e9 e5       	ldi	r30, 0x59	; 89
    30a2:	f0 e0       	ldi	r31, 0x00	; 0
    30a4:	80 81       	ld	r24, Z
    30a6:	80 62       	ori	r24, 0x20	; 32
    30a8:	8c 93       	st	X, r24


	}


}
    30aa:	28 96       	adiw	r28, 0x08	; 8
    30ac:	0f b6       	in	r0, 0x3f	; 63
    30ae:	f8 94       	cli
    30b0:	de bf       	out	0x3e, r29	; 62
    30b2:	0f be       	out	0x3f, r0	; 63
    30b4:	cd bf       	out	0x3d, r28	; 61
    30b6:	cf 91       	pop	r28
    30b8:	df 91       	pop	r29
    30ba:	08 95       	ret

000030bc <Ave_timer1PWM>:


void Ave_timer1PWM(uint8 dutyCycle,uint16 freq){
    30bc:	0f 93       	push	r16
    30be:	1f 93       	push	r17
    30c0:	df 93       	push	r29
    30c2:	cf 93       	push	r28
    30c4:	cd b7       	in	r28, 0x3d	; 61
    30c6:	de b7       	in	r29, 0x3e	; 62
    30c8:	29 97       	sbiw	r28, 0x09	; 9
    30ca:	0f b6       	in	r0, 0x3f	; 63
    30cc:	f8 94       	cli
    30ce:	de bf       	out	0x3e, r29	; 62
    30d0:	0f be       	out	0x3f, r0	; 63
    30d2:	cd bf       	out	0x3d, r28	; 61
    30d4:	8f 83       	std	Y+7, r24	; 0x07
    30d6:	79 87       	std	Y+9, r23	; 0x09
    30d8:	68 87       	std	Y+8, r22	; 0x08

	uint16 prescaler1 = 1024;
    30da:	80 e0       	ldi	r24, 0x00	; 0
    30dc:	94 e0       	ldi	r25, 0x04	; 4
    30de:	9e 83       	std	Y+6, r25	; 0x06
    30e0:	8d 83       	std	Y+5, r24	; 0x05
	uint32 top;
	//Prescalervar1();
	top=((8000000UL)/(freq*2*prescaler1));
    30e2:	28 85       	ldd	r18, Y+8	; 0x08
    30e4:	39 85       	ldd	r19, Y+9	; 0x09
    30e6:	8d 81       	ldd	r24, Y+5	; 0x05
    30e8:	9e 81       	ldd	r25, Y+6	; 0x06
    30ea:	ac 01       	movw	r20, r24
    30ec:	24 9f       	mul	r18, r20
    30ee:	c0 01       	movw	r24, r0
    30f0:	25 9f       	mul	r18, r21
    30f2:	90 0d       	add	r25, r0
    30f4:	34 9f       	mul	r19, r20
    30f6:	90 0d       	add	r25, r0
    30f8:	11 24       	eor	r1, r1
    30fa:	88 0f       	add	r24, r24
    30fc:	99 1f       	adc	r25, r25
    30fe:	9c 01       	movw	r18, r24
    3100:	40 e0       	ldi	r20, 0x00	; 0
    3102:	50 e0       	ldi	r21, 0x00	; 0
    3104:	80 e0       	ldi	r24, 0x00	; 0
    3106:	92 e1       	ldi	r25, 0x12	; 18
    3108:	aa e7       	ldi	r26, 0x7A	; 122
    310a:	b0 e0       	ldi	r27, 0x00	; 0
    310c:	bc 01       	movw	r22, r24
    310e:	cd 01       	movw	r24, r26
    3110:	0e 94 67 3b 	call	0x76ce	; 0x76ce <__udivmodsi4>
    3114:	da 01       	movw	r26, r20
    3116:	c9 01       	movw	r24, r18
    3118:	89 83       	std	Y+1, r24	; 0x01
    311a:	9a 83       	std	Y+2, r25	; 0x02
    311c:	ab 83       	std	Y+3, r26	; 0x03
    311e:	bc 83       	std	Y+4, r27	; 0x04
	TIMER1_ICR1L_16=top;
    3120:	e6 e4       	ldi	r30, 0x46	; 70
    3122:	f0 e0       	ldi	r31, 0x00	; 0
    3124:	89 81       	ldd	r24, Y+1	; 0x01
    3126:	9a 81       	ldd	r25, Y+2	; 0x02
    3128:	91 83       	std	Z+1, r25	; 0x01
    312a:	80 83       	st	Z, r24
	TIMER1_OCR1AL_16=(((uint32)dutyCycle*top)/100);
    312c:	0a e4       	ldi	r16, 0x4A	; 74
    312e:	10 e0       	ldi	r17, 0x00	; 0
    3130:	8f 81       	ldd	r24, Y+7	; 0x07
    3132:	88 2f       	mov	r24, r24
    3134:	90 e0       	ldi	r25, 0x00	; 0
    3136:	a0 e0       	ldi	r26, 0x00	; 0
    3138:	b0 e0       	ldi	r27, 0x00	; 0
    313a:	29 81       	ldd	r18, Y+1	; 0x01
    313c:	3a 81       	ldd	r19, Y+2	; 0x02
    313e:	4b 81       	ldd	r20, Y+3	; 0x03
    3140:	5c 81       	ldd	r21, Y+4	; 0x04
    3142:	bc 01       	movw	r22, r24
    3144:	cd 01       	movw	r24, r26
    3146:	0e 94 34 3b 	call	0x7668	; 0x7668 <__mulsi3>
    314a:	dc 01       	movw	r26, r24
    314c:	cb 01       	movw	r24, r22
    314e:	24 e6       	ldi	r18, 0x64	; 100
    3150:	30 e0       	ldi	r19, 0x00	; 0
    3152:	40 e0       	ldi	r20, 0x00	; 0
    3154:	50 e0       	ldi	r21, 0x00	; 0
    3156:	bc 01       	movw	r22, r24
    3158:	cd 01       	movw	r24, r26
    315a:	0e 94 67 3b 	call	0x76ce	; 0x76ce <__udivmodsi4>
    315e:	da 01       	movw	r26, r20
    3160:	c9 01       	movw	r24, r18
    3162:	f8 01       	movw	r30, r16
    3164:	91 83       	std	Z+1, r25	; 0x01
    3166:	80 83       	st	Z, r24
	AVE_timer1Start();
    3168:	0e 94 c1 18 	call	0x3182	; 0x3182 <AVE_timer1Start>
}
    316c:	29 96       	adiw	r28, 0x09	; 9
    316e:	0f b6       	in	r0, 0x3f	; 63
    3170:	f8 94       	cli
    3172:	de bf       	out	0x3e, r29	; 62
    3174:	0f be       	out	0x3f, r0	; 63
    3176:	cd bf       	out	0x3d, r28	; 61
    3178:	cf 91       	pop	r28
    317a:	df 91       	pop	r29
    317c:	1f 91       	pop	r17
    317e:	0f 91       	pop	r16
    3180:	08 95       	ret

00003182 <AVE_timer1Start>:



void AVE_timer1Start(void)
{
    3182:	df 93       	push	r29
    3184:	cf 93       	push	r28
    3186:	cd b7       	in	r28, 0x3d	; 61
    3188:	de b7       	in	r29, 0x3e	; 62


	TIMER1_TCCR1B &= (0xF8);//for clearing the three bits of the register that is responsible
    318a:	ae e4       	ldi	r26, 0x4E	; 78
    318c:	b0 e0       	ldi	r27, 0x00	; 0
    318e:	ee e4       	ldi	r30, 0x4E	; 78
    3190:	f0 e0       	ldi	r31, 0x00	; 0
    3192:	80 81       	ld	r24, Z
    3194:	88 7f       	andi	r24, 0xF8	; 248
    3196:	8c 93       	st	X, r24
	                        //setting the prescaler value to be able to set the new prescaler value correctly.
	TIMER1_TCCR1B |= TIMER1_prescalerValue;
    3198:	ae e4       	ldi	r26, 0x4E	; 78
    319a:	b0 e0       	ldi	r27, 0x00	; 0
    319c:	ee e4       	ldi	r30, 0x4E	; 78
    319e:	f0 e0       	ldi	r31, 0x00	; 0
    31a0:	90 81       	ld	r25, Z
    31a2:	80 91 cd 01 	lds	r24, 0x01CD
    31a6:	89 2b       	or	r24, r25
    31a8:	8c 93       	st	X, r24

	return ;
}
    31aa:	cf 91       	pop	r28
    31ac:	df 91       	pop	r29
    31ae:	08 95       	ret

000031b0 <AVE_timer1Stop>:


void AVE_timer1Stop(void)
{
    31b0:	df 93       	push	r29
    31b2:	cf 93       	push	r28
    31b4:	cd b7       	in	r28, 0x3d	; 61
    31b6:	de b7       	in	r29, 0x3e	; 62
	TIMER1_TCCR1B &= (0xF8);//clearing the prescaler value for the timer to stop
    31b8:	ae e4       	ldi	r26, 0x4E	; 78
    31ba:	b0 e0       	ldi	r27, 0x00	; 0
    31bc:	ee e4       	ldi	r30, 0x4E	; 78
    31be:	f0 e0       	ldi	r31, 0x00	; 0
    31c0:	80 81       	ld	r24, Z
    31c2:	88 7f       	andi	r24, 0xF8	; 248
    31c4:	8c 93       	st	X, r24
	TIMER1_TCNT1H = 0;//setting the counter value of the timer to be zero
    31c6:	ed e4       	ldi	r30, 0x4D	; 77
    31c8:	f0 e0       	ldi	r31, 0x00	; 0
    31ca:	10 82       	st	Z, r1
					//in order for the timer to work correctly next time the
				//Timer start is called .
	TIMER1_TCNT1L = 0;
    31cc:	ec e4       	ldi	r30, 0x4C	; 76
    31ce:	f0 e0       	ldi	r31, 0x00	; 0
    31d0:	10 82       	st	Z, r1

	return ;
}
    31d2:	cf 91       	pop	r28
    31d4:	df 91       	pop	r29
    31d6:	08 95       	ret

000031d8 <AVE_timer1Set>:
 *
 * for the user if he wants to start the timer by default with a specific value in it .
 *
 */
void AVE_timer1Set(uint16 value)
{
    31d8:	df 93       	push	r29
    31da:	cf 93       	push	r28
    31dc:	00 d0       	rcall	.+0      	; 0x31de <AVE_timer1Set+0x6>
    31de:	cd b7       	in	r28, 0x3d	; 61
    31e0:	de b7       	in	r29, 0x3e	; 62
    31e2:	9a 83       	std	Y+2, r25	; 0x02
    31e4:	89 83       	std	Y+1, r24	; 0x01

	TIMER1_TCNT1H = (uint8)(value>>8);
    31e6:	ed e4       	ldi	r30, 0x4D	; 77
    31e8:	f0 e0       	ldi	r31, 0x00	; 0
    31ea:	89 81       	ldd	r24, Y+1	; 0x01
    31ec:	9a 81       	ldd	r25, Y+2	; 0x02
    31ee:	89 2f       	mov	r24, r25
    31f0:	99 27       	eor	r25, r25
    31f2:	80 83       	st	Z, r24
	TIMER1_TCNT1L = (uint8)value;
    31f4:	ec e4       	ldi	r30, 0x4C	; 76
    31f6:	f0 e0       	ldi	r31, 0x00	; 0
    31f8:	89 81       	ldd	r24, Y+1	; 0x01
    31fa:	80 83       	st	Z, r24

	return ;

}
    31fc:	0f 90       	pop	r0
    31fe:	0f 90       	pop	r0
    3200:	cf 91       	pop	r28
    3202:	df 91       	pop	r29
    3204:	08 95       	ret

00003206 <AVE_TIMER1_setPreScalerValue>:
 * value for the time .
 */


static uint16 AVE_TIMER1_setPreScalerValue(void)
{
    3206:	df 93       	push	r29
    3208:	cf 93       	push	r28
    320a:	00 d0       	rcall	.+0      	; 0x320c <AVE_TIMER1_setPreScalerValue+0x6>
    320c:	cd b7       	in	r28, 0x3d	; 61
    320e:	de b7       	in	r29, 0x3e	; 62


	uint16 prescalerValue;

		if(TIMER1_prescalerValue==(0x01))
    3210:	80 91 cd 01 	lds	r24, 0x01CD
    3214:	81 30       	cpi	r24, 0x01	; 1
    3216:	29 f4       	brne	.+10     	; 0x3222 <AVE_TIMER1_setPreScalerValue+0x1c>
		{

			prescalerValue = 1;
    3218:	81 e0       	ldi	r24, 0x01	; 1
    321a:	90 e0       	ldi	r25, 0x00	; 0
    321c:	9a 83       	std	Y+2, r25	; 0x02
    321e:	89 83       	std	Y+1, r24	; 0x01
    3220:	1f c0       	rjmp	.+62     	; 0x3260 <AVE_TIMER1_setPreScalerValue+0x5a>
		}
		else if(TIMER1_prescalerValue==(0x02))
    3222:	80 91 cd 01 	lds	r24, 0x01CD
    3226:	82 30       	cpi	r24, 0x02	; 2
    3228:	29 f4       	brne	.+10     	; 0x3234 <AVE_TIMER1_setPreScalerValue+0x2e>
		{
			prescalerValue = 8;
    322a:	88 e0       	ldi	r24, 0x08	; 8
    322c:	90 e0       	ldi	r25, 0x00	; 0
    322e:	9a 83       	std	Y+2, r25	; 0x02
    3230:	89 83       	std	Y+1, r24	; 0x01
    3232:	16 c0       	rjmp	.+44     	; 0x3260 <AVE_TIMER1_setPreScalerValue+0x5a>
		}
		else if(TIMER1_prescalerValue==(0x03))
    3234:	80 91 cd 01 	lds	r24, 0x01CD
    3238:	83 30       	cpi	r24, 0x03	; 3
    323a:	29 f4       	brne	.+10     	; 0x3246 <AVE_TIMER1_setPreScalerValue+0x40>
		{
			prescalerValue = 64;
    323c:	80 e4       	ldi	r24, 0x40	; 64
    323e:	90 e0       	ldi	r25, 0x00	; 0
    3240:	9a 83       	std	Y+2, r25	; 0x02
    3242:	89 83       	std	Y+1, r24	; 0x01
    3244:	0d c0       	rjmp	.+26     	; 0x3260 <AVE_TIMER1_setPreScalerValue+0x5a>
		}
		else if(TIMER1_prescalerValue==(0x04))
    3246:	80 91 cd 01 	lds	r24, 0x01CD
    324a:	84 30       	cpi	r24, 0x04	; 4
    324c:	29 f4       	brne	.+10     	; 0x3258 <AVE_TIMER1_setPreScalerValue+0x52>
		{
			prescalerValue = 256;
    324e:	80 e0       	ldi	r24, 0x00	; 0
    3250:	91 e0       	ldi	r25, 0x01	; 1
    3252:	9a 83       	std	Y+2, r25	; 0x02
    3254:	89 83       	std	Y+1, r24	; 0x01
    3256:	04 c0       	rjmp	.+8      	; 0x3260 <AVE_TIMER1_setPreScalerValue+0x5a>
		}
		else
		{
			prescalerValue = 1024;
    3258:	80 e0       	ldi	r24, 0x00	; 0
    325a:	94 e0       	ldi	r25, 0x04	; 4
    325c:	9a 83       	std	Y+2, r25	; 0x02
    325e:	89 83       	std	Y+1, r24	; 0x01
		}

		return prescalerValue;
    3260:	89 81       	ldd	r24, Y+1	; 0x01
    3262:	9a 81       	ldd	r25, Y+2	; 0x02



}
    3264:	0f 90       	pop	r0
    3266:	0f 90       	pop	r0
    3268:	cf 91       	pop	r28
    326a:	df 91       	pop	r29
    326c:	08 95       	ret

0000326e <AVE_TIMER1_delayMs>:

void AVE_TIMER1_delayMs(uint32 delayValue,uint8 interruptMode)
{
    326e:	df 93       	push	r29
    3270:	cf 93       	push	r28
    3272:	cd b7       	in	r28, 0x3d	; 61
    3274:	de b7       	in	r29, 0x3e	; 62
    3276:	69 97       	sbiw	r28, 0x19	; 25
    3278:	0f b6       	in	r0, 0x3f	; 63
    327a:	f8 94       	cli
    327c:	de bf       	out	0x3e, r29	; 62
    327e:	0f be       	out	0x3f, r0	; 63
    3280:	cd bf       	out	0x3d, r28	; 61
    3282:	6d 8b       	std	Y+21, r22	; 0x15
    3284:	7e 8b       	std	Y+22, r23	; 0x16
    3286:	8f 8b       	std	Y+23, r24	; 0x17
    3288:	98 8f       	std	Y+24, r25	; 0x18
    328a:	49 8f       	std	Y+25, r20	; 0x19
	uint32 prescalerValue = AVE_TIMER1_setPreScalerValue();
    328c:	0e 94 03 19 	call	0x3206	; 0x3206 <AVE_TIMER1_setPreScalerValue>
    3290:	cc 01       	movw	r24, r24
    3292:	a0 e0       	ldi	r26, 0x00	; 0
    3294:	b0 e0       	ldi	r27, 0x00	; 0
    3296:	89 8b       	std	Y+17, r24	; 0x11
    3298:	9a 8b       	std	Y+18, r25	; 0x12
    329a:	ab 8b       	std	Y+19, r26	; 0x13
    329c:	bc 8b       	std	Y+20, r27	; 0x14
	 *
	 * setting the prescalerValue to use it in the equation of calculating the
	 * delay needed
	 */

	f32 tickTime = ((f32)prescalerValue/(f32)MC_FREQUENCY);
    329e:	69 89       	ldd	r22, Y+17	; 0x11
    32a0:	7a 89       	ldd	r23, Y+18	; 0x12
    32a2:	8b 89       	ldd	r24, Y+19	; 0x13
    32a4:	9c 89       	ldd	r25, Y+20	; 0x14
    32a6:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <__floatunsisf>
    32aa:	dc 01       	movw	r26, r24
    32ac:	cb 01       	movw	r24, r22
    32ae:	bc 01       	movw	r22, r24
    32b0:	cd 01       	movw	r24, r26
    32b2:	20 e0       	ldi	r18, 0x00	; 0
    32b4:	30 e0       	ldi	r19, 0x00	; 0
    32b6:	40 e0       	ldi	r20, 0x00	; 0
    32b8:	51 e4       	ldi	r21, 0x41	; 65
    32ba:	0e 94 3c 0c 	call	0x1878	; 0x1878 <__divsf3>
    32be:	dc 01       	movw	r26, r24
    32c0:	cb 01       	movw	r24, r22
    32c2:	8d 87       	std	Y+13, r24	; 0x0d
    32c4:	9e 87       	std	Y+14, r25	; 0x0e
    32c6:	af 87       	std	Y+15, r26	; 0x0f
    32c8:	b8 8b       	std	Y+16, r27	; 0x10

	uint32 timeOfOverFlow = 65536*tickTime;
    32ca:	6d 85       	ldd	r22, Y+13	; 0x0d
    32cc:	7e 85       	ldd	r23, Y+14	; 0x0e
    32ce:	8f 85       	ldd	r24, Y+15	; 0x0f
    32d0:	98 89       	ldd	r25, Y+16	; 0x10
    32d2:	20 e0       	ldi	r18, 0x00	; 0
    32d4:	30 e0       	ldi	r19, 0x00	; 0
    32d6:	40 e8       	ldi	r20, 0x80	; 128
    32d8:	57 e4       	ldi	r21, 0x47	; 71
    32da:	0e 94 42 0b 	call	0x1684	; 0x1684 <__mulsf3>
    32de:	dc 01       	movw	r26, r24
    32e0:	cb 01       	movw	r24, r22
    32e2:	bc 01       	movw	r22, r24
    32e4:	cd 01       	movw	r24, r26
    32e6:	0e 94 44 01 	call	0x288	; 0x288 <__fixunssfsi>
    32ea:	dc 01       	movw	r26, r24
    32ec:	cb 01       	movw	r24, r22
    32ee:	89 87       	std	Y+9, r24	; 0x09
    32f0:	9a 87       	std	Y+10, r25	; 0x0a
    32f2:	ab 87       	std	Y+11, r26	; 0x0b
    32f4:	bc 87       	std	Y+12, r27	; 0x0c

	uint32 numberOfOverFlows = (delayValue*1000)/timeOfOverFlow;
    32f6:	8d 89       	ldd	r24, Y+21	; 0x15
    32f8:	9e 89       	ldd	r25, Y+22	; 0x16
    32fa:	af 89       	ldd	r26, Y+23	; 0x17
    32fc:	b8 8d       	ldd	r27, Y+24	; 0x18
    32fe:	28 ee       	ldi	r18, 0xE8	; 232
    3300:	33 e0       	ldi	r19, 0x03	; 3
    3302:	40 e0       	ldi	r20, 0x00	; 0
    3304:	50 e0       	ldi	r21, 0x00	; 0
    3306:	bc 01       	movw	r22, r24
    3308:	cd 01       	movw	r24, r26
    330a:	0e 94 34 3b 	call	0x7668	; 0x7668 <__mulsi3>
    330e:	dc 01       	movw	r26, r24
    3310:	cb 01       	movw	r24, r22
    3312:	29 85       	ldd	r18, Y+9	; 0x09
    3314:	3a 85       	ldd	r19, Y+10	; 0x0a
    3316:	4b 85       	ldd	r20, Y+11	; 0x0b
    3318:	5c 85       	ldd	r21, Y+12	; 0x0c
    331a:	bc 01       	movw	r22, r24
    331c:	cd 01       	movw	r24, r26
    331e:	0e 94 67 3b 	call	0x76ce	; 0x76ce <__udivmodsi4>
    3322:	da 01       	movw	r26, r20
    3324:	c9 01       	movw	r24, r18
    3326:	8d 83       	std	Y+5, r24	; 0x05
    3328:	9e 83       	std	Y+6, r25	; 0x06
    332a:	af 83       	std	Y+7, r26	; 0x07
    332c:	b8 87       	std	Y+8, r27	; 0x08

	uint32 preload =65536-(delayValue*1000)%timeOfOverFlow;
    332e:	8d 89       	ldd	r24, Y+21	; 0x15
    3330:	9e 89       	ldd	r25, Y+22	; 0x16
    3332:	af 89       	ldd	r26, Y+23	; 0x17
    3334:	b8 8d       	ldd	r27, Y+24	; 0x18
    3336:	28 ee       	ldi	r18, 0xE8	; 232
    3338:	33 e0       	ldi	r19, 0x03	; 3
    333a:	40 e0       	ldi	r20, 0x00	; 0
    333c:	50 e0       	ldi	r21, 0x00	; 0
    333e:	bc 01       	movw	r22, r24
    3340:	cd 01       	movw	r24, r26
    3342:	0e 94 34 3b 	call	0x7668	; 0x7668 <__mulsi3>
    3346:	dc 01       	movw	r26, r24
    3348:	cb 01       	movw	r24, r22
    334a:	29 85       	ldd	r18, Y+9	; 0x09
    334c:	3a 85       	ldd	r19, Y+10	; 0x0a
    334e:	4b 85       	ldd	r20, Y+11	; 0x0b
    3350:	5c 85       	ldd	r21, Y+12	; 0x0c
    3352:	bc 01       	movw	r22, r24
    3354:	cd 01       	movw	r24, r26
    3356:	0e 94 67 3b 	call	0x76ce	; 0x76ce <__udivmodsi4>
    335a:	dc 01       	movw	r26, r24
    335c:	cb 01       	movw	r24, r22
    335e:	9c 01       	movw	r18, r24
    3360:	ad 01       	movw	r20, r26
    3362:	80 e0       	ldi	r24, 0x00	; 0
    3364:	90 e0       	ldi	r25, 0x00	; 0
    3366:	a1 e0       	ldi	r26, 0x01	; 1
    3368:	b0 e0       	ldi	r27, 0x00	; 0
    336a:	82 1b       	sub	r24, r18
    336c:	93 0b       	sbc	r25, r19
    336e:	a4 0b       	sbc	r26, r20
    3370:	b5 0b       	sbc	r27, r21
    3372:	89 83       	std	Y+1, r24	; 0x01
    3374:	9a 83       	std	Y+2, r25	; 0x02
    3376:	ab 83       	std	Y+3, r26	; 0x03
    3378:	bc 83       	std	Y+4, r27	; 0x04



	if(preload<65536)
    337a:	89 81       	ldd	r24, Y+1	; 0x01
    337c:	9a 81       	ldd	r25, Y+2	; 0x02
    337e:	ab 81       	ldd	r26, Y+3	; 0x03
    3380:	bc 81       	ldd	r27, Y+4	; 0x04
    3382:	80 30       	cpi	r24, 0x00	; 0
    3384:	20 e0       	ldi	r18, 0x00	; 0
    3386:	92 07       	cpc	r25, r18
    3388:	21 e0       	ldi	r18, 0x01	; 1
    338a:	a2 07       	cpc	r26, r18
    338c:	20 e0       	ldi	r18, 0x00	; 0
    338e:	b2 07       	cpc	r27, r18
    3390:	78 f4       	brcc	.+30     	; 0x33b0 <AVE_TIMER1_delayMs+0x142>
	{

		AVE_timer1Set(preload);
    3392:	89 81       	ldd	r24, Y+1	; 0x01
    3394:	9a 81       	ldd	r25, Y+2	; 0x02
    3396:	0e 94 ec 18 	call	0x31d8	; 0x31d8 <AVE_timer1Set>
		numberOfOverFlows++;
    339a:	8d 81       	ldd	r24, Y+5	; 0x05
    339c:	9e 81       	ldd	r25, Y+6	; 0x06
    339e:	af 81       	ldd	r26, Y+7	; 0x07
    33a0:	b8 85       	ldd	r27, Y+8	; 0x08
    33a2:	01 96       	adiw	r24, 0x01	; 1
    33a4:	a1 1d       	adc	r26, r1
    33a6:	b1 1d       	adc	r27, r1
    33a8:	8d 83       	std	Y+5, r24	; 0x05
    33aa:	9e 83       	std	Y+6, r25	; 0x06
    33ac:	af 83       	std	Y+7, r26	; 0x07
    33ae:	b8 87       	std	Y+8, r27	; 0x08

	}
	TIMER1_numberOfOverFlows = TIMER1_preservedNumberOfOverFlows = numberOfOverFlows;
    33b0:	8d 81       	ldd	r24, Y+5	; 0x05
    33b2:	9e 81       	ldd	r25, Y+6	; 0x06
    33b4:	af 81       	ldd	r26, Y+7	; 0x07
    33b6:	b8 85       	ldd	r27, Y+8	; 0x08
    33b8:	80 93 d6 01 	sts	0x01D6, r24
    33bc:	90 93 d7 01 	sts	0x01D7, r25
    33c0:	a0 93 d8 01 	sts	0x01D8, r26
    33c4:	b0 93 d9 01 	sts	0x01D9, r27
    33c8:	80 91 d6 01 	lds	r24, 0x01D6
    33cc:	90 91 d7 01 	lds	r25, 0x01D7
    33d0:	a0 91 d8 01 	lds	r26, 0x01D8
    33d4:	b0 91 d9 01 	lds	r27, 0x01D9
    33d8:	80 93 d2 01 	sts	0x01D2, r24
    33dc:	90 93 d3 01 	sts	0x01D3, r25
    33e0:	a0 93 d4 01 	sts	0x01D4, r26
    33e4:	b0 93 d5 01 	sts	0x01D5, r27

	AVE_timer1Start();
    33e8:	0e 94 c1 18 	call	0x3182	; 0x3182 <AVE_timer1Start>
	//if(numberOfOverFlows != 0)
	//{

	switch(interruptMode)
    33ec:	89 8d       	ldd	r24, Y+25	; 0x19
    33ee:	88 2f       	mov	r24, r24
    33f0:	90 e0       	ldi	r25, 0x00	; 0
    33f2:	84 30       	cpi	r24, 0x04	; 4
    33f4:	91 05       	cpc	r25, r1
    33f6:	e1 f0       	breq	.+56     	; 0x3430 <AVE_TIMER1_delayMs+0x1c2>
    33f8:	25 c0       	rjmp	.+74     	; 0x3444 <AVE_TIMER1_delayMs+0x1d6>
	case TIMER1_POLLING:
		while(numberOfOverFlows != 0)
			{


				while(!(TIMER1_TIFR&(1<<TIFR_TOV1)));
    33fa:	e8 e5       	ldi	r30, 0x58	; 88
    33fc:	f0 e0       	ldi	r31, 0x00	; 0
    33fe:	80 81       	ld	r24, Z
    3400:	88 2f       	mov	r24, r24
    3402:	90 e0       	ldi	r25, 0x00	; 0
    3404:	84 70       	andi	r24, 0x04	; 4
    3406:	90 70       	andi	r25, 0x00	; 0
    3408:	00 97       	sbiw	r24, 0x00	; 0
    340a:	b9 f3       	breq	.-18     	; 0x33fa <AVE_TIMER1_delayMs+0x18c>


					numberOfOverFlows--;
    340c:	8d 81       	ldd	r24, Y+5	; 0x05
    340e:	9e 81       	ldd	r25, Y+6	; 0x06
    3410:	af 81       	ldd	r26, Y+7	; 0x07
    3412:	b8 85       	ldd	r27, Y+8	; 0x08
    3414:	01 97       	sbiw	r24, 0x01	; 1
    3416:	a1 09       	sbc	r26, r1
    3418:	b1 09       	sbc	r27, r1
    341a:	8d 83       	std	Y+5, r24	; 0x05
    341c:	9e 83       	std	Y+6, r25	; 0x06
    341e:	af 83       	std	Y+7, r26	; 0x07
    3420:	b8 87       	std	Y+8, r27	; 0x08
					TIMER1_TIFR |= (1<<TIFR_TOV1);
    3422:	a8 e5       	ldi	r26, 0x58	; 88
    3424:	b0 e0       	ldi	r27, 0x00	; 0
    3426:	e8 e5       	ldi	r30, 0x58	; 88
    3428:	f0 e0       	ldi	r31, 0x00	; 0
    342a:	80 81       	ld	r24, Z
    342c:	84 60       	ori	r24, 0x04	; 4
    342e:	8c 93       	st	X, r24

	switch(interruptMode)
	{

	case TIMER1_POLLING:
		while(numberOfOverFlows != 0)
    3430:	8d 81       	ldd	r24, Y+5	; 0x05
    3432:	9e 81       	ldd	r25, Y+6	; 0x06
    3434:	af 81       	ldd	r26, Y+7	; 0x07
    3436:	b8 85       	ldd	r27, Y+8	; 0x08
    3438:	00 97       	sbiw	r24, 0x00	; 0
    343a:	a1 05       	cpc	r26, r1
    343c:	b1 05       	cpc	r27, r1
    343e:	e9 f6       	brne	.-70     	; 0x33fa <AVE_TIMER1_delayMs+0x18c>




			}
		AVE_timer1Stop();
    3440:	0e 94 d8 18 	call	0x31b0	; 0x31b0 <AVE_timer1Stop>


	return;


}
    3444:	69 96       	adiw	r28, 0x19	; 25
    3446:	0f b6       	in	r0, 0x3f	; 63
    3448:	f8 94       	cli
    344a:	de bf       	out	0x3e, r29	; 62
    344c:	0f be       	out	0x3f, r0	; 63
    344e:	cd bf       	out	0x3d, r28	; 61
    3450:	cf 91       	pop	r28
    3452:	df 91       	pop	r29
    3454:	08 95       	ret

00003456 <AVE_setCallBackFunction>:
 * will access the DIO that is why i haven't implemented here in the timer.c
 * file for the library of the timer to be independent of any other library !
 *
 */
void AVE_setCallBackFunction(void(*ptf)(void))
{
    3456:	df 93       	push	r29
    3458:	cf 93       	push	r28
    345a:	00 d0       	rcall	.+0      	; 0x345c <AVE_setCallBackFunction+0x6>
    345c:	cd b7       	in	r28, 0x3d	; 61
    345e:	de b7       	in	r29, 0x3e	; 62
    3460:	9a 83       	std	Y+2, r25	; 0x02
    3462:	89 83       	std	Y+1, r24	; 0x01

	TIMER1_ptOverFlowCallBackFunction = ptf;
    3464:	89 81       	ldd	r24, Y+1	; 0x01
    3466:	9a 81       	ldd	r25, Y+2	; 0x02
    3468:	90 93 db 01 	sts	0x01DB, r25
    346c:	80 93 da 01 	sts	0x01DA, r24
}
    3470:	0f 90       	pop	r0
    3472:	0f 90       	pop	r0
    3474:	cf 91       	pop	r28
    3476:	df 91       	pop	r29
    3478:	08 95       	ret

0000347a <__vector_9>:



ISR(INT8_TIMER1_OVF)
{
    347a:	1f 92       	push	r1
    347c:	0f 92       	push	r0
    347e:	0f b6       	in	r0, 0x3f	; 63
    3480:	0f 92       	push	r0
    3482:	11 24       	eor	r1, r1
    3484:	2f 93       	push	r18
    3486:	3f 93       	push	r19
    3488:	4f 93       	push	r20
    348a:	5f 93       	push	r21
    348c:	6f 93       	push	r22
    348e:	7f 93       	push	r23
    3490:	8f 93       	push	r24
    3492:	9f 93       	push	r25
    3494:	af 93       	push	r26
    3496:	bf 93       	push	r27
    3498:	ef 93       	push	r30
    349a:	ff 93       	push	r31
    349c:	df 93       	push	r29
    349e:	cf 93       	push	r28
    34a0:	cd b7       	in	r28, 0x3d	; 61
    34a2:	de b7       	in	r29, 0x3e	; 62


	if(TIMER1_numberOfOverFlows!=0)
    34a4:	80 91 d2 01 	lds	r24, 0x01D2
    34a8:	90 91 d3 01 	lds	r25, 0x01D3
    34ac:	a0 91 d4 01 	lds	r26, 0x01D4
    34b0:	b0 91 d5 01 	lds	r27, 0x01D5
    34b4:	00 97       	sbiw	r24, 0x00	; 0
    34b6:	a1 05       	cpc	r26, r1
    34b8:	b1 05       	cpc	r27, r1
    34ba:	a1 f0       	breq	.+40     	; 0x34e4 <__vector_9+0x6a>
	{
		TIMER1_numberOfOverFlows--;
    34bc:	80 91 d2 01 	lds	r24, 0x01D2
    34c0:	90 91 d3 01 	lds	r25, 0x01D3
    34c4:	a0 91 d4 01 	lds	r26, 0x01D4
    34c8:	b0 91 d5 01 	lds	r27, 0x01D5
    34cc:	01 97       	sbiw	r24, 0x01	; 1
    34ce:	a1 09       	sbc	r26, r1
    34d0:	b1 09       	sbc	r27, r1
    34d2:	80 93 d2 01 	sts	0x01D2, r24
    34d6:	90 93 d3 01 	sts	0x01D3, r25
    34da:	a0 93 d4 01 	sts	0x01D4, r26
    34de:	b0 93 d5 01 	sts	0x01D5, r27
    34e2:	15 c0       	rjmp	.+42     	; 0x350e <__vector_9+0x94>
	}
	else
	{
		TIMER1_numberOfOverFlows = TIMER1_preservedNumberOfOverFlows;
    34e4:	80 91 d6 01 	lds	r24, 0x01D6
    34e8:	90 91 d7 01 	lds	r25, 0x01D7
    34ec:	a0 91 d8 01 	lds	r26, 0x01D8
    34f0:	b0 91 d9 01 	lds	r27, 0x01D9
    34f4:	80 93 d2 01 	sts	0x01D2, r24
    34f8:	90 93 d3 01 	sts	0x01D3, r25
    34fc:	a0 93 d4 01 	sts	0x01D4, r26
    3500:	b0 93 d5 01 	sts	0x01D5, r27
		TIMER1_ptOverFlowCallBackFunction();
    3504:	e0 91 da 01 	lds	r30, 0x01DA
    3508:	f0 91 db 01 	lds	r31, 0x01DB
    350c:	09 95       	icall

	}

}
    350e:	cf 91       	pop	r28
    3510:	df 91       	pop	r29
    3512:	ff 91       	pop	r31
    3514:	ef 91       	pop	r30
    3516:	bf 91       	pop	r27
    3518:	af 91       	pop	r26
    351a:	9f 91       	pop	r25
    351c:	8f 91       	pop	r24
    351e:	7f 91       	pop	r23
    3520:	6f 91       	pop	r22
    3522:	5f 91       	pop	r21
    3524:	4f 91       	pop	r20
    3526:	3f 91       	pop	r19
    3528:	2f 91       	pop	r18
    352a:	0f 90       	pop	r0
    352c:	0f be       	out	0x3f, r0	; 63
    352e:	0f 90       	pop	r0
    3530:	1f 90       	pop	r1
    3532:	18 95       	reti

00003534 <AVE_TIMER1_CTC_delay_ms>:


void AVE_TIMER1_CTC_delay_ms(uint32 delayValue,uint8 ocPinMode)
{
    3534:	ef 92       	push	r14
    3536:	ff 92       	push	r15
    3538:	0f 93       	push	r16
    353a:	1f 93       	push	r17
    353c:	df 93       	push	r29
    353e:	cf 93       	push	r28
    3540:	cd b7       	in	r28, 0x3d	; 61
    3542:	de b7       	in	r29, 0x3e	; 62
    3544:	6b 97       	sbiw	r28, 0x1b	; 27
    3546:	0f b6       	in	r0, 0x3f	; 63
    3548:	f8 94       	cli
    354a:	de bf       	out	0x3e, r29	; 62
    354c:	0f be       	out	0x3f, r0	; 63
    354e:	cd bf       	out	0x3d, r28	; 61
    3550:	6d 8b       	std	Y+21, r22	; 0x15
    3552:	7e 8b       	std	Y+22, r23	; 0x16
    3554:	8f 8b       	std	Y+23, r24	; 0x17
    3556:	98 8f       	std	Y+24, r25	; 0x18
    3558:	49 8f       	std	Y+25, r20	; 0x19


	switch(ocPinMode)
    355a:	89 8d       	ldd	r24, Y+25	; 0x19
    355c:	28 2f       	mov	r18, r24
    355e:	30 e0       	ldi	r19, 0x00	; 0
    3560:	3b 8f       	std	Y+27, r19	; 0x1b
    3562:	2a 8f       	std	Y+26, r18	; 0x1a
    3564:	4a 8d       	ldd	r20, Y+26	; 0x1a
    3566:	5b 8d       	ldd	r21, Y+27	; 0x1b
    3568:	41 30       	cpi	r20, 0x01	; 1
    356a:	51 05       	cpc	r21, r1
    356c:	99 f1       	breq	.+102    	; 0x35d4 <AVE_TIMER1_CTC_delay_ms+0xa0>
    356e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3570:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3572:	82 30       	cpi	r24, 0x02	; 2
    3574:	91 05       	cpc	r25, r1
    3576:	34 f4       	brge	.+12     	; 0x3584 <AVE_TIMER1_CTC_delay_ms+0x50>
    3578:	2a 8d       	ldd	r18, Y+26	; 0x1a
    357a:	3b 8d       	ldd	r19, Y+27	; 0x1b
    357c:	21 15       	cp	r18, r1
    357e:	31 05       	cpc	r19, r1
    3580:	d1 f0       	breq	.+52     	; 0x35b6 <AVE_TIMER1_CTC_delay_ms+0x82>
    3582:	45 c0       	rjmp	.+138    	; 0x360e <AVE_TIMER1_CTC_delay_ms+0xda>
    3584:	4a 8d       	ldd	r20, Y+26	; 0x1a
    3586:	5b 8d       	ldd	r21, Y+27	; 0x1b
    3588:	42 30       	cpi	r20, 0x02	; 2
    358a:	51 05       	cpc	r21, r1
    358c:	91 f1       	breq	.+100    	; 0x35f2 <AVE_TIMER1_CTC_delay_ms+0xbe>
    358e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3590:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3592:	83 30       	cpi	r24, 0x03	; 3
    3594:	91 05       	cpc	r25, r1
    3596:	d9 f5       	brne	.+118    	; 0x360e <AVE_TIMER1_CTC_delay_ms+0xda>
	{


	case TIMER1_CTC_DISABLE:
		CLEAR_BIT(TIMER1_TCCR1A,TCCR1A_COM1A1);
    3598:	af e4       	ldi	r26, 0x4F	; 79
    359a:	b0 e0       	ldi	r27, 0x00	; 0
    359c:	ef e4       	ldi	r30, 0x4F	; 79
    359e:	f0 e0       	ldi	r31, 0x00	; 0
    35a0:	80 81       	ld	r24, Z
    35a2:	8f 77       	andi	r24, 0x7F	; 127
    35a4:	8c 93       	st	X, r24
		CLEAR_BIT(TIMER1_TCCR1A,TCCR1A_COM1A0);
    35a6:	af e4       	ldi	r26, 0x4F	; 79
    35a8:	b0 e0       	ldi	r27, 0x00	; 0
    35aa:	ef e4       	ldi	r30, 0x4F	; 79
    35ac:	f0 e0       	ldi	r31, 0x00	; 0
    35ae:	80 81       	ld	r24, Z
    35b0:	8f 7b       	andi	r24, 0xBF	; 191
    35b2:	8c 93       	st	X, r24
    35b4:	2c c0       	rjmp	.+88     	; 0x360e <AVE_TIMER1_CTC_delay_ms+0xda>
		break;
	case TIMER1_CTC_SET:
		SET_BIT(TIMER1_TCCR1A,TCCR1A_COM1A1);
    35b6:	af e4       	ldi	r26, 0x4F	; 79
    35b8:	b0 e0       	ldi	r27, 0x00	; 0
    35ba:	ef e4       	ldi	r30, 0x4F	; 79
    35bc:	f0 e0       	ldi	r31, 0x00	; 0
    35be:	80 81       	ld	r24, Z
    35c0:	80 68       	ori	r24, 0x80	; 128
    35c2:	8c 93       	st	X, r24
		SET_BIT(TIMER1_TCCR1A,TCCR1A_COM1A0);
    35c4:	af e4       	ldi	r26, 0x4F	; 79
    35c6:	b0 e0       	ldi	r27, 0x00	; 0
    35c8:	ef e4       	ldi	r30, 0x4F	; 79
    35ca:	f0 e0       	ldi	r31, 0x00	; 0
    35cc:	80 81       	ld	r24, Z
    35ce:	80 64       	ori	r24, 0x40	; 64
    35d0:	8c 93       	st	X, r24
    35d2:	1d c0       	rjmp	.+58     	; 0x360e <AVE_TIMER1_CTC_delay_ms+0xda>
		break;
	case TIMER1_CTC_CLEAR:
		SET_BIT(TIMER1_TCCR1A,TCCR1A_COM1A1);
    35d4:	af e4       	ldi	r26, 0x4F	; 79
    35d6:	b0 e0       	ldi	r27, 0x00	; 0
    35d8:	ef e4       	ldi	r30, 0x4F	; 79
    35da:	f0 e0       	ldi	r31, 0x00	; 0
    35dc:	80 81       	ld	r24, Z
    35de:	80 68       	ori	r24, 0x80	; 128
    35e0:	8c 93       	st	X, r24
		CLEAR_BIT(TIMER1_TCCR1A,TCCR1A_COM1A0);
    35e2:	af e4       	ldi	r26, 0x4F	; 79
    35e4:	b0 e0       	ldi	r27, 0x00	; 0
    35e6:	ef e4       	ldi	r30, 0x4F	; 79
    35e8:	f0 e0       	ldi	r31, 0x00	; 0
    35ea:	80 81       	ld	r24, Z
    35ec:	8f 7b       	andi	r24, 0xBF	; 191
    35ee:	8c 93       	st	X, r24
    35f0:	0e c0       	rjmp	.+28     	; 0x360e <AVE_TIMER1_CTC_delay_ms+0xda>
		break;
	case TIMER1_CTC_TOGGLE:
		CLEAR_BIT(TIMER1_TCCR1A,TCCR1A_COM1A1);
    35f2:	af e4       	ldi	r26, 0x4F	; 79
    35f4:	b0 e0       	ldi	r27, 0x00	; 0
    35f6:	ef e4       	ldi	r30, 0x4F	; 79
    35f8:	f0 e0       	ldi	r31, 0x00	; 0
    35fa:	80 81       	ld	r24, Z
    35fc:	8f 77       	andi	r24, 0x7F	; 127
    35fe:	8c 93       	st	X, r24
		SET_BIT(TIMER1_TCCR1A,TCCR1A_COM1A0);
    3600:	af e4       	ldi	r26, 0x4F	; 79
    3602:	b0 e0       	ldi	r27, 0x00	; 0
    3604:	ef e4       	ldi	r30, 0x4F	; 79
    3606:	f0 e0       	ldi	r31, 0x00	; 0
    3608:	80 81       	ld	r24, Z
    360a:	80 64       	ori	r24, 0x40	; 64
    360c:	8c 93       	st	X, r24
		break;
	}


	uint32 prescaleValue = AVE_TIMER1_setPreScalerValue();
    360e:	0e 94 03 19 	call	0x3206	; 0x3206 <AVE_TIMER1_setPreScalerValue>
    3612:	cc 01       	movw	r24, r24
    3614:	a0 e0       	ldi	r26, 0x00	; 0
    3616:	b0 e0       	ldi	r27, 0x00	; 0
    3618:	89 8b       	std	Y+17, r24	; 0x11
    361a:	9a 8b       	std	Y+18, r25	; 0x12
    361c:	ab 8b       	std	Y+19, r26	; 0x13
    361e:	bc 8b       	std	Y+20, r27	; 0x14
	//AVE_timer1SetAny(65535,SET_OCR1A);

	f32 tickTime = ((f32)prescaleValue/(f32)MC_FREQUENCY);
    3620:	69 89       	ldd	r22, Y+17	; 0x11
    3622:	7a 89       	ldd	r23, Y+18	; 0x12
    3624:	8b 89       	ldd	r24, Y+19	; 0x13
    3626:	9c 89       	ldd	r25, Y+20	; 0x14
    3628:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <__floatunsisf>
    362c:	dc 01       	movw	r26, r24
    362e:	cb 01       	movw	r24, r22
    3630:	bc 01       	movw	r22, r24
    3632:	cd 01       	movw	r24, r26
    3634:	20 e0       	ldi	r18, 0x00	; 0
    3636:	30 e0       	ldi	r19, 0x00	; 0
    3638:	40 e0       	ldi	r20, 0x00	; 0
    363a:	51 e4       	ldi	r21, 0x41	; 65
    363c:	0e 94 3c 0c 	call	0x1878	; 0x1878 <__divsf3>
    3640:	dc 01       	movw	r26, r24
    3642:	cb 01       	movw	r24, r22
    3644:	8d 87       	std	Y+13, r24	; 0x0d
    3646:	9e 87       	std	Y+14, r25	; 0x0e
    3648:	af 87       	std	Y+15, r26	; 0x0f
    364a:	b8 8b       	std	Y+16, r27	; 0x10

	uint32 timeOfOverFlow = (TIMER1_OCRValue+1)*tickTime;
    364c:	80 91 ce 01 	lds	r24, 0x01CE
    3650:	90 91 cf 01 	lds	r25, 0x01CF
    3654:	01 96       	adiw	r24, 0x01	; 1
    3656:	cc 01       	movw	r24, r24
    3658:	a0 e0       	ldi	r26, 0x00	; 0
    365a:	b0 e0       	ldi	r27, 0x00	; 0
    365c:	bc 01       	movw	r22, r24
    365e:	cd 01       	movw	r24, r26
    3660:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <__floatunsisf>
    3664:	dc 01       	movw	r26, r24
    3666:	cb 01       	movw	r24, r22
    3668:	bc 01       	movw	r22, r24
    366a:	cd 01       	movw	r24, r26
    366c:	2d 85       	ldd	r18, Y+13	; 0x0d
    366e:	3e 85       	ldd	r19, Y+14	; 0x0e
    3670:	4f 85       	ldd	r20, Y+15	; 0x0f
    3672:	58 89       	ldd	r21, Y+16	; 0x10
    3674:	0e 94 42 0b 	call	0x1684	; 0x1684 <__mulsf3>
    3678:	dc 01       	movw	r26, r24
    367a:	cb 01       	movw	r24, r22
    367c:	bc 01       	movw	r22, r24
    367e:	cd 01       	movw	r24, r26
    3680:	0e 94 44 01 	call	0x288	; 0x288 <__fixunssfsi>
    3684:	dc 01       	movw	r26, r24
    3686:	cb 01       	movw	r24, r22
    3688:	89 87       	std	Y+9, r24	; 0x09
    368a:	9a 87       	std	Y+10, r25	; 0x0a
    368c:	ab 87       	std	Y+11, r26	; 0x0b
    368e:	bc 87       	std	Y+12, r27	; 0x0c

	uint32 numberOfOverFlows = (delayValue*1000)/timeOfOverFlow;
    3690:	8d 89       	ldd	r24, Y+21	; 0x15
    3692:	9e 89       	ldd	r25, Y+22	; 0x16
    3694:	af 89       	ldd	r26, Y+23	; 0x17
    3696:	b8 8d       	ldd	r27, Y+24	; 0x18
    3698:	28 ee       	ldi	r18, 0xE8	; 232
    369a:	33 e0       	ldi	r19, 0x03	; 3
    369c:	40 e0       	ldi	r20, 0x00	; 0
    369e:	50 e0       	ldi	r21, 0x00	; 0
    36a0:	bc 01       	movw	r22, r24
    36a2:	cd 01       	movw	r24, r26
    36a4:	0e 94 34 3b 	call	0x7668	; 0x7668 <__mulsi3>
    36a8:	dc 01       	movw	r26, r24
    36aa:	cb 01       	movw	r24, r22
    36ac:	29 85       	ldd	r18, Y+9	; 0x09
    36ae:	3a 85       	ldd	r19, Y+10	; 0x0a
    36b0:	4b 85       	ldd	r20, Y+11	; 0x0b
    36b2:	5c 85       	ldd	r21, Y+12	; 0x0c
    36b4:	bc 01       	movw	r22, r24
    36b6:	cd 01       	movw	r24, r26
    36b8:	0e 94 67 3b 	call	0x76ce	; 0x76ce <__udivmodsi4>
    36bc:	da 01       	movw	r26, r20
    36be:	c9 01       	movw	r24, r18
    36c0:	8d 83       	std	Y+5, r24	; 0x05
    36c2:	9e 83       	std	Y+6, r25	; 0x06
    36c4:	af 83       	std	Y+7, r26	; 0x07
    36c6:	b8 87       	std	Y+8, r27	; 0x08

	uint32 preload =(TIMER1_OCRValue+1)-(delayValue*1000)%timeOfOverFlow;
    36c8:	80 91 ce 01 	lds	r24, 0x01CE
    36cc:	90 91 cf 01 	lds	r25, 0x01CF
    36d0:	01 96       	adiw	r24, 0x01	; 1
    36d2:	7c 01       	movw	r14, r24
    36d4:	00 e0       	ldi	r16, 0x00	; 0
    36d6:	10 e0       	ldi	r17, 0x00	; 0
    36d8:	8d 89       	ldd	r24, Y+21	; 0x15
    36da:	9e 89       	ldd	r25, Y+22	; 0x16
    36dc:	af 89       	ldd	r26, Y+23	; 0x17
    36de:	b8 8d       	ldd	r27, Y+24	; 0x18
    36e0:	28 ee       	ldi	r18, 0xE8	; 232
    36e2:	33 e0       	ldi	r19, 0x03	; 3
    36e4:	40 e0       	ldi	r20, 0x00	; 0
    36e6:	50 e0       	ldi	r21, 0x00	; 0
    36e8:	bc 01       	movw	r22, r24
    36ea:	cd 01       	movw	r24, r26
    36ec:	0e 94 34 3b 	call	0x7668	; 0x7668 <__mulsi3>
    36f0:	dc 01       	movw	r26, r24
    36f2:	cb 01       	movw	r24, r22
    36f4:	29 85       	ldd	r18, Y+9	; 0x09
    36f6:	3a 85       	ldd	r19, Y+10	; 0x0a
    36f8:	4b 85       	ldd	r20, Y+11	; 0x0b
    36fa:	5c 85       	ldd	r21, Y+12	; 0x0c
    36fc:	bc 01       	movw	r22, r24
    36fe:	cd 01       	movw	r24, r26
    3700:	0e 94 67 3b 	call	0x76ce	; 0x76ce <__udivmodsi4>
    3704:	dc 01       	movw	r26, r24
    3706:	cb 01       	movw	r24, r22
    3708:	a8 01       	movw	r20, r16
    370a:	97 01       	movw	r18, r14
    370c:	28 1b       	sub	r18, r24
    370e:	39 0b       	sbc	r19, r25
    3710:	4a 0b       	sbc	r20, r26
    3712:	5b 0b       	sbc	r21, r27
    3714:	da 01       	movw	r26, r20
    3716:	c9 01       	movw	r24, r18
    3718:	89 83       	std	Y+1, r24	; 0x01
    371a:	9a 83       	std	Y+2, r25	; 0x02
    371c:	ab 83       	std	Y+3, r26	; 0x03
    371e:	bc 83       	std	Y+4, r27	; 0x04




	if(preload<(TIMER1_OCRValue+1))
    3720:	80 91 ce 01 	lds	r24, 0x01CE
    3724:	90 91 cf 01 	lds	r25, 0x01CF
    3728:	01 96       	adiw	r24, 0x01	; 1
    372a:	9c 01       	movw	r18, r24
    372c:	40 e0       	ldi	r20, 0x00	; 0
    372e:	50 e0       	ldi	r21, 0x00	; 0
    3730:	89 81       	ldd	r24, Y+1	; 0x01
    3732:	9a 81       	ldd	r25, Y+2	; 0x02
    3734:	ab 81       	ldd	r26, Y+3	; 0x03
    3736:	bc 81       	ldd	r27, Y+4	; 0x04
    3738:	82 17       	cp	r24, r18
    373a:	93 07       	cpc	r25, r19
    373c:	a4 07       	cpc	r26, r20
    373e:	b5 07       	cpc	r27, r21
    3740:	78 f4       	brcc	.+30     	; 0x3760 <AVE_TIMER1_CTC_delay_ms+0x22c>
	{

		AVE_timer1Set(preload);
    3742:	89 81       	ldd	r24, Y+1	; 0x01
    3744:	9a 81       	ldd	r25, Y+2	; 0x02
    3746:	0e 94 ec 18 	call	0x31d8	; 0x31d8 <AVE_timer1Set>
		numberOfOverFlows++;
    374a:	8d 81       	ldd	r24, Y+5	; 0x05
    374c:	9e 81       	ldd	r25, Y+6	; 0x06
    374e:	af 81       	ldd	r26, Y+7	; 0x07
    3750:	b8 85       	ldd	r27, Y+8	; 0x08
    3752:	01 96       	adiw	r24, 0x01	; 1
    3754:	a1 1d       	adc	r26, r1
    3756:	b1 1d       	adc	r27, r1
    3758:	8d 83       	std	Y+5, r24	; 0x05
    375a:	9e 83       	std	Y+6, r25	; 0x06
    375c:	af 83       	std	Y+7, r26	; 0x07
    375e:	b8 87       	std	Y+8, r27	; 0x08

	}

	AVE_timer1Start();
    3760:	0e 94 c1 18 	call	0x3182	; 0x3182 <AVE_timer1Start>
    3764:	1b c0       	rjmp	.+54     	; 0x379c <AVE_TIMER1_CTC_delay_ms+0x268>


		while(numberOfOverFlows != 0)
		{

			while(!(TIMER1_TIFR&(1<<TIFR_OCF1A)));
    3766:	e8 e5       	ldi	r30, 0x58	; 88
    3768:	f0 e0       	ldi	r31, 0x00	; 0
    376a:	80 81       	ld	r24, Z
    376c:	88 2f       	mov	r24, r24
    376e:	90 e0       	ldi	r25, 0x00	; 0
    3770:	80 71       	andi	r24, 0x10	; 16
    3772:	90 70       	andi	r25, 0x00	; 0
    3774:	00 97       	sbiw	r24, 0x00	; 0
    3776:	b9 f3       	breq	.-18     	; 0x3766 <AVE_TIMER1_CTC_delay_ms+0x232>

				numberOfOverFlows--;
    3778:	8d 81       	ldd	r24, Y+5	; 0x05
    377a:	9e 81       	ldd	r25, Y+6	; 0x06
    377c:	af 81       	ldd	r26, Y+7	; 0x07
    377e:	b8 85       	ldd	r27, Y+8	; 0x08
    3780:	01 97       	sbiw	r24, 0x01	; 1
    3782:	a1 09       	sbc	r26, r1
    3784:	b1 09       	sbc	r27, r1
    3786:	8d 83       	std	Y+5, r24	; 0x05
    3788:	9e 83       	std	Y+6, r25	; 0x06
    378a:	af 83       	std	Y+7, r26	; 0x07
    378c:	b8 87       	std	Y+8, r27	; 0x08
				TIMER1_TIFR |= (1<<TIFR_OCF1A);
    378e:	a8 e5       	ldi	r26, 0x58	; 88
    3790:	b0 e0       	ldi	r27, 0x00	; 0
    3792:	e8 e5       	ldi	r30, 0x58	; 88
    3794:	f0 e0       	ldi	r31, 0x00	; 0
    3796:	80 81       	ld	r24, Z
    3798:	80 61       	ori	r24, 0x10	; 16
    379a:	8c 93       	st	X, r24
	}

	AVE_timer1Start();


		while(numberOfOverFlows != 0)
    379c:	8d 81       	ldd	r24, Y+5	; 0x05
    379e:	9e 81       	ldd	r25, Y+6	; 0x06
    37a0:	af 81       	ldd	r26, Y+7	; 0x07
    37a2:	b8 85       	ldd	r27, Y+8	; 0x08
    37a4:	00 97       	sbiw	r24, 0x00	; 0
    37a6:	a1 05       	cpc	r26, r1
    37a8:	b1 05       	cpc	r27, r1
    37aa:	e9 f6       	brne	.-70     	; 0x3766 <AVE_TIMER1_CTC_delay_ms+0x232>


		}


		AVE_timer1Stop();
    37ac:	0e 94 d8 18 	call	0x31b0	; 0x31b0 <AVE_timer1Stop>





}
    37b0:	6b 96       	adiw	r28, 0x1b	; 27
    37b2:	0f b6       	in	r0, 0x3f	; 63
    37b4:	f8 94       	cli
    37b6:	de bf       	out	0x3e, r29	; 62
    37b8:	0f be       	out	0x3f, r0	; 63
    37ba:	cd bf       	out	0x3d, r28	; 61
    37bc:	cf 91       	pop	r28
    37be:	df 91       	pop	r29
    37c0:	1f 91       	pop	r17
    37c2:	0f 91       	pop	r16
    37c4:	ff 90       	pop	r15
    37c6:	ef 90       	pop	r14
    37c8:	08 95       	ret

000037ca <AVE_MTIMER1_setCallBackPwm>:
 *
 * and the main is responsible for calling anything .
 */

void AVE_MTIMER1_setCallBackPwm(void(*ptf)(void))
{
    37ca:	df 93       	push	r29
    37cc:	cf 93       	push	r28
    37ce:	00 d0       	rcall	.+0      	; 0x37d0 <AVE_MTIMER1_setCallBackPwm+0x6>
    37d0:	cd b7       	in	r28, 0x3d	; 61
    37d2:	de b7       	in	r29, 0x3e	; 62
    37d4:	9a 83       	std	Y+2, r25	; 0x02
    37d6:	89 83       	std	Y+1, r24	; 0x01


	MTIMER1_ptToPwmFunction = ptf;
    37d8:	89 81       	ldd	r24, Y+1	; 0x01
    37da:	9a 81       	ldd	r25, Y+2	; 0x02
    37dc:	90 93 d1 01 	sts	0x01D1, r25
    37e0:	80 93 d0 01 	sts	0x01D0, r24

}
    37e4:	0f 90       	pop	r0
    37e6:	0f 90       	pop	r0
    37e8:	cf 91       	pop	r28
    37ea:	df 91       	pop	r29
    37ec:	08 95       	ret

000037ee <AVE_MTIMER1_swPwm>:




void AVE_MTIMER1_swPwm(uint32 frequency,uint8 dutyCycle)
{
    37ee:	df 93       	push	r29
    37f0:	cf 93       	push	r28
    37f2:	cd b7       	in	r28, 0x3d	; 61
    37f4:	de b7       	in	r29, 0x3e	; 62
    37f6:	2b 97       	sbiw	r28, 0x0b	; 11
    37f8:	0f b6       	in	r0, 0x3f	; 63
    37fa:	f8 94       	cli
    37fc:	de bf       	out	0x3e, r29	; 62
    37fe:	0f be       	out	0x3f, r0	; 63
    3800:	cd bf       	out	0x3d, r28	; 61
    3802:	6f 83       	std	Y+7, r22	; 0x07
    3804:	78 87       	std	Y+8, r23	; 0x08
    3806:	89 87       	std	Y+9, r24	; 0x09
    3808:	9a 87       	std	Y+10, r25	; 0x0a
    380a:	4b 87       	std	Y+11, r20	; 0x0b


	uint16 T = (1000/frequency);
    380c:	88 ee       	ldi	r24, 0xE8	; 232
    380e:	93 e0       	ldi	r25, 0x03	; 3
    3810:	a0 e0       	ldi	r26, 0x00	; 0
    3812:	b0 e0       	ldi	r27, 0x00	; 0
    3814:	2f 81       	ldd	r18, Y+7	; 0x07
    3816:	38 85       	ldd	r19, Y+8	; 0x08
    3818:	49 85       	ldd	r20, Y+9	; 0x09
    381a:	5a 85       	ldd	r21, Y+10	; 0x0a
    381c:	bc 01       	movw	r22, r24
    381e:	cd 01       	movw	r24, r26
    3820:	0e 94 67 3b 	call	0x76ce	; 0x76ce <__udivmodsi4>
    3824:	da 01       	movw	r26, r20
    3826:	c9 01       	movw	r24, r18
    3828:	9e 83       	std	Y+6, r25	; 0x06
    382a:	8d 83       	std	Y+5, r24	; 0x05

	uint16 TON = (dutyCycle*T)/100 ;
    382c:	8b 85       	ldd	r24, Y+11	; 0x0b
    382e:	28 2f       	mov	r18, r24
    3830:	30 e0       	ldi	r19, 0x00	; 0
    3832:	8d 81       	ldd	r24, Y+5	; 0x05
    3834:	9e 81       	ldd	r25, Y+6	; 0x06
    3836:	ac 01       	movw	r20, r24
    3838:	24 9f       	mul	r18, r20
    383a:	c0 01       	movw	r24, r0
    383c:	25 9f       	mul	r18, r21
    383e:	90 0d       	add	r25, r0
    3840:	34 9f       	mul	r19, r20
    3842:	90 0d       	add	r25, r0
    3844:	11 24       	eor	r1, r1
    3846:	24 e6       	ldi	r18, 0x64	; 100
    3848:	30 e0       	ldi	r19, 0x00	; 0
    384a:	b9 01       	movw	r22, r18
    384c:	0e 94 53 3b 	call	0x76a6	; 0x76a6 <__udivmodhi4>
    3850:	cb 01       	movw	r24, r22
    3852:	9c 83       	std	Y+4, r25	; 0x04
    3854:	8b 83       	std	Y+3, r24	; 0x03

	uint16 TOFF = T-TON;
    3856:	2d 81       	ldd	r18, Y+5	; 0x05
    3858:	3e 81       	ldd	r19, Y+6	; 0x06
    385a:	8b 81       	ldd	r24, Y+3	; 0x03
    385c:	9c 81       	ldd	r25, Y+4	; 0x04
    385e:	a9 01       	movw	r20, r18
    3860:	48 1b       	sub	r20, r24
    3862:	59 0b       	sbc	r21, r25
    3864:	ca 01       	movw	r24, r20
    3866:	9a 83       	std	Y+2, r25	; 0x02
    3868:	89 83       	std	Y+1, r24	; 0x01
	(MTIMER1_ptToPwmFunction)();
    386a:	e0 91 d0 01 	lds	r30, 0x01D0
    386e:	f0 91 d1 01 	lds	r31, 0x01D1
    3872:	09 95       	icall
	AVE_TIMER1_delayMs(TON,TIMER1_POLLING);
    3874:	8b 81       	ldd	r24, Y+3	; 0x03
    3876:	9c 81       	ldd	r25, Y+4	; 0x04
    3878:	cc 01       	movw	r24, r24
    387a:	a0 e0       	ldi	r26, 0x00	; 0
    387c:	b0 e0       	ldi	r27, 0x00	; 0
    387e:	bc 01       	movw	r22, r24
    3880:	cd 01       	movw	r24, r26
    3882:	44 e0       	ldi	r20, 0x04	; 4
    3884:	0e 94 37 19 	call	0x326e	; 0x326e <AVE_TIMER1_delayMs>
	(MTIMER1_ptToPwmFunction)();
    3888:	e0 91 d0 01 	lds	r30, 0x01D0
    388c:	f0 91 d1 01 	lds	r31, 0x01D1
    3890:	09 95       	icall
	AVE_TIMER1_delayMs(TOFF,TIMER1_POLLING);
    3892:	89 81       	ldd	r24, Y+1	; 0x01
    3894:	9a 81       	ldd	r25, Y+2	; 0x02
    3896:	cc 01       	movw	r24, r24
    3898:	a0 e0       	ldi	r26, 0x00	; 0
    389a:	b0 e0       	ldi	r27, 0x00	; 0
    389c:	bc 01       	movw	r22, r24
    389e:	cd 01       	movw	r24, r26
    38a0:	44 e0       	ldi	r20, 0x04	; 4
    38a2:	0e 94 37 19 	call	0x326e	; 0x326e <AVE_TIMER1_delayMs>



	return ;

}
    38a6:	2b 96       	adiw	r28, 0x0b	; 11
    38a8:	0f b6       	in	r0, 0x3f	; 63
    38aa:	f8 94       	cli
    38ac:	de bf       	out	0x3e, r29	; 62
    38ae:	0f be       	out	0x3f, r0	; 63
    38b0:	cd bf       	out	0x3d, r28	; 61
    38b2:	cf 91       	pop	r28
    38b4:	df 91       	pop	r29
    38b6:	08 95       	ret

000038b8 <AVE_setValueForCTC>:
 * to make the limit is OCR register or ICR register !
 */


static void AVE_setValueForCTC(uint8 registerName,uint8 value)
{
    38b8:	df 93       	push	r29
    38ba:	cf 93       	push	r28
    38bc:	00 d0       	rcall	.+0      	; 0x38be <AVE_setValueForCTC+0x6>
    38be:	cd b7       	in	r28, 0x3d	; 61
    38c0:	de b7       	in	r29, 0x3e	; 62
    38c2:	89 83       	std	Y+1, r24	; 0x01
    38c4:	6a 83       	std	Y+2, r22	; 0x02

	switch(registerName)
    38c6:	89 81       	ldd	r24, Y+1	; 0x01
    38c8:	88 2f       	mov	r24, r24
    38ca:	90 e0       	ldi	r25, 0x00	; 0
    38cc:	00 97       	sbiw	r24, 0x00	; 0
    38ce:	21 f4       	brne	.+8      	; 0x38d8 <AVE_setValueForCTC+0x20>
	{
	case TIMER2_SET_OCR:
		TIMER2_OCR2 = value;
    38d0:	e3 e4       	ldi	r30, 0x43	; 67
    38d2:	f0 e0       	ldi	r31, 0x00	; 0
    38d4:	8a 81       	ldd	r24, Y+2	; 0x02
    38d6:	80 83       	st	Z, r24
//		TIMER2_ = value;
//		break;
	}


}
    38d8:	0f 90       	pop	r0
    38da:	0f 90       	pop	r0
    38dc:	cf 91       	pop	r28
    38de:	df 91       	pop	r29
    38e0:	08 95       	ret

000038e2 <AVE_timer2Init>:



void AVE_timer2Init(uint8 mode,uint8 prescaler, uint8 initialValue, uint8 outputCompare, uint8 assynchronous, uint8 interruptMask)
{
    38e2:	ef 92       	push	r14
    38e4:	0f 93       	push	r16
    38e6:	df 93       	push	r29
    38e8:	cf 93       	push	r28
    38ea:	cd b7       	in	r28, 0x3d	; 61
    38ec:	de b7       	in	r29, 0x3e	; 62
    38ee:	2e 97       	sbiw	r28, 0x0e	; 14
    38f0:	0f b6       	in	r0, 0x3f	; 63
    38f2:	f8 94       	cli
    38f4:	de bf       	out	0x3e, r29	; 62
    38f6:	0f be       	out	0x3f, r0	; 63
    38f8:	cd bf       	out	0x3d, r28	; 61
    38fa:	89 83       	std	Y+1, r24	; 0x01
    38fc:	6a 83       	std	Y+2, r22	; 0x02
    38fe:	4b 83       	std	Y+3, r20	; 0x03
    3900:	2c 83       	std	Y+4, r18	; 0x04
    3902:	0d 83       	std	Y+5, r16	; 0x05
    3904:	ee 82       	std	Y+6, r14	; 0x06

	/*
	 * setting the operating mode of the TIMER2
	 */

	switch(mode)
    3906:	89 81       	ldd	r24, Y+1	; 0x01
    3908:	28 2f       	mov	r18, r24
    390a:	30 e0       	ldi	r19, 0x00	; 0
    390c:	3e 87       	std	Y+14, r19	; 0x0e
    390e:	2d 87       	std	Y+13, r18	; 0x0d
    3910:	8d 85       	ldd	r24, Y+13	; 0x0d
    3912:	9e 85       	ldd	r25, Y+14	; 0x0e
    3914:	81 30       	cpi	r24, 0x01	; 1
    3916:	91 05       	cpc	r25, r1
    3918:	09 f4       	brne	.+2      	; 0x391c <AVE_timer2Init+0x3a>
    391a:	4d c0       	rjmp	.+154    	; 0x39b6 <AVE_timer2Init+0xd4>
    391c:	2d 85       	ldd	r18, Y+13	; 0x0d
    391e:	3e 85       	ldd	r19, Y+14	; 0x0e
    3920:	22 30       	cpi	r18, 0x02	; 2
    3922:	31 05       	cpc	r19, r1
    3924:	2c f4       	brge	.+10     	; 0x3930 <AVE_timer2Init+0x4e>
    3926:	8d 85       	ldd	r24, Y+13	; 0x0d
    3928:	9e 85       	ldd	r25, Y+14	; 0x0e
    392a:	00 97       	sbiw	r24, 0x00	; 0
    392c:	61 f0       	breq	.+24     	; 0x3946 <AVE_timer2Init+0x64>
    392e:	51 c0       	rjmp	.+162    	; 0x39d2 <AVE_timer2Init+0xf0>
    3930:	2d 85       	ldd	r18, Y+13	; 0x0d
    3932:	3e 85       	ldd	r19, Y+14	; 0x0e
    3934:	22 30       	cpi	r18, 0x02	; 2
    3936:	31 05       	cpc	r19, r1
    3938:	79 f1       	breq	.+94     	; 0x3998 <AVE_timer2Init+0xb6>
    393a:	8d 85       	ldd	r24, Y+13	; 0x0d
    393c:	9e 85       	ldd	r25, Y+14	; 0x0e
    393e:	83 30       	cpi	r24, 0x03	; 3
    3940:	91 05       	cpc	r25, r1
    3942:	81 f0       	breq	.+32     	; 0x3964 <AVE_timer2Init+0x82>
    3944:	46 c0       	rjmp	.+140    	; 0x39d2 <AVE_timer2Init+0xf0>
	{

	case TIMER2_NORMAL_MODE:
		CLEAR_BIT(TIMER2_TCCR2,TCCR2_WGM20);
    3946:	a5 e4       	ldi	r26, 0x45	; 69
    3948:	b0 e0       	ldi	r27, 0x00	; 0
    394a:	e5 e4       	ldi	r30, 0x45	; 69
    394c:	f0 e0       	ldi	r31, 0x00	; 0
    394e:	80 81       	ld	r24, Z
    3950:	8f 7b       	andi	r24, 0xBF	; 191
    3952:	8c 93       	st	X, r24
		CLEAR_BIT(TIMER2_TCCR2,TCCR2_WGM21);
    3954:	a5 e4       	ldi	r26, 0x45	; 69
    3956:	b0 e0       	ldi	r27, 0x00	; 0
    3958:	e5 e4       	ldi	r30, 0x45	; 69
    395a:	f0 e0       	ldi	r31, 0x00	; 0
    395c:	80 81       	ld	r24, Z
    395e:	87 7f       	andi	r24, 0xF7	; 247
    3960:	8c 93       	st	X, r24
    3962:	37 c0       	rjmp	.+110    	; 0x39d2 <AVE_timer2Init+0xf0>
		break;
	case TIMER2_CTC:
		CLEAR_BIT(TIMER2_TCCR2,TCCR2_WGM20);
    3964:	a5 e4       	ldi	r26, 0x45	; 69
    3966:	b0 e0       	ldi	r27, 0x00	; 0
    3968:	e5 e4       	ldi	r30, 0x45	; 69
    396a:	f0 e0       	ldi	r31, 0x00	; 0
    396c:	80 81       	ld	r24, Z
    396e:	8f 7b       	andi	r24, 0xBF	; 191
    3970:	8c 93       	st	X, r24
		SET_BIT(TIMER2_TCCR2,TCCR2_WGM21);
    3972:	a5 e4       	ldi	r26, 0x45	; 69
    3974:	b0 e0       	ldi	r27, 0x00	; 0
    3976:	e5 e4       	ldi	r30, 0x45	; 69
    3978:	f0 e0       	ldi	r31, 0x00	; 0
    397a:	80 81       	ld	r24, Z
    397c:	88 60       	ori	r24, 0x08	; 8
    397e:	8c 93       	st	X, r24
		TIMER2OcrValue = outputCompare;
    3980:	8c 81       	ldd	r24, Y+4	; 0x04
    3982:	88 2f       	mov	r24, r24
    3984:	90 e0       	ldi	r25, 0x00	; 0
    3986:	90 93 df 01 	sts	0x01DF, r25
    398a:	80 93 de 01 	sts	0x01DE, r24
		AVE_setValueForCTC(TIMER2_SET_OCR,outputCompare);
    398e:	80 e0       	ldi	r24, 0x00	; 0
    3990:	6c 81       	ldd	r22, Y+4	; 0x04
    3992:	0e 94 5c 1c 	call	0x38b8	; 0x38b8 <AVE_setValueForCTC>
    3996:	1d c0       	rjmp	.+58     	; 0x39d2 <AVE_timer2Init+0xf0>

		break;
	case TIMER2_PWM_FAST:
		SET_BIT(TIMER2_TCCR2,TCCR2_WGM20);
    3998:	a5 e4       	ldi	r26, 0x45	; 69
    399a:	b0 e0       	ldi	r27, 0x00	; 0
    399c:	e5 e4       	ldi	r30, 0x45	; 69
    399e:	f0 e0       	ldi	r31, 0x00	; 0
    39a0:	80 81       	ld	r24, Z
    39a2:	80 64       	ori	r24, 0x40	; 64
    39a4:	8c 93       	st	X, r24
		SET_BIT(TIMER2_TCCR2,TCCR2_WGM21);
    39a6:	a5 e4       	ldi	r26, 0x45	; 69
    39a8:	b0 e0       	ldi	r27, 0x00	; 0
    39aa:	e5 e4       	ldi	r30, 0x45	; 69
    39ac:	f0 e0       	ldi	r31, 0x00	; 0
    39ae:	80 81       	ld	r24, Z
    39b0:	88 60       	ori	r24, 0x08	; 8
    39b2:	8c 93       	st	X, r24
    39b4:	0e c0       	rjmp	.+28     	; 0x39d2 <AVE_timer2Init+0xf0>
		break;
	case TIMER2_PWM_PHASECORRECT:
		SET_BIT(TIMER2_TCCR2,TCCR2_WGM20);
    39b6:	a5 e4       	ldi	r26, 0x45	; 69
    39b8:	b0 e0       	ldi	r27, 0x00	; 0
    39ba:	e5 e4       	ldi	r30, 0x45	; 69
    39bc:	f0 e0       	ldi	r31, 0x00	; 0
    39be:	80 81       	ld	r24, Z
    39c0:	80 64       	ori	r24, 0x40	; 64
    39c2:	8c 93       	st	X, r24
		CLEAR_BIT(TIMER2_TCCR2,TCCR2_WGM21);
    39c4:	a5 e4       	ldi	r26, 0x45	; 69
    39c6:	b0 e0       	ldi	r27, 0x00	; 0
    39c8:	e5 e4       	ldi	r30, 0x45	; 69
    39ca:	f0 e0       	ldi	r31, 0x00	; 0
    39cc:	80 81       	ld	r24, Z
    39ce:	87 7f       	andi	r24, 0xF7	; 247
    39d0:	8c 93       	st	X, r24
	 *
	 * setting the operating division factor for the clk
	 * which is called the prescaler ! .
	 */

	switch(prescaler)
    39d2:	8a 81       	ldd	r24, Y+2	; 0x02
    39d4:	28 2f       	mov	r18, r24
    39d6:	30 e0       	ldi	r19, 0x00	; 0
    39d8:	3c 87       	std	Y+12, r19	; 0x0c
    39da:	2b 87       	std	Y+11, r18	; 0x0b
    39dc:	8b 85       	ldd	r24, Y+11	; 0x0b
    39de:	9c 85       	ldd	r25, Y+12	; 0x0c
    39e0:	83 30       	cpi	r24, 0x03	; 3
    39e2:	91 05       	cpc	r25, r1
    39e4:	c9 f1       	breq	.+114    	; 0x3a58 <AVE_timer2Init+0x176>
    39e6:	2b 85       	ldd	r18, Y+11	; 0x0b
    39e8:	3c 85       	ldd	r19, Y+12	; 0x0c
    39ea:	24 30       	cpi	r18, 0x04	; 4
    39ec:	31 05       	cpc	r19, r1
    39ee:	7c f4       	brge	.+30     	; 0x3a0e <AVE_timer2Init+0x12c>
    39f0:	8b 85       	ldd	r24, Y+11	; 0x0b
    39f2:	9c 85       	ldd	r25, Y+12	; 0x0c
    39f4:	81 30       	cpi	r24, 0x01	; 1
    39f6:	91 05       	cpc	r25, r1
    39f8:	09 f1       	breq	.+66     	; 0x3a3c <AVE_timer2Init+0x15a>
    39fa:	2b 85       	ldd	r18, Y+11	; 0x0b
    39fc:	3c 85       	ldd	r19, Y+12	; 0x0c
    39fe:	22 30       	cpi	r18, 0x02	; 2
    3a00:	31 05       	cpc	r19, r1
    3a02:	1c f5       	brge	.+70     	; 0x3a4a <AVE_timer2Init+0x168>
    3a04:	8b 85       	ldd	r24, Y+11	; 0x0b
    3a06:	9c 85       	ldd	r25, Y+12	; 0x0c
    3a08:	00 97       	sbiw	r24, 0x00	; 0
    3a0a:	89 f0       	breq	.+34     	; 0x3a2e <AVE_timer2Init+0x14c>
    3a0c:	40 c0       	rjmp	.+128    	; 0x3a8e <AVE_timer2Init+0x1ac>
    3a0e:	2b 85       	ldd	r18, Y+11	; 0x0b
    3a10:	3c 85       	ldd	r19, Y+12	; 0x0c
    3a12:	25 30       	cpi	r18, 0x05	; 5
    3a14:	31 05       	cpc	r19, r1
    3a16:	71 f1       	breq	.+92     	; 0x3a74 <AVE_timer2Init+0x192>
    3a18:	8b 85       	ldd	r24, Y+11	; 0x0b
    3a1a:	9c 85       	ldd	r25, Y+12	; 0x0c
    3a1c:	85 30       	cpi	r24, 0x05	; 5
    3a1e:	91 05       	cpc	r25, r1
    3a20:	14 f1       	brlt	.+68     	; 0x3a66 <AVE_timer2Init+0x184>
    3a22:	2b 85       	ldd	r18, Y+11	; 0x0b
    3a24:	3c 85       	ldd	r19, Y+12	; 0x0c
    3a26:	26 30       	cpi	r18, 0x06	; 6
    3a28:	31 05       	cpc	r19, r1
    3a2a:	59 f1       	breq	.+86     	; 0x3a82 <AVE_timer2Init+0x1a0>
    3a2c:	30 c0       	rjmp	.+96     	; 0x3a8e <AVE_timer2Init+0x1ac>
	{
	case TIMER2_NOPRESCALER:
		TIMER2_prescalerValue = (0x01);
    3a2e:	81 e0       	ldi	r24, 0x01	; 1
    3a30:	90 e0       	ldi	r25, 0x00	; 0
    3a32:	90 93 dd 01 	sts	0x01DD, r25
    3a36:	80 93 dc 01 	sts	0x01DC, r24
    3a3a:	29 c0       	rjmp	.+82     	; 0x3a8e <AVE_timer2Init+0x1ac>
		break;
	case TIMER2_PRESCALER8:
		TIMER2_prescalerValue = (0x02);
    3a3c:	82 e0       	ldi	r24, 0x02	; 2
    3a3e:	90 e0       	ldi	r25, 0x00	; 0
    3a40:	90 93 dd 01 	sts	0x01DD, r25
    3a44:	80 93 dc 01 	sts	0x01DC, r24
    3a48:	22 c0       	rjmp	.+68     	; 0x3a8e <AVE_timer2Init+0x1ac>
		break;
	case TIMER2_PRESCALER32:
		TIMER2_prescalerValue = (0x03);
    3a4a:	83 e0       	ldi	r24, 0x03	; 3
    3a4c:	90 e0       	ldi	r25, 0x00	; 0
    3a4e:	90 93 dd 01 	sts	0x01DD, r25
    3a52:	80 93 dc 01 	sts	0x01DC, r24
    3a56:	1b c0       	rjmp	.+54     	; 0x3a8e <AVE_timer2Init+0x1ac>
		break;
	case TIMER2_PRESCALER64:
		TIMER2_prescalerValue = (0x04);
    3a58:	84 e0       	ldi	r24, 0x04	; 4
    3a5a:	90 e0       	ldi	r25, 0x00	; 0
    3a5c:	90 93 dd 01 	sts	0x01DD, r25
    3a60:	80 93 dc 01 	sts	0x01DC, r24
    3a64:	14 c0       	rjmp	.+40     	; 0x3a8e <AVE_timer2Init+0x1ac>
		break;
	case TIMER2_PRESCALER128:
		TIMER2_prescalerValue = (0x05);
    3a66:	85 e0       	ldi	r24, 0x05	; 5
    3a68:	90 e0       	ldi	r25, 0x00	; 0
    3a6a:	90 93 dd 01 	sts	0x01DD, r25
    3a6e:	80 93 dc 01 	sts	0x01DC, r24
    3a72:	0d c0       	rjmp	.+26     	; 0x3a8e <AVE_timer2Init+0x1ac>
		break;
	case TIMER2_PRESCALER256:
		TIMER2_prescalerValue = (0x06);
    3a74:	86 e0       	ldi	r24, 0x06	; 6
    3a76:	90 e0       	ldi	r25, 0x00	; 0
    3a78:	90 93 dd 01 	sts	0x01DD, r25
    3a7c:	80 93 dc 01 	sts	0x01DC, r24
    3a80:	06 c0       	rjmp	.+12     	; 0x3a8e <AVE_timer2Init+0x1ac>
		break;
	case TIMER2_PRESCALER1024:
		TIMER2_prescalerValue = (0x07);
    3a82:	87 e0       	ldi	r24, 0x07	; 7
    3a84:	90 e0       	ldi	r25, 0x00	; 0
    3a86:	90 93 dd 01 	sts	0x01DD, r25
    3a8a:	80 93 dc 01 	sts	0x01DC, r24
	 * setting the configuration of timer2 to see whether you are going to use
	 * the internal cpu clk
	 * or you are going to put an external clk to be used . !
	 */

	switch(assynchronous)
    3a8e:	8d 81       	ldd	r24, Y+5	; 0x05
    3a90:	28 2f       	mov	r18, r24
    3a92:	30 e0       	ldi	r19, 0x00	; 0
    3a94:	3a 87       	std	Y+10, r19	; 0x0a
    3a96:	29 87       	std	Y+9, r18	; 0x09
    3a98:	89 85       	ldd	r24, Y+9	; 0x09
    3a9a:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a9c:	00 97       	sbiw	r24, 0x00	; 0
    3a9e:	31 f0       	breq	.+12     	; 0x3aac <AVE_timer2Init+0x1ca>
    3aa0:	29 85       	ldd	r18, Y+9	; 0x09
    3aa2:	3a 85       	ldd	r19, Y+10	; 0x0a
    3aa4:	21 30       	cpi	r18, 0x01	; 1
    3aa6:	31 05       	cpc	r19, r1
    3aa8:	49 f0       	breq	.+18     	; 0x3abc <AVE_timer2Init+0x1da>
    3aaa:	0f c0       	rjmp	.+30     	; 0x3aca <AVE_timer2Init+0x1e8>
	{

	case TIMER2_INTERNAL_CLK:
		CLEAR_BIT(TIMER2_ASSR,ASSR_AS2);
    3aac:	a2 e4       	ldi	r26, 0x42	; 66
    3aae:	b0 e0       	ldi	r27, 0x00	; 0
    3ab0:	e2 e4       	ldi	r30, 0x42	; 66
    3ab2:	f0 e0       	ldi	r31, 0x00	; 0
    3ab4:	80 81       	ld	r24, Z
    3ab6:	87 7f       	andi	r24, 0xF7	; 247
    3ab8:	8c 93       	st	X, r24
    3aba:	07 c0       	rjmp	.+14     	; 0x3aca <AVE_timer2Init+0x1e8>
		break;
	case TIMER2_EXTERNAL_CLK:
		SET_BIT(TIMER2_ASSR,ASSR_AS2);
    3abc:	a2 e4       	ldi	r26, 0x42	; 66
    3abe:	b0 e0       	ldi	r27, 0x00	; 0
    3ac0:	e2 e4       	ldi	r30, 0x42	; 66
    3ac2:	f0 e0       	ldi	r31, 0x00	; 0
    3ac4:	80 81       	ld	r24, Z
    3ac6:	88 60       	ori	r24, 0x08	; 8
    3ac8:	8c 93       	st	X, r24
	/*
	 *
	 * setting the interrupt modes for timer2
	 */

	switch(interruptMask)
    3aca:	8e 81       	ldd	r24, Y+6	; 0x06
    3acc:	28 2f       	mov	r18, r24
    3ace:	30 e0       	ldi	r19, 0x00	; 0
    3ad0:	38 87       	std	Y+8, r19	; 0x08
    3ad2:	2f 83       	std	Y+7, r18	; 0x07
    3ad4:	8f 81       	ldd	r24, Y+7	; 0x07
    3ad6:	98 85       	ldd	r25, Y+8	; 0x08
    3ad8:	00 97       	sbiw	r24, 0x00	; 0
    3ada:	31 f0       	breq	.+12     	; 0x3ae8 <AVE_timer2Init+0x206>
    3adc:	2f 81       	ldd	r18, Y+7	; 0x07
    3ade:	38 85       	ldd	r19, Y+8	; 0x08
    3ae0:	21 30       	cpi	r18, 0x01	; 1
    3ae2:	31 05       	cpc	r19, r1
    3ae4:	61 f0       	breq	.+24     	; 0x3afe <AVE_timer2Init+0x21c>
    3ae6:	15 c0       	rjmp	.+42     	; 0x3b12 <AVE_timer2Init+0x230>
	{

	case TIMER2_TOIE2_OVF:
		globalInterruptManipulate(GLOBAL_INTERRUPT_ENABLE);
    3ae8:	81 e0       	ldi	r24, 0x01	; 1
    3aea:	0e 94 37 38 	call	0x706e	; 0x706e <globalInterruptManipulate>
		SET_BIT(TIMER2_TIMSK,TIMSK_TOIE2);
    3aee:	a9 e5       	ldi	r26, 0x59	; 89
    3af0:	b0 e0       	ldi	r27, 0x00	; 0
    3af2:	e9 e5       	ldi	r30, 0x59	; 89
    3af4:	f0 e0       	ldi	r31, 0x00	; 0
    3af6:	80 81       	ld	r24, Z
    3af8:	80 64       	ori	r24, 0x40	; 64
    3afa:	8c 93       	st	X, r24
    3afc:	0a c0       	rjmp	.+20     	; 0x3b12 <AVE_timer2Init+0x230>
		break;
	case TIMER2_OCIE2_CTC:
		globalInterruptManipulate(GLOBAL_INTERRUPT_ENABLE);
    3afe:	81 e0       	ldi	r24, 0x01	; 1
    3b00:	0e 94 37 38 	call	0x706e	; 0x706e <globalInterruptManipulate>
		SET_BIT(TIMER2_TIMSK,TIMSK_OCIE2);
    3b04:	a9 e5       	ldi	r26, 0x59	; 89
    3b06:	b0 e0       	ldi	r27, 0x00	; 0
    3b08:	e9 e5       	ldi	r30, 0x59	; 89
    3b0a:	f0 e0       	ldi	r31, 0x00	; 0
    3b0c:	80 81       	ld	r24, Z
    3b0e:	80 68       	ori	r24, 0x80	; 128
    3b10:	8c 93       	st	X, r24
	case TIMER2_POLLING:
		break;

	}

}
    3b12:	2e 96       	adiw	r28, 0x0e	; 14
    3b14:	0f b6       	in	r0, 0x3f	; 63
    3b16:	f8 94       	cli
    3b18:	de bf       	out	0x3e, r29	; 62
    3b1a:	0f be       	out	0x3f, r0	; 63
    3b1c:	cd bf       	out	0x3d, r28	; 61
    3b1e:	cf 91       	pop	r28
    3b20:	df 91       	pop	r29
    3b22:	0f 91       	pop	r16
    3b24:	ef 90       	pop	r14
    3b26:	08 95       	ret

00003b28 <AVE_TIMER2_mapPrescaler>:
 * and since i don't want the user to use this function at the application layer , that is why
 * i made it static !
 */

static uint16 AVE_TIMER2_mapPrescaler(void)
{
    3b28:	df 93       	push	r29
    3b2a:	cf 93       	push	r28
    3b2c:	00 d0       	rcall	.+0      	; 0x3b2e <AVE_TIMER2_mapPrescaler+0x6>
    3b2e:	cd b7       	in	r28, 0x3d	; 61
    3b30:	de b7       	in	r29, 0x3e	; 62
	uint16 prescalerValue;

	if(TIMER2_prescalerValue == (0x01))
    3b32:	80 91 dc 01 	lds	r24, 0x01DC
    3b36:	90 91 dd 01 	lds	r25, 0x01DD
    3b3a:	81 30       	cpi	r24, 0x01	; 1
    3b3c:	91 05       	cpc	r25, r1
    3b3e:	29 f4       	brne	.+10     	; 0x3b4a <AVE_TIMER2_mapPrescaler+0x22>
	{
		prescalerValue = 1;
    3b40:	81 e0       	ldi	r24, 0x01	; 1
    3b42:	90 e0       	ldi	r25, 0x00	; 0
    3b44:	9a 83       	std	Y+2, r25	; 0x02
    3b46:	89 83       	std	Y+1, r24	; 0x01
    3b48:	34 c0       	rjmp	.+104    	; 0x3bb2 <AVE_TIMER2_mapPrescaler+0x8a>
	}
	else if(TIMER2_prescalerValue == (0x02))
    3b4a:	80 91 dc 01 	lds	r24, 0x01DC
    3b4e:	90 91 dd 01 	lds	r25, 0x01DD
    3b52:	82 30       	cpi	r24, 0x02	; 2
    3b54:	91 05       	cpc	r25, r1
    3b56:	29 f4       	brne	.+10     	; 0x3b62 <AVE_TIMER2_mapPrescaler+0x3a>
	{
		prescalerValue = 8;
    3b58:	88 e0       	ldi	r24, 0x08	; 8
    3b5a:	90 e0       	ldi	r25, 0x00	; 0
    3b5c:	9a 83       	std	Y+2, r25	; 0x02
    3b5e:	89 83       	std	Y+1, r24	; 0x01
    3b60:	28 c0       	rjmp	.+80     	; 0x3bb2 <AVE_TIMER2_mapPrescaler+0x8a>
	}
	else if(TIMER2_prescalerValue == (0x03))
    3b62:	80 91 dc 01 	lds	r24, 0x01DC
    3b66:	90 91 dd 01 	lds	r25, 0x01DD
    3b6a:	83 30       	cpi	r24, 0x03	; 3
    3b6c:	91 05       	cpc	r25, r1
    3b6e:	29 f4       	brne	.+10     	; 0x3b7a <AVE_TIMER2_mapPrescaler+0x52>
	{
		prescalerValue = 32;
    3b70:	80 e2       	ldi	r24, 0x20	; 32
    3b72:	90 e0       	ldi	r25, 0x00	; 0
    3b74:	9a 83       	std	Y+2, r25	; 0x02
    3b76:	89 83       	std	Y+1, r24	; 0x01
    3b78:	1c c0       	rjmp	.+56     	; 0x3bb2 <AVE_TIMER2_mapPrescaler+0x8a>

	}
	else if(TIMER2_prescalerValue == (0x04))
    3b7a:	80 91 dc 01 	lds	r24, 0x01DC
    3b7e:	90 91 dd 01 	lds	r25, 0x01DD
    3b82:	84 30       	cpi	r24, 0x04	; 4
    3b84:	91 05       	cpc	r25, r1
    3b86:	29 f4       	brne	.+10     	; 0x3b92 <AVE_TIMER2_mapPrescaler+0x6a>
	{
		prescalerValue = 64;
    3b88:	80 e4       	ldi	r24, 0x40	; 64
    3b8a:	90 e0       	ldi	r25, 0x00	; 0
    3b8c:	9a 83       	std	Y+2, r25	; 0x02
    3b8e:	89 83       	std	Y+1, r24	; 0x01
    3b90:	10 c0       	rjmp	.+32     	; 0x3bb2 <AVE_TIMER2_mapPrescaler+0x8a>

	}
	else if(TIMER2_prescalerValue == (0x05))
    3b92:	80 91 dc 01 	lds	r24, 0x01DC
    3b96:	90 91 dd 01 	lds	r25, 0x01DD
    3b9a:	85 30       	cpi	r24, 0x05	; 5
    3b9c:	91 05       	cpc	r25, r1
    3b9e:	29 f4       	brne	.+10     	; 0x3baa <AVE_TIMER2_mapPrescaler+0x82>
	{
		prescalerValue = 256;
    3ba0:	80 e0       	ldi	r24, 0x00	; 0
    3ba2:	91 e0       	ldi	r25, 0x01	; 1
    3ba4:	9a 83       	std	Y+2, r25	; 0x02
    3ba6:	89 83       	std	Y+1, r24	; 0x01
    3ba8:	04 c0       	rjmp	.+8      	; 0x3bb2 <AVE_TIMER2_mapPrescaler+0x8a>
	}
	else
	{
		prescalerValue = 1024;
    3baa:	80 e0       	ldi	r24, 0x00	; 0
    3bac:	94 e0       	ldi	r25, 0x04	; 4
    3bae:	9a 83       	std	Y+2, r25	; 0x02
    3bb0:	89 83       	std	Y+1, r24	; 0x01
	}


	return prescalerValue;
    3bb2:	89 81       	ldd	r24, Y+1	; 0x01
    3bb4:	9a 81       	ldd	r25, Y+2	; 0x02

}
    3bb6:	0f 90       	pop	r0
    3bb8:	0f 90       	pop	r0
    3bba:	cf 91       	pop	r28
    3bbc:	df 91       	pop	r29
    3bbe:	08 95       	ret

00003bc0 <AVE_TIMER2_start>:
 * that is why i couldn't put the value of the prescaler directly inside the
 * register !
 */

void AVE_TIMER2_start(void)
{
    3bc0:	df 93       	push	r29
    3bc2:	cf 93       	push	r28
    3bc4:	cd b7       	in	r28, 0x3d	; 61
    3bc6:	de b7       	in	r29, 0x3e	; 62
	TIMER2_TCCR2 &= (0xF8);
    3bc8:	a5 e4       	ldi	r26, 0x45	; 69
    3bca:	b0 e0       	ldi	r27, 0x00	; 0
    3bcc:	e5 e4       	ldi	r30, 0x45	; 69
    3bce:	f0 e0       	ldi	r31, 0x00	; 0
    3bd0:	80 81       	ld	r24, Z
    3bd2:	88 7f       	andi	r24, 0xF8	; 248
    3bd4:	8c 93       	st	X, r24
	TIMER2_TCCR2 |= TIMER2_prescalerValue;
    3bd6:	a5 e4       	ldi	r26, 0x45	; 69
    3bd8:	b0 e0       	ldi	r27, 0x00	; 0
    3bda:	e5 e4       	ldi	r30, 0x45	; 69
    3bdc:	f0 e0       	ldi	r31, 0x00	; 0
    3bde:	20 81       	ld	r18, Z
    3be0:	80 91 dc 01 	lds	r24, 0x01DC
    3be4:	90 91 dd 01 	lds	r25, 0x01DD
    3be8:	82 2b       	or	r24, r18
    3bea:	8c 93       	st	X, r24
	return;
}
    3bec:	cf 91       	pop	r28
    3bee:	df 91       	pop	r29
    3bf0:	08 95       	ret

00003bf2 <AVE_TIMER2_set>:
 *
 *
 */

void AVE_TIMER2_set(uint8 value)
{
    3bf2:	df 93       	push	r29
    3bf4:	cf 93       	push	r28
    3bf6:	0f 92       	push	r0
    3bf8:	cd b7       	in	r28, 0x3d	; 61
    3bfa:	de b7       	in	r29, 0x3e	; 62
    3bfc:	89 83       	std	Y+1, r24	; 0x01
	TIMER2_TCNT2 = value;
    3bfe:	e4 e4       	ldi	r30, 0x44	; 68
    3c00:	f0 e0       	ldi	r31, 0x00	; 0
    3c02:	89 81       	ldd	r24, Y+1	; 0x01
    3c04:	80 83       	st	Z, r24
	return;
}
    3c06:	0f 90       	pop	r0
    3c08:	cf 91       	pop	r28
    3c0a:	df 91       	pop	r29
    3c0c:	08 95       	ret

00003c0e <AVE_TIMER2_stop>:
 * of the timer in order to make it stop
 *
 */

void AVE_TIMER2_stop(void)
{
    3c0e:	df 93       	push	r29
    3c10:	cf 93       	push	r28
    3c12:	cd b7       	in	r28, 0x3d	; 61
    3c14:	de b7       	in	r29, 0x3e	; 62

	TIMER2_TCCR2 &= (0xF8);
    3c16:	a5 e4       	ldi	r26, 0x45	; 69
    3c18:	b0 e0       	ldi	r27, 0x00	; 0
    3c1a:	e5 e4       	ldi	r30, 0x45	; 69
    3c1c:	f0 e0       	ldi	r31, 0x00	; 0
    3c1e:	80 81       	ld	r24, Z
    3c20:	88 7f       	andi	r24, 0xF8	; 248
    3c22:	8c 93       	st	X, r24
	AVE_TIMER2_set(0);
    3c24:	80 e0       	ldi	r24, 0x00	; 0
    3c26:	0e 94 f9 1d 	call	0x3bf2	; 0x3bf2 <AVE_TIMER2_set>
	return;
}
    3c2a:	cf 91       	pop	r28
    3c2c:	df 91       	pop	r29
    3c2e:	08 95       	ret

00003c30 <AVE_TIMER2_callBackFunctionSet>:


void AVE_TIMER2_callBackFunctionSet(void(*ptf)(void))
{
    3c30:	df 93       	push	r29
    3c32:	cf 93       	push	r28
    3c34:	00 d0       	rcall	.+0      	; 0x3c36 <AVE_TIMER2_callBackFunctionSet+0x6>
    3c36:	cd b7       	in	r28, 0x3d	; 61
    3c38:	de b7       	in	r29, 0x3e	; 62
    3c3a:	9a 83       	std	Y+2, r25	; 0x02
    3c3c:	89 83       	std	Y+1, r24	; 0x01

	TIMER2_ptCallBackFunction = ptf;
    3c3e:	89 81       	ldd	r24, Y+1	; 0x01
    3c40:	9a 81       	ldd	r25, Y+2	; 0x02
    3c42:	90 93 e9 01 	sts	0x01E9, r25
    3c46:	80 93 e8 01 	sts	0x01E8, r24
}
    3c4a:	0f 90       	pop	r0
    3c4c:	0f 90       	pop	r0
    3c4e:	cf 91       	pop	r28
    3c50:	df 91       	pop	r29
    3c52:	08 95       	ret

00003c54 <AVE_TIMER2_delay_ms>:
 */



void AVE_TIMER2_delay_ms(uint32 delayValue,uint8 interruptMode)
{
    3c54:	df 93       	push	r29
    3c56:	cf 93       	push	r28
    3c58:	cd b7       	in	r28, 0x3d	; 61
    3c5a:	de b7       	in	r29, 0x3e	; 62
    3c5c:	69 97       	sbiw	r28, 0x19	; 25
    3c5e:	0f b6       	in	r0, 0x3f	; 63
    3c60:	f8 94       	cli
    3c62:	de bf       	out	0x3e, r29	; 62
    3c64:	0f be       	out	0x3f, r0	; 63
    3c66:	cd bf       	out	0x3d, r28	; 61
    3c68:	6b 8b       	std	Y+19, r22	; 0x13
    3c6a:	7c 8b       	std	Y+20, r23	; 0x14
    3c6c:	8d 8b       	std	Y+21, r24	; 0x15
    3c6e:	9e 8b       	std	Y+22, r25	; 0x16
    3c70:	4f 8b       	std	Y+23, r20	; 0x17

	uint32 prescalerUsedValue = AVE_TIMER2_mapPrescaler();
    3c72:	0e 94 94 1d 	call	0x3b28	; 0x3b28 <AVE_TIMER2_mapPrescaler>
    3c76:	cc 01       	movw	r24, r24
    3c78:	a0 e0       	ldi	r26, 0x00	; 0
    3c7a:	b0 e0       	ldi	r27, 0x00	; 0
    3c7c:	8f 87       	std	Y+15, r24	; 0x0f
    3c7e:	98 8b       	std	Y+16, r25	; 0x10
    3c80:	a9 8b       	std	Y+17, r26	; 0x11
    3c82:	ba 8b       	std	Y+18, r27	; 0x12

	f32 tickTime = ((f32)prescalerUsedValue/MC_FREQUENCY);
    3c84:	6f 85       	ldd	r22, Y+15	; 0x0f
    3c86:	78 89       	ldd	r23, Y+16	; 0x10
    3c88:	89 89       	ldd	r24, Y+17	; 0x11
    3c8a:	9a 89       	ldd	r25, Y+18	; 0x12
    3c8c:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <__floatunsisf>
    3c90:	dc 01       	movw	r26, r24
    3c92:	cb 01       	movw	r24, r22
    3c94:	bc 01       	movw	r22, r24
    3c96:	cd 01       	movw	r24, r26
    3c98:	20 e0       	ldi	r18, 0x00	; 0
    3c9a:	30 e0       	ldi	r19, 0x00	; 0
    3c9c:	40 e0       	ldi	r20, 0x00	; 0
    3c9e:	51 e4       	ldi	r21, 0x41	; 65
    3ca0:	0e 94 3c 0c 	call	0x1878	; 0x1878 <__divsf3>
    3ca4:	dc 01       	movw	r26, r24
    3ca6:	cb 01       	movw	r24, r22
    3ca8:	8b 87       	std	Y+11, r24	; 0x0b
    3caa:	9c 87       	std	Y+12, r25	; 0x0c
    3cac:	ad 87       	std	Y+13, r26	; 0x0d
    3cae:	be 87       	std	Y+14, r27	; 0x0e

	uint32 timeOfOverFlow = 256*tickTime;
    3cb0:	6b 85       	ldd	r22, Y+11	; 0x0b
    3cb2:	7c 85       	ldd	r23, Y+12	; 0x0c
    3cb4:	8d 85       	ldd	r24, Y+13	; 0x0d
    3cb6:	9e 85       	ldd	r25, Y+14	; 0x0e
    3cb8:	20 e0       	ldi	r18, 0x00	; 0
    3cba:	30 e0       	ldi	r19, 0x00	; 0
    3cbc:	40 e8       	ldi	r20, 0x80	; 128
    3cbe:	53 e4       	ldi	r21, 0x43	; 67
    3cc0:	0e 94 42 0b 	call	0x1684	; 0x1684 <__mulsf3>
    3cc4:	dc 01       	movw	r26, r24
    3cc6:	cb 01       	movw	r24, r22
    3cc8:	bc 01       	movw	r22, r24
    3cca:	cd 01       	movw	r24, r26
    3ccc:	0e 94 44 01 	call	0x288	; 0x288 <__fixunssfsi>
    3cd0:	dc 01       	movw	r26, r24
    3cd2:	cb 01       	movw	r24, r22
    3cd4:	8f 83       	std	Y+7, r24	; 0x07
    3cd6:	98 87       	std	Y+8, r25	; 0x08
    3cd8:	a9 87       	std	Y+9, r26	; 0x09
    3cda:	ba 87       	std	Y+10, r27	; 0x0a

	uint32 numberOfOverFlows = (delayValue*1000)/timeOfOverFlow;
    3cdc:	8b 89       	ldd	r24, Y+19	; 0x13
    3cde:	9c 89       	ldd	r25, Y+20	; 0x14
    3ce0:	ad 89       	ldd	r26, Y+21	; 0x15
    3ce2:	be 89       	ldd	r27, Y+22	; 0x16
    3ce4:	28 ee       	ldi	r18, 0xE8	; 232
    3ce6:	33 e0       	ldi	r19, 0x03	; 3
    3ce8:	40 e0       	ldi	r20, 0x00	; 0
    3cea:	50 e0       	ldi	r21, 0x00	; 0
    3cec:	bc 01       	movw	r22, r24
    3cee:	cd 01       	movw	r24, r26
    3cf0:	0e 94 34 3b 	call	0x7668	; 0x7668 <__mulsi3>
    3cf4:	dc 01       	movw	r26, r24
    3cf6:	cb 01       	movw	r24, r22
    3cf8:	2f 81       	ldd	r18, Y+7	; 0x07
    3cfa:	38 85       	ldd	r19, Y+8	; 0x08
    3cfc:	49 85       	ldd	r20, Y+9	; 0x09
    3cfe:	5a 85       	ldd	r21, Y+10	; 0x0a
    3d00:	bc 01       	movw	r22, r24
    3d02:	cd 01       	movw	r24, r26
    3d04:	0e 94 67 3b 	call	0x76ce	; 0x76ce <__udivmodsi4>
    3d08:	da 01       	movw	r26, r20
    3d0a:	c9 01       	movw	r24, r18
    3d0c:	8b 83       	std	Y+3, r24	; 0x03
    3d0e:	9c 83       	std	Y+4, r25	; 0x04
    3d10:	ad 83       	std	Y+5, r26	; 0x05
    3d12:	be 83       	std	Y+6, r27	; 0x06

	uint16 preload = 256-((delayValue*1000)%timeOfOverFlow);
    3d14:	8b 89       	ldd	r24, Y+19	; 0x13
    3d16:	9c 89       	ldd	r25, Y+20	; 0x14
    3d18:	ad 89       	ldd	r26, Y+21	; 0x15
    3d1a:	be 89       	ldd	r27, Y+22	; 0x16
    3d1c:	28 ee       	ldi	r18, 0xE8	; 232
    3d1e:	33 e0       	ldi	r19, 0x03	; 3
    3d20:	40 e0       	ldi	r20, 0x00	; 0
    3d22:	50 e0       	ldi	r21, 0x00	; 0
    3d24:	bc 01       	movw	r22, r24
    3d26:	cd 01       	movw	r24, r26
    3d28:	0e 94 34 3b 	call	0x7668	; 0x7668 <__mulsi3>
    3d2c:	dc 01       	movw	r26, r24
    3d2e:	cb 01       	movw	r24, r22
    3d30:	2f 81       	ldd	r18, Y+7	; 0x07
    3d32:	38 85       	ldd	r19, Y+8	; 0x08
    3d34:	49 85       	ldd	r20, Y+9	; 0x09
    3d36:	5a 85       	ldd	r21, Y+10	; 0x0a
    3d38:	bc 01       	movw	r22, r24
    3d3a:	cd 01       	movw	r24, r26
    3d3c:	0e 94 67 3b 	call	0x76ce	; 0x76ce <__udivmodsi4>
    3d40:	dc 01       	movw	r26, r24
    3d42:	cb 01       	movw	r24, r22
    3d44:	9c 01       	movw	r18, r24
    3d46:	80 e0       	ldi	r24, 0x00	; 0
    3d48:	91 e0       	ldi	r25, 0x01	; 1
    3d4a:	82 1b       	sub	r24, r18
    3d4c:	93 0b       	sbc	r25, r19
    3d4e:	9a 83       	std	Y+2, r25	; 0x02
    3d50:	89 83       	std	Y+1, r24	; 0x01


	if(preload<256)
    3d52:	89 81       	ldd	r24, Y+1	; 0x01
    3d54:	9a 81       	ldd	r25, Y+2	; 0x02
    3d56:	8f 3f       	cpi	r24, 0xFF	; 255
    3d58:	91 05       	cpc	r25, r1
    3d5a:	09 f0       	breq	.+2      	; 0x3d5e <AVE_TIMER2_delay_ms+0x10a>
    3d5c:	78 f4       	brcc	.+30     	; 0x3d7c <AVE_TIMER2_delay_ms+0x128>
	{


		TIMER2_TCNT2 = preload;
    3d5e:	e4 e4       	ldi	r30, 0x44	; 68
    3d60:	f0 e0       	ldi	r31, 0x00	; 0
    3d62:	89 81       	ldd	r24, Y+1	; 0x01
    3d64:	80 83       	st	Z, r24
		numberOfOverFlows++;
    3d66:	8b 81       	ldd	r24, Y+3	; 0x03
    3d68:	9c 81       	ldd	r25, Y+4	; 0x04
    3d6a:	ad 81       	ldd	r26, Y+5	; 0x05
    3d6c:	be 81       	ldd	r27, Y+6	; 0x06
    3d6e:	01 96       	adiw	r24, 0x01	; 1
    3d70:	a1 1d       	adc	r26, r1
    3d72:	b1 1d       	adc	r27, r1
    3d74:	8b 83       	std	Y+3, r24	; 0x03
    3d76:	9c 83       	std	Y+4, r25	; 0x04
    3d78:	ad 83       	std	Y+5, r26	; 0x05
    3d7a:	be 83       	std	Y+6, r27	; 0x06
	}




	AVE_TIMER2_start();
    3d7c:	0e 94 e0 1d 	call	0x3bc0	; 0x3bc0 <AVE_TIMER2_start>


	switch(interruptMode)
    3d80:	8f 89       	ldd	r24, Y+23	; 0x17
    3d82:	28 2f       	mov	r18, r24
    3d84:	30 e0       	ldi	r19, 0x00	; 0
    3d86:	39 8f       	std	Y+25, r19	; 0x19
    3d88:	28 8f       	std	Y+24, r18	; 0x18
    3d8a:	88 8d       	ldd	r24, Y+24	; 0x18
    3d8c:	99 8d       	ldd	r25, Y+25	; 0x19
    3d8e:	99 23       	and	r25, r25
    3d90:	0c f4       	brge	.+2      	; 0x3d94 <AVE_TIMER2_delay_ms+0x140>
    3d92:	55 c0       	rjmp	.+170    	; 0x3e3e <AVE_TIMER2_delay_ms+0x1ea>
    3d94:	28 8d       	ldd	r18, Y+24	; 0x18
    3d96:	39 8d       	ldd	r19, Y+25	; 0x19
    3d98:	22 30       	cpi	r18, 0x02	; 2
    3d9a:	31 05       	cpc	r19, r1
    3d9c:	3c f0       	brlt	.+14     	; 0x3dac <AVE_TIMER2_delay_ms+0x158>
    3d9e:	88 8d       	ldd	r24, Y+24	; 0x18
    3da0:	99 8d       	ldd	r25, Y+25	; 0x19
    3da2:	82 30       	cpi	r24, 0x02	; 2
    3da4:	91 05       	cpc	r25, r1
    3da6:	09 f4       	brne	.+2      	; 0x3daa <AVE_TIMER2_delay_ms+0x156>
    3da8:	40 c0       	rjmp	.+128    	; 0x3e2a <AVE_TIMER2_delay_ms+0x1d6>
    3daa:	49 c0       	rjmp	.+146    	; 0x3e3e <AVE_TIMER2_delay_ms+0x1ea>
	{

	case TIMER2_OCIE2_CTC:
	case TIMER2_TOIE2_OVF:
		TIMER2_preservedNumberOfOverFlows = TIMER2_numberOfOverFlows = numberOfOverFlows;
    3dac:	8b 81       	ldd	r24, Y+3	; 0x03
    3dae:	9c 81       	ldd	r25, Y+4	; 0x04
    3db0:	ad 81       	ldd	r26, Y+5	; 0x05
    3db2:	be 81       	ldd	r27, Y+6	; 0x06
    3db4:	80 93 e0 01 	sts	0x01E0, r24
    3db8:	90 93 e1 01 	sts	0x01E1, r25
    3dbc:	a0 93 e2 01 	sts	0x01E2, r26
    3dc0:	b0 93 e3 01 	sts	0x01E3, r27
    3dc4:	80 91 e0 01 	lds	r24, 0x01E0
    3dc8:	90 91 e1 01 	lds	r25, 0x01E1
    3dcc:	a0 91 e2 01 	lds	r26, 0x01E2
    3dd0:	b0 91 e3 01 	lds	r27, 0x01E3
    3dd4:	80 93 e4 01 	sts	0x01E4, r24
    3dd8:	90 93 e5 01 	sts	0x01E5, r25
    3ddc:	a0 93 e6 01 	sts	0x01E6, r26
    3de0:	b0 93 e7 01 	sts	0x01E7, r27
    3de4:	2c c0       	rjmp	.+88     	; 0x3e3e <AVE_TIMER2_delay_ms+0x1ea>
		break;
	case TIMER2_POLLING:
		while(numberOfOverFlows)
			{

				if((TIMER2_TIFR<<TIFR_TOV2))
    3de6:	e8 e5       	ldi	r30, 0x58	; 88
    3de8:	f0 e0       	ldi	r31, 0x00	; 0
    3dea:	80 81       	ld	r24, Z
    3dec:	88 2f       	mov	r24, r24
    3dee:	90 e0       	ldi	r25, 0x00	; 0
    3df0:	00 24       	eor	r0, r0
    3df2:	96 95       	lsr	r25
    3df4:	87 95       	ror	r24
    3df6:	07 94       	ror	r0
    3df8:	96 95       	lsr	r25
    3dfa:	87 95       	ror	r24
    3dfc:	07 94       	ror	r0
    3dfe:	98 2f       	mov	r25, r24
    3e00:	80 2d       	mov	r24, r0
    3e02:	00 97       	sbiw	r24, 0x00	; 0
    3e04:	91 f0       	breq	.+36     	; 0x3e2a <AVE_TIMER2_delay_ms+0x1d6>
				{

					numberOfOverFlows--;
    3e06:	8b 81       	ldd	r24, Y+3	; 0x03
    3e08:	9c 81       	ldd	r25, Y+4	; 0x04
    3e0a:	ad 81       	ldd	r26, Y+5	; 0x05
    3e0c:	be 81       	ldd	r27, Y+6	; 0x06
    3e0e:	01 97       	sbiw	r24, 0x01	; 1
    3e10:	a1 09       	sbc	r26, r1
    3e12:	b1 09       	sbc	r27, r1
    3e14:	8b 83       	std	Y+3, r24	; 0x03
    3e16:	9c 83       	std	Y+4, r25	; 0x04
    3e18:	ad 83       	std	Y+5, r26	; 0x05
    3e1a:	be 83       	std	Y+6, r27	; 0x06
					TIMER2_TIFR |= (1<<TIFR_TOV2);
    3e1c:	a8 e5       	ldi	r26, 0x58	; 88
    3e1e:	b0 e0       	ldi	r27, 0x00	; 0
    3e20:	e8 e5       	ldi	r30, 0x58	; 88
    3e22:	f0 e0       	ldi	r31, 0x00	; 0
    3e24:	80 81       	ld	r24, Z
    3e26:	80 64       	ori	r24, 0x40	; 64
    3e28:	8c 93       	st	X, r24
	case TIMER2_OCIE2_CTC:
	case TIMER2_TOIE2_OVF:
		TIMER2_preservedNumberOfOverFlows = TIMER2_numberOfOverFlows = numberOfOverFlows;
		break;
	case TIMER2_POLLING:
		while(numberOfOverFlows)
    3e2a:	8b 81       	ldd	r24, Y+3	; 0x03
    3e2c:	9c 81       	ldd	r25, Y+4	; 0x04
    3e2e:	ad 81       	ldd	r26, Y+5	; 0x05
    3e30:	be 81       	ldd	r27, Y+6	; 0x06
    3e32:	00 97       	sbiw	r24, 0x00	; 0
    3e34:	a1 05       	cpc	r26, r1
    3e36:	b1 05       	cpc	r27, r1
    3e38:	b1 f6       	brne	.-84     	; 0x3de6 <AVE_TIMER2_delay_ms+0x192>
					TIMER2_TIFR |= (1<<TIFR_TOV2);
				}
			}


			AVE_TIMER2_stop();
    3e3a:	0e 94 07 1e 	call	0x3c0e	; 0x3c0e <AVE_TIMER2_stop>



return;

}
    3e3e:	69 96       	adiw	r28, 0x19	; 25
    3e40:	0f b6       	in	r0, 0x3f	; 63
    3e42:	f8 94       	cli
    3e44:	de bf       	out	0x3e, r29	; 62
    3e46:	0f be       	out	0x3f, r0	; 63
    3e48:	cd bf       	out	0x3d, r28	; 61
    3e4a:	cf 91       	pop	r28
    3e4c:	df 91       	pop	r29
    3e4e:	08 95       	ret

00003e50 <__vector_5>:

ISR(INT4_TIMER2_OVF)
{
    3e50:	1f 92       	push	r1
    3e52:	0f 92       	push	r0
    3e54:	0f b6       	in	r0, 0x3f	; 63
    3e56:	0f 92       	push	r0
    3e58:	11 24       	eor	r1, r1
    3e5a:	2f 93       	push	r18
    3e5c:	3f 93       	push	r19
    3e5e:	4f 93       	push	r20
    3e60:	5f 93       	push	r21
    3e62:	6f 93       	push	r22
    3e64:	7f 93       	push	r23
    3e66:	8f 93       	push	r24
    3e68:	9f 93       	push	r25
    3e6a:	af 93       	push	r26
    3e6c:	bf 93       	push	r27
    3e6e:	ef 93       	push	r30
    3e70:	ff 93       	push	r31
    3e72:	df 93       	push	r29
    3e74:	cf 93       	push	r28
    3e76:	cd b7       	in	r28, 0x3d	; 61
    3e78:	de b7       	in	r29, 0x3e	; 62


	if(TIMER2_numberOfOverFlows!=0)
    3e7a:	80 91 e0 01 	lds	r24, 0x01E0
    3e7e:	90 91 e1 01 	lds	r25, 0x01E1
    3e82:	a0 91 e2 01 	lds	r26, 0x01E2
    3e86:	b0 91 e3 01 	lds	r27, 0x01E3
    3e8a:	00 97       	sbiw	r24, 0x00	; 0
    3e8c:	a1 05       	cpc	r26, r1
    3e8e:	b1 05       	cpc	r27, r1
    3e90:	a1 f0       	breq	.+40     	; 0x3eba <__vector_5+0x6a>
	{
		TIMER2_numberOfOverFlows--;
    3e92:	80 91 e0 01 	lds	r24, 0x01E0
    3e96:	90 91 e1 01 	lds	r25, 0x01E1
    3e9a:	a0 91 e2 01 	lds	r26, 0x01E2
    3e9e:	b0 91 e3 01 	lds	r27, 0x01E3
    3ea2:	01 97       	sbiw	r24, 0x01	; 1
    3ea4:	a1 09       	sbc	r26, r1
    3ea6:	b1 09       	sbc	r27, r1
    3ea8:	80 93 e0 01 	sts	0x01E0, r24
    3eac:	90 93 e1 01 	sts	0x01E1, r25
    3eb0:	a0 93 e2 01 	sts	0x01E2, r26
    3eb4:	b0 93 e3 01 	sts	0x01E3, r27
    3eb8:	15 c0       	rjmp	.+42     	; 0x3ee4 <__vector_5+0x94>
	}
	else
	{
		TIMER2_numberOfOverFlows = TIMER2_preservedNumberOfOverFlows;
    3eba:	80 91 e4 01 	lds	r24, 0x01E4
    3ebe:	90 91 e5 01 	lds	r25, 0x01E5
    3ec2:	a0 91 e6 01 	lds	r26, 0x01E6
    3ec6:	b0 91 e7 01 	lds	r27, 0x01E7
    3eca:	80 93 e0 01 	sts	0x01E0, r24
    3ece:	90 93 e1 01 	sts	0x01E1, r25
    3ed2:	a0 93 e2 01 	sts	0x01E2, r26
    3ed6:	b0 93 e3 01 	sts	0x01E3, r27
		TIMER2_ptCallBackFunction();
    3eda:	e0 91 e8 01 	lds	r30, 0x01E8
    3ede:	f0 91 e9 01 	lds	r31, 0x01E9
    3ee2:	09 95       	icall

	}

}
    3ee4:	cf 91       	pop	r28
    3ee6:	df 91       	pop	r29
    3ee8:	ff 91       	pop	r31
    3eea:	ef 91       	pop	r30
    3eec:	bf 91       	pop	r27
    3eee:	af 91       	pop	r26
    3ef0:	9f 91       	pop	r25
    3ef2:	8f 91       	pop	r24
    3ef4:	7f 91       	pop	r23
    3ef6:	6f 91       	pop	r22
    3ef8:	5f 91       	pop	r21
    3efa:	4f 91       	pop	r20
    3efc:	3f 91       	pop	r19
    3efe:	2f 91       	pop	r18
    3f00:	0f 90       	pop	r0
    3f02:	0f be       	out	0x3f, r0	; 63
    3f04:	0f 90       	pop	r0
    3f06:	1f 90       	pop	r1
    3f08:	18 95       	reti

00003f0a <AVE_TIMER2_setCallBackFunction>:




void AVE_TIMER2_setCallBackFunction(void(*ptf)(void))
{
    3f0a:	df 93       	push	r29
    3f0c:	cf 93       	push	r28
    3f0e:	00 d0       	rcall	.+0      	; 0x3f10 <AVE_TIMER2_setCallBackFunction+0x6>
    3f10:	cd b7       	in	r28, 0x3d	; 61
    3f12:	de b7       	in	r29, 0x3e	; 62
    3f14:	9a 83       	std	Y+2, r25	; 0x02
    3f16:	89 83       	std	Y+1, r24	; 0x01

	TIMER2_ptCallBackFunction = ptf;
    3f18:	89 81       	ldd	r24, Y+1	; 0x01
    3f1a:	9a 81       	ldd	r25, Y+2	; 0x02
    3f1c:	90 93 e9 01 	sts	0x01E9, r25
    3f20:	80 93 e8 01 	sts	0x01E8, r24

	return;
}
    3f24:	0f 90       	pop	r0
    3f26:	0f 90       	pop	r0
    3f28:	cf 91       	pop	r28
    3f2a:	df 91       	pop	r29
    3f2c:	08 95       	ret

00003f2e <AVE_TIMER2_sw_pwm>:



void AVE_TIMER2_sw_pwm(uint8 dutyCycle,uint32 frequency)
{
    3f2e:	df 93       	push	r29
    3f30:	cf 93       	push	r28
    3f32:	cd b7       	in	r28, 0x3d	; 61
    3f34:	de b7       	in	r29, 0x3e	; 62
    3f36:	2b 97       	sbiw	r28, 0x0b	; 11
    3f38:	0f b6       	in	r0, 0x3f	; 63
    3f3a:	f8 94       	cli
    3f3c:	de bf       	out	0x3e, r29	; 62
    3f3e:	0f be       	out	0x3f, r0	; 63
    3f40:	cd bf       	out	0x3d, r28	; 61
    3f42:	8f 83       	std	Y+7, r24	; 0x07
    3f44:	48 87       	std	Y+8, r20	; 0x08
    3f46:	59 87       	std	Y+9, r21	; 0x09
    3f48:	6a 87       	std	Y+10, r22	; 0x0a
    3f4a:	7b 87       	std	Y+11, r23	; 0x0b


	uint16 T = (1000/frequency);
    3f4c:	88 ee       	ldi	r24, 0xE8	; 232
    3f4e:	93 e0       	ldi	r25, 0x03	; 3
    3f50:	a0 e0       	ldi	r26, 0x00	; 0
    3f52:	b0 e0       	ldi	r27, 0x00	; 0
    3f54:	28 85       	ldd	r18, Y+8	; 0x08
    3f56:	39 85       	ldd	r19, Y+9	; 0x09
    3f58:	4a 85       	ldd	r20, Y+10	; 0x0a
    3f5a:	5b 85       	ldd	r21, Y+11	; 0x0b
    3f5c:	bc 01       	movw	r22, r24
    3f5e:	cd 01       	movw	r24, r26
    3f60:	0e 94 67 3b 	call	0x76ce	; 0x76ce <__udivmodsi4>
    3f64:	da 01       	movw	r26, r20
    3f66:	c9 01       	movw	r24, r18
    3f68:	9e 83       	std	Y+6, r25	; 0x06
    3f6a:	8d 83       	std	Y+5, r24	; 0x05

	uint16 TON = (dutyCycle*T)/100 ;
    3f6c:	8f 81       	ldd	r24, Y+7	; 0x07
    3f6e:	28 2f       	mov	r18, r24
    3f70:	30 e0       	ldi	r19, 0x00	; 0
    3f72:	8d 81       	ldd	r24, Y+5	; 0x05
    3f74:	9e 81       	ldd	r25, Y+6	; 0x06
    3f76:	ac 01       	movw	r20, r24
    3f78:	24 9f       	mul	r18, r20
    3f7a:	c0 01       	movw	r24, r0
    3f7c:	25 9f       	mul	r18, r21
    3f7e:	90 0d       	add	r25, r0
    3f80:	34 9f       	mul	r19, r20
    3f82:	90 0d       	add	r25, r0
    3f84:	11 24       	eor	r1, r1
    3f86:	24 e6       	ldi	r18, 0x64	; 100
    3f88:	30 e0       	ldi	r19, 0x00	; 0
    3f8a:	b9 01       	movw	r22, r18
    3f8c:	0e 94 53 3b 	call	0x76a6	; 0x76a6 <__udivmodhi4>
    3f90:	cb 01       	movw	r24, r22
    3f92:	9c 83       	std	Y+4, r25	; 0x04
    3f94:	8b 83       	std	Y+3, r24	; 0x03

	uint16 TOFF = T-TON;
    3f96:	2d 81       	ldd	r18, Y+5	; 0x05
    3f98:	3e 81       	ldd	r19, Y+6	; 0x06
    3f9a:	8b 81       	ldd	r24, Y+3	; 0x03
    3f9c:	9c 81       	ldd	r25, Y+4	; 0x04
    3f9e:	a9 01       	movw	r20, r18
    3fa0:	48 1b       	sub	r20, r24
    3fa2:	59 0b       	sbc	r21, r25
    3fa4:	ca 01       	movw	r24, r20
    3fa6:	9a 83       	std	Y+2, r25	; 0x02
    3fa8:	89 83       	std	Y+1, r24	; 0x01
	(TIMER2_ptCallBackFunction)();
    3faa:	e0 91 e8 01 	lds	r30, 0x01E8
    3fae:	f0 91 e9 01 	lds	r31, 0x01E9
    3fb2:	09 95       	icall
	AVE_TIMER2_delay_ms(TON,TIMER2_POLLING);
    3fb4:	8b 81       	ldd	r24, Y+3	; 0x03
    3fb6:	9c 81       	ldd	r25, Y+4	; 0x04
    3fb8:	cc 01       	movw	r24, r24
    3fba:	a0 e0       	ldi	r26, 0x00	; 0
    3fbc:	b0 e0       	ldi	r27, 0x00	; 0
    3fbe:	bc 01       	movw	r22, r24
    3fc0:	cd 01       	movw	r24, r26
    3fc2:	42 e0       	ldi	r20, 0x02	; 2
    3fc4:	0e 94 2a 1e 	call	0x3c54	; 0x3c54 <AVE_TIMER2_delay_ms>
	(TIMER2_ptCallBackFunction)();
    3fc8:	e0 91 e8 01 	lds	r30, 0x01E8
    3fcc:	f0 91 e9 01 	lds	r31, 0x01E9
    3fd0:	09 95       	icall
	AVE_TIMER2_delay_ms(TOFF,TIMER2_POLLING);
    3fd2:	89 81       	ldd	r24, Y+1	; 0x01
    3fd4:	9a 81       	ldd	r25, Y+2	; 0x02
    3fd6:	cc 01       	movw	r24, r24
    3fd8:	a0 e0       	ldi	r26, 0x00	; 0
    3fda:	b0 e0       	ldi	r27, 0x00	; 0
    3fdc:	bc 01       	movw	r22, r24
    3fde:	cd 01       	movw	r24, r26
    3fe0:	42 e0       	ldi	r20, 0x02	; 2
    3fe2:	0e 94 2a 1e 	call	0x3c54	; 0x3c54 <AVE_TIMER2_delay_ms>



}
    3fe6:	2b 96       	adiw	r28, 0x0b	; 11
    3fe8:	0f b6       	in	r0, 0x3f	; 63
    3fea:	f8 94       	cli
    3fec:	de bf       	out	0x3e, r29	; 62
    3fee:	0f be       	out	0x3f, r0	; 63
    3ff0:	cd bf       	out	0x3d, r28	; 61
    3ff2:	cf 91       	pop	r28
    3ff4:	df 91       	pop	r29
    3ff6:	08 95       	ret

00003ff8 <AVE_TIMER2_CTC_delay_ms>:

void AVE_TIMER2_CTC_delay_ms(uint32 delayValue,uint8 ocPinState)
{
    3ff8:	0f 93       	push	r16
    3ffa:	1f 93       	push	r17
    3ffc:	df 93       	push	r29
    3ffe:	cf 93       	push	r28
    4000:	cd b7       	in	r28, 0x3d	; 61
    4002:	de b7       	in	r29, 0x3e	; 62
    4004:	69 97       	sbiw	r28, 0x19	; 25
    4006:	0f b6       	in	r0, 0x3f	; 63
    4008:	f8 94       	cli
    400a:	de bf       	out	0x3e, r29	; 62
    400c:	0f be       	out	0x3f, r0	; 63
    400e:	cd bf       	out	0x3d, r28	; 61
    4010:	6b 8b       	std	Y+19, r22	; 0x13
    4012:	7c 8b       	std	Y+20, r23	; 0x14
    4014:	8d 8b       	std	Y+21, r24	; 0x15
    4016:	9e 8b       	std	Y+22, r25	; 0x16
    4018:	4f 8b       	std	Y+23, r20	; 0x17



	switch(ocPinState)
    401a:	8f 89       	ldd	r24, Y+23	; 0x17
    401c:	28 2f       	mov	r18, r24
    401e:	30 e0       	ldi	r19, 0x00	; 0
    4020:	39 8f       	std	Y+25, r19	; 0x19
    4022:	28 8f       	std	Y+24, r18	; 0x18
    4024:	88 8d       	ldd	r24, Y+24	; 0x18
    4026:	99 8d       	ldd	r25, Y+25	; 0x19
    4028:	81 30       	cpi	r24, 0x01	; 1
    402a:	91 05       	cpc	r25, r1
    402c:	09 f4       	brne	.+2      	; 0x4030 <AVE_TIMER2_CTC_delay_ms+0x38>
    402e:	41 c0       	rjmp	.+130    	; 0x40b2 <AVE_TIMER2_CTC_delay_ms+0xba>
    4030:	28 8d       	ldd	r18, Y+24	; 0x18
    4032:	39 8d       	ldd	r19, Y+25	; 0x19
    4034:	22 30       	cpi	r18, 0x02	; 2
    4036:	31 05       	cpc	r19, r1
    4038:	2c f4       	brge	.+10     	; 0x4044 <AVE_TIMER2_CTC_delay_ms+0x4c>
    403a:	88 8d       	ldd	r24, Y+24	; 0x18
    403c:	99 8d       	ldd	r25, Y+25	; 0x19
    403e:	00 97       	sbiw	r24, 0x00	; 0
    4040:	49 f1       	breq	.+82     	; 0x4094 <AVE_TIMER2_CTC_delay_ms+0x9c>
    4042:	45 c0       	rjmp	.+138    	; 0x40ce <AVE_TIMER2_CTC_delay_ms+0xd6>
    4044:	28 8d       	ldd	r18, Y+24	; 0x18
    4046:	39 8d       	ldd	r19, Y+25	; 0x19
    4048:	22 30       	cpi	r18, 0x02	; 2
    404a:	31 05       	cpc	r19, r1
    404c:	a1 f0       	breq	.+40     	; 0x4076 <AVE_TIMER2_CTC_delay_ms+0x7e>
    404e:	88 8d       	ldd	r24, Y+24	; 0x18
    4050:	99 8d       	ldd	r25, Y+25	; 0x19
    4052:	83 30       	cpi	r24, 0x03	; 3
    4054:	91 05       	cpc	r25, r1
    4056:	d9 f5       	brne	.+118    	; 0x40ce <AVE_TIMER2_CTC_delay_ms+0xd6>
	{

	case TIMER2_CTC_OC2_DISCONNECTED:
		CLEAR_BIT(TIMER2_TCCR2,TCCR2_COM20);
    4058:	a5 e4       	ldi	r26, 0x45	; 69
    405a:	b0 e0       	ldi	r27, 0x00	; 0
    405c:	e5 e4       	ldi	r30, 0x45	; 69
    405e:	f0 e0       	ldi	r31, 0x00	; 0
    4060:	80 81       	ld	r24, Z
    4062:	8f 7e       	andi	r24, 0xEF	; 239
    4064:	8c 93       	st	X, r24
		CLEAR_BIT(TIMER2_TCCR2,TCCR2_COM21);
    4066:	a5 e4       	ldi	r26, 0x45	; 69
    4068:	b0 e0       	ldi	r27, 0x00	; 0
    406a:	e5 e4       	ldi	r30, 0x45	; 69
    406c:	f0 e0       	ldi	r31, 0x00	; 0
    406e:	80 81       	ld	r24, Z
    4070:	8f 7d       	andi	r24, 0xDF	; 223
    4072:	8c 93       	st	X, r24
    4074:	2c c0       	rjmp	.+88     	; 0x40ce <AVE_TIMER2_CTC_delay_ms+0xd6>
		break;
	case TIMER2_CTC_OC2_TOGGLE:
		SET_BIT(TIMER2_TCCR2,TCCR2_COM20);
    4076:	a5 e4       	ldi	r26, 0x45	; 69
    4078:	b0 e0       	ldi	r27, 0x00	; 0
    407a:	e5 e4       	ldi	r30, 0x45	; 69
    407c:	f0 e0       	ldi	r31, 0x00	; 0
    407e:	80 81       	ld	r24, Z
    4080:	80 61       	ori	r24, 0x10	; 16
    4082:	8c 93       	st	X, r24
		CLEAR_BIT(TIMER2_TCCR2,TCCR2_COM21);
    4084:	a5 e4       	ldi	r26, 0x45	; 69
    4086:	b0 e0       	ldi	r27, 0x00	; 0
    4088:	e5 e4       	ldi	r30, 0x45	; 69
    408a:	f0 e0       	ldi	r31, 0x00	; 0
    408c:	80 81       	ld	r24, Z
    408e:	8f 7d       	andi	r24, 0xDF	; 223
    4090:	8c 93       	st	X, r24
    4092:	1d c0       	rjmp	.+58     	; 0x40ce <AVE_TIMER2_CTC_delay_ms+0xd6>
		break;
	case TIMER2_CTC_OC2_SET:
		SET_BIT(TIMER2_TCCR2,TCCR2_COM20);
    4094:	a5 e4       	ldi	r26, 0x45	; 69
    4096:	b0 e0       	ldi	r27, 0x00	; 0
    4098:	e5 e4       	ldi	r30, 0x45	; 69
    409a:	f0 e0       	ldi	r31, 0x00	; 0
    409c:	80 81       	ld	r24, Z
    409e:	80 61       	ori	r24, 0x10	; 16
    40a0:	8c 93       	st	X, r24
		SET_BIT(TIMER2_TCCR2,TCCR2_COM21);
    40a2:	a5 e4       	ldi	r26, 0x45	; 69
    40a4:	b0 e0       	ldi	r27, 0x00	; 0
    40a6:	e5 e4       	ldi	r30, 0x45	; 69
    40a8:	f0 e0       	ldi	r31, 0x00	; 0
    40aa:	80 81       	ld	r24, Z
    40ac:	80 62       	ori	r24, 0x20	; 32
    40ae:	8c 93       	st	X, r24
    40b0:	0e c0       	rjmp	.+28     	; 0x40ce <AVE_TIMER2_CTC_delay_ms+0xd6>
		break;
	case TIMER2_CTC_OC2_CLEAR:
		CLEAR_BIT(TIMER2_TCCR2,TCCR2_COM20);
    40b2:	a5 e4       	ldi	r26, 0x45	; 69
    40b4:	b0 e0       	ldi	r27, 0x00	; 0
    40b6:	e5 e4       	ldi	r30, 0x45	; 69
    40b8:	f0 e0       	ldi	r31, 0x00	; 0
    40ba:	80 81       	ld	r24, Z
    40bc:	8f 7e       	andi	r24, 0xEF	; 239
    40be:	8c 93       	st	X, r24
		SET_BIT(TIMER2_TCCR2,TCCR2_COM21);
    40c0:	a5 e4       	ldi	r26, 0x45	; 69
    40c2:	b0 e0       	ldi	r27, 0x00	; 0
    40c4:	e5 e4       	ldi	r30, 0x45	; 69
    40c6:	f0 e0       	ldi	r31, 0x00	; 0
    40c8:	80 81       	ld	r24, Z
    40ca:	80 62       	ori	r24, 0x20	; 32
    40cc:	8c 93       	st	X, r24
		break;
	}

	uint32 prescalerUsedValue = AVE_TIMER2_mapPrescaler();
    40ce:	0e 94 94 1d 	call	0x3b28	; 0x3b28 <AVE_TIMER2_mapPrescaler>
    40d2:	cc 01       	movw	r24, r24
    40d4:	a0 e0       	ldi	r26, 0x00	; 0
    40d6:	b0 e0       	ldi	r27, 0x00	; 0
    40d8:	8f 87       	std	Y+15, r24	; 0x0f
    40da:	98 8b       	std	Y+16, r25	; 0x10
    40dc:	a9 8b       	std	Y+17, r26	; 0x11
    40de:	ba 8b       	std	Y+18, r27	; 0x12

	f32 tickTime = ((f32)prescalerUsedValue/MC_FREQUENCY);
    40e0:	6f 85       	ldd	r22, Y+15	; 0x0f
    40e2:	78 89       	ldd	r23, Y+16	; 0x10
    40e4:	89 89       	ldd	r24, Y+17	; 0x11
    40e6:	9a 89       	ldd	r25, Y+18	; 0x12
    40e8:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <__floatunsisf>
    40ec:	dc 01       	movw	r26, r24
    40ee:	cb 01       	movw	r24, r22
    40f0:	bc 01       	movw	r22, r24
    40f2:	cd 01       	movw	r24, r26
    40f4:	20 e0       	ldi	r18, 0x00	; 0
    40f6:	30 e0       	ldi	r19, 0x00	; 0
    40f8:	40 e0       	ldi	r20, 0x00	; 0
    40fa:	51 e4       	ldi	r21, 0x41	; 65
    40fc:	0e 94 3c 0c 	call	0x1878	; 0x1878 <__divsf3>
    4100:	dc 01       	movw	r26, r24
    4102:	cb 01       	movw	r24, r22
    4104:	8b 87       	std	Y+11, r24	; 0x0b
    4106:	9c 87       	std	Y+12, r25	; 0x0c
    4108:	ad 87       	std	Y+13, r26	; 0x0d
    410a:	be 87       	std	Y+14, r27	; 0x0e

	uint32 timeOfOverFlow = (TIMER2OcrValue+1)*tickTime;
    410c:	80 91 de 01 	lds	r24, 0x01DE
    4110:	90 91 df 01 	lds	r25, 0x01DF
    4114:	01 96       	adiw	r24, 0x01	; 1
    4116:	cc 01       	movw	r24, r24
    4118:	a0 e0       	ldi	r26, 0x00	; 0
    411a:	b0 e0       	ldi	r27, 0x00	; 0
    411c:	bc 01       	movw	r22, r24
    411e:	cd 01       	movw	r24, r26
    4120:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <__floatunsisf>
    4124:	dc 01       	movw	r26, r24
    4126:	cb 01       	movw	r24, r22
    4128:	bc 01       	movw	r22, r24
    412a:	cd 01       	movw	r24, r26
    412c:	2b 85       	ldd	r18, Y+11	; 0x0b
    412e:	3c 85       	ldd	r19, Y+12	; 0x0c
    4130:	4d 85       	ldd	r20, Y+13	; 0x0d
    4132:	5e 85       	ldd	r21, Y+14	; 0x0e
    4134:	0e 94 42 0b 	call	0x1684	; 0x1684 <__mulsf3>
    4138:	dc 01       	movw	r26, r24
    413a:	cb 01       	movw	r24, r22
    413c:	bc 01       	movw	r22, r24
    413e:	cd 01       	movw	r24, r26
    4140:	0e 94 44 01 	call	0x288	; 0x288 <__fixunssfsi>
    4144:	dc 01       	movw	r26, r24
    4146:	cb 01       	movw	r24, r22
    4148:	8f 83       	std	Y+7, r24	; 0x07
    414a:	98 87       	std	Y+8, r25	; 0x08
    414c:	a9 87       	std	Y+9, r26	; 0x09
    414e:	ba 87       	std	Y+10, r27	; 0x0a

	uint32 numberOfOverFlows = (delayValue*1000)/timeOfOverFlow;
    4150:	8b 89       	ldd	r24, Y+19	; 0x13
    4152:	9c 89       	ldd	r25, Y+20	; 0x14
    4154:	ad 89       	ldd	r26, Y+21	; 0x15
    4156:	be 89       	ldd	r27, Y+22	; 0x16
    4158:	28 ee       	ldi	r18, 0xE8	; 232
    415a:	33 e0       	ldi	r19, 0x03	; 3
    415c:	40 e0       	ldi	r20, 0x00	; 0
    415e:	50 e0       	ldi	r21, 0x00	; 0
    4160:	bc 01       	movw	r22, r24
    4162:	cd 01       	movw	r24, r26
    4164:	0e 94 34 3b 	call	0x7668	; 0x7668 <__mulsi3>
    4168:	dc 01       	movw	r26, r24
    416a:	cb 01       	movw	r24, r22
    416c:	2f 81       	ldd	r18, Y+7	; 0x07
    416e:	38 85       	ldd	r19, Y+8	; 0x08
    4170:	49 85       	ldd	r20, Y+9	; 0x09
    4172:	5a 85       	ldd	r21, Y+10	; 0x0a
    4174:	bc 01       	movw	r22, r24
    4176:	cd 01       	movw	r24, r26
    4178:	0e 94 67 3b 	call	0x76ce	; 0x76ce <__udivmodsi4>
    417c:	da 01       	movw	r26, r20
    417e:	c9 01       	movw	r24, r18
    4180:	8b 83       	std	Y+3, r24	; 0x03
    4182:	9c 83       	std	Y+4, r25	; 0x04
    4184:	ad 83       	std	Y+5, r26	; 0x05
    4186:	be 83       	std	Y+6, r27	; 0x06

	uint16 preload = (TIMER2OcrValue+1)-((delayValue*1000)%timeOfOverFlow);
    4188:	00 91 de 01 	lds	r16, 0x01DE
    418c:	10 91 df 01 	lds	r17, 0x01DF
    4190:	8b 89       	ldd	r24, Y+19	; 0x13
    4192:	9c 89       	ldd	r25, Y+20	; 0x14
    4194:	ad 89       	ldd	r26, Y+21	; 0x15
    4196:	be 89       	ldd	r27, Y+22	; 0x16
    4198:	28 ee       	ldi	r18, 0xE8	; 232
    419a:	33 e0       	ldi	r19, 0x03	; 3
    419c:	40 e0       	ldi	r20, 0x00	; 0
    419e:	50 e0       	ldi	r21, 0x00	; 0
    41a0:	bc 01       	movw	r22, r24
    41a2:	cd 01       	movw	r24, r26
    41a4:	0e 94 34 3b 	call	0x7668	; 0x7668 <__mulsi3>
    41a8:	dc 01       	movw	r26, r24
    41aa:	cb 01       	movw	r24, r22
    41ac:	2f 81       	ldd	r18, Y+7	; 0x07
    41ae:	38 85       	ldd	r19, Y+8	; 0x08
    41b0:	49 85       	ldd	r20, Y+9	; 0x09
    41b2:	5a 85       	ldd	r21, Y+10	; 0x0a
    41b4:	bc 01       	movw	r22, r24
    41b6:	cd 01       	movw	r24, r26
    41b8:	0e 94 67 3b 	call	0x76ce	; 0x76ce <__udivmodsi4>
    41bc:	dc 01       	movw	r26, r24
    41be:	cb 01       	movw	r24, r22
    41c0:	98 01       	movw	r18, r16
    41c2:	28 1b       	sub	r18, r24
    41c4:	39 0b       	sbc	r19, r25
    41c6:	c9 01       	movw	r24, r18
    41c8:	01 96       	adiw	r24, 0x01	; 1
    41ca:	9a 83       	std	Y+2, r25	; 0x02
    41cc:	89 83       	std	Y+1, r24	; 0x01




	if(preload<(TIMER2OcrValue+1))
    41ce:	80 91 de 01 	lds	r24, 0x01DE
    41d2:	90 91 df 01 	lds	r25, 0x01DF
    41d6:	9c 01       	movw	r18, r24
    41d8:	2f 5f       	subi	r18, 0xFF	; 255
    41da:	3f 4f       	sbci	r19, 0xFF	; 255
    41dc:	89 81       	ldd	r24, Y+1	; 0x01
    41de:	9a 81       	ldd	r25, Y+2	; 0x02
    41e0:	82 17       	cp	r24, r18
    41e2:	93 07       	cpc	r25, r19
    41e4:	78 f4       	brcc	.+30     	; 0x4204 <AVE_TIMER2_CTC_delay_ms+0x20c>
	{


		TIMER2_TCNT2 = preload;
    41e6:	e4 e4       	ldi	r30, 0x44	; 68
    41e8:	f0 e0       	ldi	r31, 0x00	; 0
    41ea:	89 81       	ldd	r24, Y+1	; 0x01
    41ec:	80 83       	st	Z, r24
		numberOfOverFlows++;
    41ee:	8b 81       	ldd	r24, Y+3	; 0x03
    41f0:	9c 81       	ldd	r25, Y+4	; 0x04
    41f2:	ad 81       	ldd	r26, Y+5	; 0x05
    41f4:	be 81       	ldd	r27, Y+6	; 0x06
    41f6:	01 96       	adiw	r24, 0x01	; 1
    41f8:	a1 1d       	adc	r26, r1
    41fa:	b1 1d       	adc	r27, r1
    41fc:	8b 83       	std	Y+3, r24	; 0x03
    41fe:	9c 83       	std	Y+4, r25	; 0x04
    4200:	ad 83       	std	Y+5, r26	; 0x05
    4202:	be 83       	std	Y+6, r27	; 0x06
	}

	AVE_TIMER2_start();
    4204:	0e 94 e0 1d 	call	0x3bc0	; 0x3bc0 <AVE_TIMER2_start>
    4208:	22 c0       	rjmp	.+68     	; 0x424e <AVE_TIMER2_CTC_delay_ms+0x256>


	while(numberOfOverFlows)
	{

		if((TIMER2_TIFR<<TIFR_TOV2))
    420a:	e8 e5       	ldi	r30, 0x58	; 88
    420c:	f0 e0       	ldi	r31, 0x00	; 0
    420e:	80 81       	ld	r24, Z
    4210:	88 2f       	mov	r24, r24
    4212:	90 e0       	ldi	r25, 0x00	; 0
    4214:	00 24       	eor	r0, r0
    4216:	96 95       	lsr	r25
    4218:	87 95       	ror	r24
    421a:	07 94       	ror	r0
    421c:	96 95       	lsr	r25
    421e:	87 95       	ror	r24
    4220:	07 94       	ror	r0
    4222:	98 2f       	mov	r25, r24
    4224:	80 2d       	mov	r24, r0
    4226:	00 97       	sbiw	r24, 0x00	; 0
    4228:	91 f0       	breq	.+36     	; 0x424e <AVE_TIMER2_CTC_delay_ms+0x256>
		{

			numberOfOverFlows--;
    422a:	8b 81       	ldd	r24, Y+3	; 0x03
    422c:	9c 81       	ldd	r25, Y+4	; 0x04
    422e:	ad 81       	ldd	r26, Y+5	; 0x05
    4230:	be 81       	ldd	r27, Y+6	; 0x06
    4232:	01 97       	sbiw	r24, 0x01	; 1
    4234:	a1 09       	sbc	r26, r1
    4236:	b1 09       	sbc	r27, r1
    4238:	8b 83       	std	Y+3, r24	; 0x03
    423a:	9c 83       	std	Y+4, r25	; 0x04
    423c:	ad 83       	std	Y+5, r26	; 0x05
    423e:	be 83       	std	Y+6, r27	; 0x06
			TIMER2_TIFR |= (1<<TIFR_TOV2);
    4240:	a8 e5       	ldi	r26, 0x58	; 88
    4242:	b0 e0       	ldi	r27, 0x00	; 0
    4244:	e8 e5       	ldi	r30, 0x58	; 88
    4246:	f0 e0       	ldi	r31, 0x00	; 0
    4248:	80 81       	ld	r24, Z
    424a:	80 64       	ori	r24, 0x40	; 64
    424c:	8c 93       	st	X, r24
	}

	AVE_TIMER2_start();


	while(numberOfOverFlows)
    424e:	8b 81       	ldd	r24, Y+3	; 0x03
    4250:	9c 81       	ldd	r25, Y+4	; 0x04
    4252:	ad 81       	ldd	r26, Y+5	; 0x05
    4254:	be 81       	ldd	r27, Y+6	; 0x06
    4256:	00 97       	sbiw	r24, 0x00	; 0
    4258:	a1 05       	cpc	r26, r1
    425a:	b1 05       	cpc	r27, r1
    425c:	b1 f6       	brne	.-84     	; 0x420a <AVE_TIMER2_CTC_delay_ms+0x212>
			TIMER2_TIFR |= (1<<TIFR_TOV2);
		}
	}


	AVE_TIMER2_stop();
    425e:	0e 94 07 1e 	call	0x3c0e	; 0x3c0e <AVE_TIMER2_stop>
}
    4262:	69 96       	adiw	r28, 0x19	; 25
    4264:	0f b6       	in	r0, 0x3f	; 63
    4266:	f8 94       	cli
    4268:	de bf       	out	0x3e, r29	; 62
    426a:	0f be       	out	0x3f, r0	; 63
    426c:	cd bf       	out	0x3d, r28	; 61
    426e:	cf 91       	pop	r28
    4270:	df 91       	pop	r29
    4272:	1f 91       	pop	r17
    4274:	0f 91       	pop	r16
    4276:	08 95       	ret

00004278 <Spi_Enable>:
static volatile uint8 data;

void (*spiHandler)(void);

void Spi_Enable(uint8 activationFlag)
{
    4278:	df 93       	push	r29
    427a:	cf 93       	push	r28
    427c:	00 d0       	rcall	.+0      	; 0x427e <Spi_Enable+0x6>
    427e:	0f 92       	push	r0
    4280:	cd b7       	in	r28, 0x3d	; 61
    4282:	de b7       	in	r29, 0x3e	; 62
    4284:	89 83       	std	Y+1, r24	; 0x01

	switch(activationFlag)
    4286:	89 81       	ldd	r24, Y+1	; 0x01
    4288:	28 2f       	mov	r18, r24
    428a:	30 e0       	ldi	r19, 0x00	; 0
    428c:	3b 83       	std	Y+3, r19	; 0x03
    428e:	2a 83       	std	Y+2, r18	; 0x02
    4290:	8a 81       	ldd	r24, Y+2	; 0x02
    4292:	9b 81       	ldd	r25, Y+3	; 0x03
    4294:	00 97       	sbiw	r24, 0x00	; 0
    4296:	69 f0       	breq	.+26     	; 0x42b2 <Spi_Enable+0x3a>
    4298:	2a 81       	ldd	r18, Y+2	; 0x02
    429a:	3b 81       	ldd	r19, Y+3	; 0x03
    429c:	21 30       	cpi	r18, 0x01	; 1
    429e:	31 05       	cpc	r19, r1
    42a0:	81 f4       	brne	.+32     	; 0x42c2 <Spi_Enable+0x4a>
	{
	case SPI_ENABLE:
		SET_BIT(SPI_SPCR,SPCR_SPE);
    42a2:	ad e2       	ldi	r26, 0x2D	; 45
    42a4:	b0 e0       	ldi	r27, 0x00	; 0
    42a6:	ed e2       	ldi	r30, 0x2D	; 45
    42a8:	f0 e0       	ldi	r31, 0x00	; 0
    42aa:	80 81       	ld	r24, Z
    42ac:	80 64       	ori	r24, 0x40	; 64
    42ae:	8c 93       	st	X, r24
    42b0:	0f c0       	rjmp	.+30     	; 0x42d0 <Spi_Enable+0x58>
		break;
	case SPI_DISABLE:
		CLEAR_BIT(SPI_SPCR,SPCR_SPE);
    42b2:	ad e2       	ldi	r26, 0x2D	; 45
    42b4:	b0 e0       	ldi	r27, 0x00	; 0
    42b6:	ed e2       	ldi	r30, 0x2D	; 45
    42b8:	f0 e0       	ldi	r31, 0x00	; 0
    42ba:	80 81       	ld	r24, Z
    42bc:	8f 7b       	andi	r24, 0xBF	; 191
    42be:	8c 93       	st	X, r24
    42c0:	07 c0       	rjmp	.+14     	; 0x42d0 <Spi_Enable+0x58>
		break;
	default:
		SET_BIT(SPI_SPCR,SPCR_SPE);
    42c2:	ad e2       	ldi	r26, 0x2D	; 45
    42c4:	b0 e0       	ldi	r27, 0x00	; 0
    42c6:	ed e2       	ldi	r30, 0x2D	; 45
    42c8:	f0 e0       	ldi	r31, 0x00	; 0
    42ca:	80 81       	ld	r24, Z
    42cc:	80 64       	ori	r24, 0x40	; 64
    42ce:	8c 93       	st	X, r24
		break;

	}

	return ;
}
    42d0:	0f 90       	pop	r0
    42d2:	0f 90       	pop	r0
    42d4:	0f 90       	pop	r0
    42d6:	cf 91       	pop	r28
    42d8:	df 91       	pop	r29
    42da:	08 95       	ret

000042dc <Spi_SetCallBack>:

void Spi_SetCallBack(void(*ptr)(void))
{
    42dc:	df 93       	push	r29
    42de:	cf 93       	push	r28
    42e0:	00 d0       	rcall	.+0      	; 0x42e2 <Spi_SetCallBack+0x6>
    42e2:	cd b7       	in	r28, 0x3d	; 61
    42e4:	de b7       	in	r29, 0x3e	; 62
    42e6:	9a 83       	std	Y+2, r25	; 0x02
    42e8:	89 83       	std	Y+1, r24	; 0x01
	spiHandler = ptr;
    42ea:	89 81       	ldd	r24, Y+1	; 0x01
    42ec:	9a 81       	ldd	r25, Y+2	; 0x02
    42ee:	90 93 13 02 	sts	0x0213, r25
    42f2:	80 93 12 02 	sts	0x0212, r24
}
    42f6:	0f 90       	pop	r0
    42f8:	0f 90       	pop	r0
    42fa:	cf 91       	pop	r28
    42fc:	df 91       	pop	r29
    42fe:	08 95       	ret

00004300 <Spi_Init>:

void Spi_Init(spiConfiguration*spiCfgPtr)
{
    4300:	df 93       	push	r29
    4302:	cf 93       	push	r28
    4304:	cd b7       	in	r28, 0x3d	; 61
    4306:	de b7       	in	r29, 0x3e	; 62
    4308:	2f 97       	sbiw	r28, 0x0f	; 15
    430a:	0f b6       	in	r0, 0x3f	; 63
    430c:	f8 94       	cli
    430e:	de bf       	out	0x3e, r29	; 62
    4310:	0f be       	out	0x3f, r0	; 63
    4312:	cd bf       	out	0x3d, r28	; 61
    4314:	9b 83       	std	Y+3, r25	; 0x03
    4316:	8a 83       	std	Y+2, r24	; 0x02
	 * for enabling the spi module .
	 */
//	AVE_gpioPinDirection(PORTB,BIT4,OUTPUT);
//	AVE_gpioPinWrite(PORTB,BIT4,LOW);

		uint8 spicrVar = 0;
    4318:	19 82       	std	Y+1, r1	; 0x01
	SET_BIT(spicrVar,SPCR_SPE);
    431a:	89 81       	ldd	r24, Y+1	; 0x01
    431c:	80 64       	ori	r24, 0x40	; 64
    431e:	89 83       	std	Y+1, r24	; 0x01



	switch(spiCfgPtr->linkingType)
    4320:	ea 81       	ldd	r30, Y+2	; 0x02
    4322:	fb 81       	ldd	r31, Y+3	; 0x03
    4324:	85 81       	ldd	r24, Z+5	; 0x05
    4326:	28 2f       	mov	r18, r24
    4328:	30 e0       	ldi	r19, 0x00	; 0
    432a:	3f 87       	std	Y+15, r19	; 0x0f
    432c:	2e 87       	std	Y+14, r18	; 0x0e
    432e:	8e 85       	ldd	r24, Y+14	; 0x0e
    4330:	9f 85       	ldd	r25, Y+15	; 0x0f
    4332:	00 97       	sbiw	r24, 0x00	; 0
    4334:	09 f4       	brne	.+2      	; 0x4338 <Spi_Init+0x38>
    4336:	fb c0       	rjmp	.+502    	; 0x452e <Spi_Init+0x22e>
    4338:	2e 85       	ldd	r18, Y+14	; 0x0e
    433a:	3f 85       	ldd	r19, Y+15	; 0x0f
    433c:	21 30       	cpi	r18, 0x01	; 1
    433e:	31 05       	cpc	r19, r1
    4340:	09 f0       	breq	.+2      	; 0x4344 <Spi_Init+0x44>
    4342:	f5 c0       	rjmp	.+490    	; 0x452e <Spi_Init+0x22e>
		 * do nothing for now
		 * for future upgrade
		 */
		break;
	case POSTCOMPILE:
		switch(spiCfgPtr->spiMode)
    4344:	ea 81       	ldd	r30, Y+2	; 0x02
    4346:	fb 81       	ldd	r31, Y+3	; 0x03
    4348:	82 81       	ldd	r24, Z+2	; 0x02
    434a:	28 2f       	mov	r18, r24
    434c:	30 e0       	ldi	r19, 0x00	; 0
    434e:	3d 87       	std	Y+13, r19	; 0x0d
    4350:	2c 87       	std	Y+12, r18	; 0x0c
    4352:	8c 85       	ldd	r24, Y+12	; 0x0c
    4354:	9d 85       	ldd	r25, Y+13	; 0x0d
    4356:	00 97       	sbiw	r24, 0x00	; 0
    4358:	31 f0       	breq	.+12     	; 0x4366 <Spi_Init+0x66>
    435a:	2c 85       	ldd	r18, Y+12	; 0x0c
    435c:	3d 85       	ldd	r19, Y+13	; 0x0d
    435e:	21 30       	cpi	r18, 0x01	; 1
    4360:	31 05       	cpc	r19, r1
    4362:	29 f0       	breq	.+10     	; 0x436e <Spi_Init+0x6e>
    4364:	07 c0       	rjmp	.+14     	; 0x4374 <Spi_Init+0x74>
		{
		case SPI_MASTER:
			SET_BIT(spicrVar,SPCR_MSTR);
    4366:	89 81       	ldd	r24, Y+1	; 0x01
    4368:	80 61       	ori	r24, 0x10	; 16
    436a:	89 83       	std	Y+1, r24	; 0x01
    436c:	03 c0       	rjmp	.+6      	; 0x4374 <Spi_Init+0x74>
			break;
		case SPI_SLAVE:
			CLEAR_BIT(spicrVar,SPCR_MSTR);
    436e:	89 81       	ldd	r24, Y+1	; 0x01
    4370:	8f 7e       	andi	r24, 0xEF	; 239
    4372:	89 83       	std	Y+1, r24	; 0x01
			break;
		default:
			break;

		}
		switch(spiCfgPtr->clkSpeed)
    4374:	ea 81       	ldd	r30, Y+2	; 0x02
    4376:	fb 81       	ldd	r31, Y+3	; 0x03
    4378:	84 81       	ldd	r24, Z+4	; 0x04
    437a:	28 2f       	mov	r18, r24
    437c:	30 e0       	ldi	r19, 0x00	; 0
    437e:	3b 87       	std	Y+11, r19	; 0x0b
    4380:	2a 87       	std	Y+10, r18	; 0x0a
    4382:	8a 85       	ldd	r24, Y+10	; 0x0a
    4384:	9b 85       	ldd	r25, Y+11	; 0x0b
    4386:	83 30       	cpi	r24, 0x03	; 3
    4388:	91 05       	cpc	r25, r1
    438a:	09 f4       	brne	.+2      	; 0x438e <Spi_Init+0x8e>
    438c:	51 c0       	rjmp	.+162    	; 0x4430 <Spi_Init+0x130>
    438e:	2a 85       	ldd	r18, Y+10	; 0x0a
    4390:	3b 85       	ldd	r19, Y+11	; 0x0b
    4392:	24 30       	cpi	r18, 0x04	; 4
    4394:	31 05       	cpc	r19, r1
    4396:	7c f4       	brge	.+30     	; 0x43b6 <Spi_Init+0xb6>
    4398:	8a 85       	ldd	r24, Y+10	; 0x0a
    439a:	9b 85       	ldd	r25, Y+11	; 0x0b
    439c:	81 30       	cpi	r24, 0x01	; 1
    439e:	91 05       	cpc	r25, r1
    43a0:	e9 f0       	breq	.+58     	; 0x43dc <Spi_Init+0xdc>
    43a2:	2a 85       	ldd	r18, Y+10	; 0x0a
    43a4:	3b 85       	ldd	r19, Y+11	; 0x0b
    43a6:	22 30       	cpi	r18, 0x02	; 2
    43a8:	31 05       	cpc	r19, r1
    43aa:	a4 f5       	brge	.+104    	; 0x4414 <Spi_Init+0x114>
    43ac:	8a 85       	ldd	r24, Y+10	; 0x0a
    43ae:	9b 85       	ldd	r25, Y+11	; 0x0b
    43b0:	00 97       	sbiw	r24, 0x00	; 0
    43b2:	11 f1       	breq	.+68     	; 0x43f8 <Spi_Init+0xf8>
    43b4:	74 c0       	rjmp	.+232    	; 0x449e <Spi_Init+0x19e>
    43b6:	2a 85       	ldd	r18, Y+10	; 0x0a
    43b8:	3b 85       	ldd	r19, Y+11	; 0x0b
    43ba:	25 30       	cpi	r18, 0x05	; 5
    43bc:	31 05       	cpc	r19, r1
    43be:	09 f4       	brne	.+2      	; 0x43c2 <Spi_Init+0xc2>
    43c0:	53 c0       	rjmp	.+166    	; 0x4468 <Spi_Init+0x168>
    43c2:	8a 85       	ldd	r24, Y+10	; 0x0a
    43c4:	9b 85       	ldd	r25, Y+11	; 0x0b
    43c6:	85 30       	cpi	r24, 0x05	; 5
    43c8:	91 05       	cpc	r25, r1
    43ca:	0c f4       	brge	.+2      	; 0x43ce <Spi_Init+0xce>
    43cc:	3f c0       	rjmp	.+126    	; 0x444c <Spi_Init+0x14c>
    43ce:	2a 85       	ldd	r18, Y+10	; 0x0a
    43d0:	3b 85       	ldd	r19, Y+11	; 0x0b
    43d2:	26 30       	cpi	r18, 0x06	; 6
    43d4:	31 05       	cpc	r19, r1
    43d6:	09 f4       	brne	.+2      	; 0x43da <Spi_Init+0xda>
    43d8:	55 c0       	rjmp	.+170    	; 0x4484 <Spi_Init+0x184>
    43da:	61 c0       	rjmp	.+194    	; 0x449e <Spi_Init+0x19e>
		{
		case CLK_FREQ_16:
			SET_BIT(spicrVar,SPCR_SPR0);
    43dc:	89 81       	ldd	r24, Y+1	; 0x01
    43de:	81 60       	ori	r24, 0x01	; 1
    43e0:	89 83       	std	Y+1, r24	; 0x01
			CLEAR_BIT(spicrVar,SPCR_SPR1);
    43e2:	89 81       	ldd	r24, Y+1	; 0x01
    43e4:	8d 7f       	andi	r24, 0xFD	; 253
    43e6:	89 83       	std	Y+1, r24	; 0x01
			CLEAR_BIT(SPI_SPSR,SPSR_SPI2X);
    43e8:	ae e2       	ldi	r26, 0x2E	; 46
    43ea:	b0 e0       	ldi	r27, 0x00	; 0
    43ec:	ee e2       	ldi	r30, 0x2E	; 46
    43ee:	f0 e0       	ldi	r31, 0x00	; 0
    43f0:	80 81       	ld	r24, Z
    43f2:	8e 7f       	andi	r24, 0xFE	; 254
    43f4:	8c 93       	st	X, r24
    43f6:	53 c0       	rjmp	.+166    	; 0x449e <Spi_Init+0x19e>
			break;
		case CLK_FREQ_4:
			CLEAR_BIT(spicrVar,SPCR_SPR0);
    43f8:	89 81       	ldd	r24, Y+1	; 0x01
    43fa:	8e 7f       	andi	r24, 0xFE	; 254
    43fc:	89 83       	std	Y+1, r24	; 0x01
			CLEAR_BIT(spicrVar,SPCR_SPR1);
    43fe:	89 81       	ldd	r24, Y+1	; 0x01
    4400:	8d 7f       	andi	r24, 0xFD	; 253
    4402:	89 83       	std	Y+1, r24	; 0x01
			CLEAR_BIT(SPI_SPSR,SPSR_SPI2X);
    4404:	ae e2       	ldi	r26, 0x2E	; 46
    4406:	b0 e0       	ldi	r27, 0x00	; 0
    4408:	ee e2       	ldi	r30, 0x2E	; 46
    440a:	f0 e0       	ldi	r31, 0x00	; 0
    440c:	80 81       	ld	r24, Z
    440e:	8e 7f       	andi	r24, 0xFE	; 254
    4410:	8c 93       	st	X, r24
    4412:	45 c0       	rjmp	.+138    	; 0x449e <Spi_Init+0x19e>
			break;
		case CLK_FREQ_64:
			CLEAR_BIT(spicrVar,SPCR_SPR0);
    4414:	89 81       	ldd	r24, Y+1	; 0x01
    4416:	8e 7f       	andi	r24, 0xFE	; 254
    4418:	89 83       	std	Y+1, r24	; 0x01
			SET_BIT(spicrVar,SPCR_SPR1);
    441a:	89 81       	ldd	r24, Y+1	; 0x01
    441c:	82 60       	ori	r24, 0x02	; 2
    441e:	89 83       	std	Y+1, r24	; 0x01
			CLEAR_BIT(SPI_SPSR,SPSR_SPI2X);
    4420:	ae e2       	ldi	r26, 0x2E	; 46
    4422:	b0 e0       	ldi	r27, 0x00	; 0
    4424:	ee e2       	ldi	r30, 0x2E	; 46
    4426:	f0 e0       	ldi	r31, 0x00	; 0
    4428:	80 81       	ld	r24, Z
    442a:	8e 7f       	andi	r24, 0xFE	; 254
    442c:	8c 93       	st	X, r24
    442e:	37 c0       	rjmp	.+110    	; 0x449e <Spi_Init+0x19e>
			break;
		case CLK_FREQ_128:
			SET_BIT(spicrVar,SPCR_SPR0);
    4430:	89 81       	ldd	r24, Y+1	; 0x01
    4432:	81 60       	ori	r24, 0x01	; 1
    4434:	89 83       	std	Y+1, r24	; 0x01
			SET_BIT(spicrVar,SPCR_SPR1);
    4436:	89 81       	ldd	r24, Y+1	; 0x01
    4438:	82 60       	ori	r24, 0x02	; 2
    443a:	89 83       	std	Y+1, r24	; 0x01
			CLEAR_BIT(SPI_SPSR,SPSR_SPI2X);
    443c:	ae e2       	ldi	r26, 0x2E	; 46
    443e:	b0 e0       	ldi	r27, 0x00	; 0
    4440:	ee e2       	ldi	r30, 0x2E	; 46
    4442:	f0 e0       	ldi	r31, 0x00	; 0
    4444:	80 81       	ld	r24, Z
    4446:	8e 7f       	andi	r24, 0xFE	; 254
    4448:	8c 93       	st	X, r24
    444a:	29 c0       	rjmp	.+82     	; 0x449e <Spi_Init+0x19e>
			break;
		case CLK_FREQ_2:
			CLEAR_BIT(spicrVar,SPCR_SPR0);
    444c:	89 81       	ldd	r24, Y+1	; 0x01
    444e:	8e 7f       	andi	r24, 0xFE	; 254
    4450:	89 83       	std	Y+1, r24	; 0x01
			CLEAR_BIT(spicrVar,SPCR_SPR1);
    4452:	89 81       	ldd	r24, Y+1	; 0x01
    4454:	8d 7f       	andi	r24, 0xFD	; 253
    4456:	89 83       	std	Y+1, r24	; 0x01
			SET_BIT(SPI_SPSR,SPSR_SPI2X);
    4458:	ae e2       	ldi	r26, 0x2E	; 46
    445a:	b0 e0       	ldi	r27, 0x00	; 0
    445c:	ee e2       	ldi	r30, 0x2E	; 46
    445e:	f0 e0       	ldi	r31, 0x00	; 0
    4460:	80 81       	ld	r24, Z
    4462:	81 60       	ori	r24, 0x01	; 1
    4464:	8c 93       	st	X, r24
    4466:	1b c0       	rjmp	.+54     	; 0x449e <Spi_Init+0x19e>
			break;
		case CLK_FREQ_8:
			SET_BIT(spicrVar,SPCR_SPR0);
    4468:	89 81       	ldd	r24, Y+1	; 0x01
    446a:	81 60       	ori	r24, 0x01	; 1
    446c:	89 83       	std	Y+1, r24	; 0x01
			CLEAR_BIT(spicrVar,SPCR_SPR1);
    446e:	89 81       	ldd	r24, Y+1	; 0x01
    4470:	8d 7f       	andi	r24, 0xFD	; 253
    4472:	89 83       	std	Y+1, r24	; 0x01
			SET_BIT(SPI_SPSR,SPSR_SPI2X);
    4474:	ae e2       	ldi	r26, 0x2E	; 46
    4476:	b0 e0       	ldi	r27, 0x00	; 0
    4478:	ee e2       	ldi	r30, 0x2E	; 46
    447a:	f0 e0       	ldi	r31, 0x00	; 0
    447c:	80 81       	ld	r24, Z
    447e:	81 60       	ori	r24, 0x01	; 1
    4480:	8c 93       	st	X, r24
    4482:	0d c0       	rjmp	.+26     	; 0x449e <Spi_Init+0x19e>
			break;
		case CLK_FREQ_32:
			CLEAR_BIT(spicrVar,SPCR_SPR0);
    4484:	89 81       	ldd	r24, Y+1	; 0x01
    4486:	8e 7f       	andi	r24, 0xFE	; 254
    4488:	89 83       	std	Y+1, r24	; 0x01
			SET_BIT(spicrVar,SPCR_SPR1);
    448a:	89 81       	ldd	r24, Y+1	; 0x01
    448c:	82 60       	ori	r24, 0x02	; 2
    448e:	89 83       	std	Y+1, r24	; 0x01
			SET_BIT(SPI_SPSR,SPSR_SPI2X);
    4490:	ae e2       	ldi	r26, 0x2E	; 46
    4492:	b0 e0       	ldi	r27, 0x00	; 0
    4494:	ee e2       	ldi	r30, 0x2E	; 46
    4496:	f0 e0       	ldi	r31, 0x00	; 0
    4498:	80 81       	ld	r24, Z
    449a:	81 60       	ori	r24, 0x01	; 1
    449c:	8c 93       	st	X, r24

		default:
			break;

		}
		switch(spiCfgPtr->spiPhase)
    449e:	ea 81       	ldd	r30, Y+2	; 0x02
    44a0:	fb 81       	ldd	r31, Y+3	; 0x03
    44a2:	81 81       	ldd	r24, Z+1	; 0x01
    44a4:	28 2f       	mov	r18, r24
    44a6:	30 e0       	ldi	r19, 0x00	; 0
    44a8:	39 87       	std	Y+9, r19	; 0x09
    44aa:	28 87       	std	Y+8, r18	; 0x08
    44ac:	88 85       	ldd	r24, Y+8	; 0x08
    44ae:	99 85       	ldd	r25, Y+9	; 0x09
    44b0:	00 97       	sbiw	r24, 0x00	; 0
    44b2:	31 f0       	breq	.+12     	; 0x44c0 <Spi_Init+0x1c0>
    44b4:	28 85       	ldd	r18, Y+8	; 0x08
    44b6:	39 85       	ldd	r19, Y+9	; 0x09
    44b8:	21 30       	cpi	r18, 0x01	; 1
    44ba:	31 05       	cpc	r19, r1
    44bc:	29 f0       	breq	.+10     	; 0x44c8 <Spi_Init+0x1c8>
    44be:	07 c0       	rjmp	.+14     	; 0x44ce <Spi_Init+0x1ce>
		{
		case CLK_SAMPLE_LEADING_SETUP_TRAILING:
			CLEAR_BIT(spicrVar,SPCR_CPHA);
    44c0:	89 81       	ldd	r24, Y+1	; 0x01
    44c2:	8b 7f       	andi	r24, 0xFB	; 251
    44c4:	89 83       	std	Y+1, r24	; 0x01
    44c6:	03 c0       	rjmp	.+6      	; 0x44ce <Spi_Init+0x1ce>
			break;
		case CLK_SAMPLE_TRAILING_SETUP_LEADING:
			SET_BIT(spicrVar,SPCR_CPHA);
    44c8:	89 81       	ldd	r24, Y+1	; 0x01
    44ca:	84 60       	ori	r24, 0x04	; 4
    44cc:	89 83       	std	Y+1, r24	; 0x01
		default:
			break;


		}
		switch(spiCfgPtr->spiPolarity)
    44ce:	ea 81       	ldd	r30, Y+2	; 0x02
    44d0:	fb 81       	ldd	r31, Y+3	; 0x03
    44d2:	80 81       	ld	r24, Z
    44d4:	28 2f       	mov	r18, r24
    44d6:	30 e0       	ldi	r19, 0x00	; 0
    44d8:	3f 83       	std	Y+7, r19	; 0x07
    44da:	2e 83       	std	Y+6, r18	; 0x06
    44dc:	8e 81       	ldd	r24, Y+6	; 0x06
    44de:	9f 81       	ldd	r25, Y+7	; 0x07
    44e0:	00 97       	sbiw	r24, 0x00	; 0
    44e2:	31 f0       	breq	.+12     	; 0x44f0 <Spi_Init+0x1f0>
    44e4:	2e 81       	ldd	r18, Y+6	; 0x06
    44e6:	3f 81       	ldd	r19, Y+7	; 0x07
    44e8:	21 30       	cpi	r18, 0x01	; 1
    44ea:	31 05       	cpc	r19, r1
    44ec:	29 f0       	breq	.+10     	; 0x44f8 <Spi_Init+0x1f8>
    44ee:	07 c0       	rjmp	.+14     	; 0x44fe <Spi_Init+0x1fe>
		{
		case CLK_RISING_IDLE:
			CLEAR_BIT(spicrVar,SPCR_CPOL);
    44f0:	89 81       	ldd	r24, Y+1	; 0x01
    44f2:	87 7f       	andi	r24, 0xF7	; 247
    44f4:	89 83       	std	Y+1, r24	; 0x01
    44f6:	03 c0       	rjmp	.+6      	; 0x44fe <Spi_Init+0x1fe>
			break;
		case CLK_FALLING_IDLE:
			SET_BIT(spicrVar,SPCR_CPOL);
    44f8:	89 81       	ldd	r24, Y+1	; 0x01
    44fa:	88 60       	ori	r24, 0x08	; 8
    44fc:	89 83       	std	Y+1, r24	; 0x01
			break;
		default:
			break;

		}
		switch(spiCfgPtr->bitOrder)
    44fe:	ea 81       	ldd	r30, Y+2	; 0x02
    4500:	fb 81       	ldd	r31, Y+3	; 0x03
    4502:	83 81       	ldd	r24, Z+3	; 0x03
    4504:	28 2f       	mov	r18, r24
    4506:	30 e0       	ldi	r19, 0x00	; 0
    4508:	3d 83       	std	Y+5, r19	; 0x05
    450a:	2c 83       	std	Y+4, r18	; 0x04
    450c:	8c 81       	ldd	r24, Y+4	; 0x04
    450e:	9d 81       	ldd	r25, Y+5	; 0x05
    4510:	00 97       	sbiw	r24, 0x00	; 0
    4512:	31 f0       	breq	.+12     	; 0x4520 <Spi_Init+0x220>
    4514:	2c 81       	ldd	r18, Y+4	; 0x04
    4516:	3d 81       	ldd	r19, Y+5	; 0x05
    4518:	21 30       	cpi	r18, 0x01	; 1
    451a:	31 05       	cpc	r19, r1
    451c:	29 f0       	breq	.+10     	; 0x4528 <Spi_Init+0x228>
    451e:	07 c0       	rjmp	.+14     	; 0x452e <Spi_Init+0x22e>
		{
		case LSB_TRANSMISSION_FIRST:
			SET_BIT(spicrVar,SPCR_DORD);
    4520:	89 81       	ldd	r24, Y+1	; 0x01
    4522:	80 62       	ori	r24, 0x20	; 32
    4524:	89 83       	std	Y+1, r24	; 0x01
    4526:	03 c0       	rjmp	.+6      	; 0x452e <Spi_Init+0x22e>
			break;
		case MSB_TRANSMISSION_FIRST:
			CLEAR_BIT(spicrVar,SPCR_DORD);
    4528:	89 81       	ldd	r24, Y+1	; 0x01
    452a:	8f 7d       	andi	r24, 0xDF	; 223
    452c:	89 83       	std	Y+1, r24	; 0x01
		}

	}


	SPI_SPCR =spicrVar;// ((1<<SPCR_MSTR)|(1<<SPCR_SPE));
    452e:	ed e2       	ldi	r30, 0x2D	; 45
    4530:	f0 e0       	ldi	r31, 0x00	; 0
    4532:	89 81       	ldd	r24, Y+1	; 0x01
    4534:	80 83       	st	Z, r24

}
    4536:	2f 96       	adiw	r28, 0x0f	; 15
    4538:	0f b6       	in	r0, 0x3f	; 63
    453a:	f8 94       	cli
    453c:	de bf       	out	0x3e, r29	; 62
    453e:	0f be       	out	0x3f, r0	; 63
    4540:	cd bf       	out	0x3d, r28	; 61
    4542:	cf 91       	pop	r28
    4544:	df 91       	pop	r29
    4546:	08 95       	ret

00004548 <SpiTransferPolling>:


void SpiTransferPolling(uint8 data)
{
    4548:	df 93       	push	r29
    454a:	cf 93       	push	r28
    454c:	0f 92       	push	r0
    454e:	cd b7       	in	r28, 0x3d	; 61
    4550:	de b7       	in	r29, 0x3e	; 62
    4552:	89 83       	std	Y+1, r24	; 0x01

	SPI_SPDR = data;
    4554:	ef e2       	ldi	r30, 0x2F	; 47
    4556:	f0 e0       	ldi	r31, 0x00	; 0
    4558:	89 81       	ldd	r24, Y+1	; 0x01
    455a:	80 83       	st	Z, r24

	while((SPI_SPSR&(1<<7))!=(1<<7));
    455c:	ee e2       	ldi	r30, 0x2E	; 46
    455e:	f0 e0       	ldi	r31, 0x00	; 0
    4560:	80 81       	ld	r24, Z
    4562:	88 23       	and	r24, r24
    4564:	dc f7       	brge	.-10     	; 0x455c <SpiTransferPolling+0x14>
	//data = SPI_SPDR;

	return ;


}
    4566:	0f 90       	pop	r0
    4568:	cf 91       	pop	r28
    456a:	df 91       	pop	r29
    456c:	08 95       	ret

0000456e <SpiGetPolling>:




uint8 SpiGetPolling(void)
{
    456e:	df 93       	push	r29
    4570:	cf 93       	push	r28
    4572:	0f 92       	push	r0
    4574:	cd b7       	in	r28, 0x3d	; 61
    4576:	de b7       	in	r29, 0x3e	; 62
	uint8 data;


	while(!(GET_BIT(SPI_SPSR,SPSR_SPIF)));
    4578:	ee e2       	ldi	r30, 0x2E	; 46
    457a:	f0 e0       	ldi	r31, 0x00	; 0
    457c:	80 81       	ld	r24, Z
    457e:	88 23       	and	r24, r24
    4580:	dc f7       	brge	.-10     	; 0x4578 <SpiGetPolling+0xa>

	data = SPI_SPDR;
    4582:	ef e2       	ldi	r30, 0x2F	; 47
    4584:	f0 e0       	ldi	r31, 0x00	; 0
    4586:	80 81       	ld	r24, Z
    4588:	89 83       	std	Y+1, r24	; 0x01
	return data;
    458a:	89 81       	ldd	r24, Y+1	; 0x01


}
    458c:	0f 90       	pop	r0
    458e:	cf 91       	pop	r28
    4590:	df 91       	pop	r29
    4592:	08 95       	ret

00004594 <__vector_12>:

SPI_STC_Handler()
{
    4594:	1f 92       	push	r1
    4596:	0f 92       	push	r0
    4598:	0f b6       	in	r0, 0x3f	; 63
    459a:	0f 92       	push	r0
    459c:	11 24       	eor	r1, r1
    459e:	8f 93       	push	r24
    45a0:	ef 93       	push	r30
    45a2:	ff 93       	push	r31
    45a4:	df 93       	push	r29
    45a6:	cf 93       	push	r28
    45a8:	cd b7       	in	r28, 0x3d	; 61
    45aa:	de b7       	in	r29, 0x3e	; 62
	SPI_SPDR = data;
    45ac:	ef e2       	ldi	r30, 0x2F	; 47
    45ae:	f0 e0       	ldi	r31, 0x00	; 0
    45b0:	80 91 ea 01 	lds	r24, 0x01EA
    45b4:	80 83       	st	Z, r24




}
    45b6:	cf 91       	pop	r28
    45b8:	df 91       	pop	r29
    45ba:	ff 91       	pop	r31
    45bc:	ef 91       	pop	r30
    45be:	8f 91       	pop	r24
    45c0:	0f 90       	pop	r0
    45c2:	0f be       	out	0x3f, r0	; 63
    45c4:	0f 90       	pop	r0
    45c6:	1f 90       	pop	r1
    45c8:	18 95       	reti

000045ca <addExtiCallBackFunction>:
 * each thing is self explanatory !...
 */


void addExtiCallBackFunction(uint8 extiNumber,void (*ptf)(void))
{
    45ca:	df 93       	push	r29
    45cc:	cf 93       	push	r28
    45ce:	00 d0       	rcall	.+0      	; 0x45d0 <addExtiCallBackFunction+0x6>
    45d0:	00 d0       	rcall	.+0      	; 0x45d2 <addExtiCallBackFunction+0x8>
    45d2:	0f 92       	push	r0
    45d4:	cd b7       	in	r28, 0x3d	; 61
    45d6:	de b7       	in	r29, 0x3e	; 62
    45d8:	89 83       	std	Y+1, r24	; 0x01
    45da:	7b 83       	std	Y+3, r23	; 0x03
    45dc:	6a 83       	std	Y+2, r22	; 0x02

	switch(extiNumber)
    45de:	89 81       	ldd	r24, Y+1	; 0x01
    45e0:	28 2f       	mov	r18, r24
    45e2:	30 e0       	ldi	r19, 0x00	; 0
    45e4:	3d 83       	std	Y+5, r19	; 0x05
    45e6:	2c 83       	std	Y+4, r18	; 0x04
    45e8:	8c 81       	ldd	r24, Y+4	; 0x04
    45ea:	9d 81       	ldd	r25, Y+5	; 0x05
    45ec:	81 30       	cpi	r24, 0x01	; 1
    45ee:	91 05       	cpc	r25, r1
    45f0:	81 f0       	breq	.+32     	; 0x4612 <addExtiCallBackFunction+0x48>
    45f2:	2c 81       	ldd	r18, Y+4	; 0x04
    45f4:	3d 81       	ldd	r19, Y+5	; 0x05
    45f6:	22 30       	cpi	r18, 0x02	; 2
    45f8:	31 05       	cpc	r19, r1
    45fa:	91 f0       	breq	.+36     	; 0x4620 <addExtiCallBackFunction+0x56>
    45fc:	8c 81       	ldd	r24, Y+4	; 0x04
    45fe:	9d 81       	ldd	r25, Y+5	; 0x05
    4600:	00 97       	sbiw	r24, 0x00	; 0
    4602:	a1 f4       	brne	.+40     	; 0x462c <addExtiCallBackFunction+0x62>
	{
	case INT0_EN:
		ptToExtiCallBackFunction1 = ptf;
    4604:	8a 81       	ldd	r24, Y+2	; 0x02
    4606:	9b 81       	ldd	r25, Y+3	; 0x03
    4608:	90 93 17 02 	sts	0x0217, r25
    460c:	80 93 16 02 	sts	0x0216, r24
    4610:	0d c0       	rjmp	.+26     	; 0x462c <addExtiCallBackFunction+0x62>
		break;
	case INT1_EN:
		ptToExtiCallBackFunction2 = ptf;
    4612:	8a 81       	ldd	r24, Y+2	; 0x02
    4614:	9b 81       	ldd	r25, Y+3	; 0x03
    4616:	90 93 15 02 	sts	0x0215, r25
    461a:	80 93 14 02 	sts	0x0214, r24
    461e:	06 c0       	rjmp	.+12     	; 0x462c <addExtiCallBackFunction+0x62>
		break;
	case INT2_EN:
		ptToExtiCallBackFunction3 = ptf;
    4620:	8a 81       	ldd	r24, Y+2	; 0x02
    4622:	9b 81       	ldd	r25, Y+3	; 0x03
    4624:	90 93 19 02 	sts	0x0219, r25
    4628:	80 93 18 02 	sts	0x0218, r24
		break;


	}
}
    462c:	0f 90       	pop	r0
    462e:	0f 90       	pop	r0
    4630:	0f 90       	pop	r0
    4632:	0f 90       	pop	r0
    4634:	0f 90       	pop	r0
    4636:	cf 91       	pop	r28
    4638:	df 91       	pop	r29
    463a:	08 95       	ret

0000463c <enableOrDisable>:

void enableOrDisable(uint8 extiNumber)
{
    463c:	df 93       	push	r29
    463e:	cf 93       	push	r28
    4640:	00 d0       	rcall	.+0      	; 0x4642 <enableOrDisable+0x6>
    4642:	0f 92       	push	r0
    4644:	cd b7       	in	r28, 0x3d	; 61
    4646:	de b7       	in	r29, 0x3e	; 62
    4648:	89 83       	std	Y+1, r24	; 0x01

	//globalInterruptManipulate(GLOBAL_INTERRUPT_ENABLE);

	switch(extiNumber)
    464a:	89 81       	ldd	r24, Y+1	; 0x01
    464c:	28 2f       	mov	r18, r24
    464e:	30 e0       	ldi	r19, 0x00	; 0
    4650:	3b 83       	std	Y+3, r19	; 0x03
    4652:	2a 83       	std	Y+2, r18	; 0x02
    4654:	8a 81       	ldd	r24, Y+2	; 0x02
    4656:	9b 81       	ldd	r25, Y+3	; 0x03
    4658:	81 30       	cpi	r24, 0x01	; 1
    465a:	91 05       	cpc	r25, r1
    465c:	89 f0       	breq	.+34     	; 0x4680 <enableOrDisable+0x44>
    465e:	2a 81       	ldd	r18, Y+2	; 0x02
    4660:	3b 81       	ldd	r19, Y+3	; 0x03
    4662:	22 30       	cpi	r18, 0x02	; 2
    4664:	31 05       	cpc	r19, r1
    4666:	a1 f0       	breq	.+40     	; 0x4690 <enableOrDisable+0x54>
    4668:	8a 81       	ldd	r24, Y+2	; 0x02
    466a:	9b 81       	ldd	r25, Y+3	; 0x03
    466c:	00 97       	sbiw	r24, 0x00	; 0
    466e:	b9 f4       	brne	.+46     	; 0x469e <enableOrDisable+0x62>
	{

	case INT0_EN:
		SET_BIT(EXTI_GICR,GICR_INT0);
    4670:	ab e5       	ldi	r26, 0x5B	; 91
    4672:	b0 e0       	ldi	r27, 0x00	; 0
    4674:	eb e5       	ldi	r30, 0x5B	; 91
    4676:	f0 e0       	ldi	r31, 0x00	; 0
    4678:	80 81       	ld	r24, Z
    467a:	80 64       	ori	r24, 0x40	; 64
    467c:	8c 93       	st	X, r24
    467e:	0f c0       	rjmp	.+30     	; 0x469e <enableOrDisable+0x62>
		break;
	case INT1_EN:
		SET_BIT(EXTI_GICR,GICR_INT1);
    4680:	ab e5       	ldi	r26, 0x5B	; 91
    4682:	b0 e0       	ldi	r27, 0x00	; 0
    4684:	eb e5       	ldi	r30, 0x5B	; 91
    4686:	f0 e0       	ldi	r31, 0x00	; 0
    4688:	80 81       	ld	r24, Z
    468a:	80 68       	ori	r24, 0x80	; 128
    468c:	8c 93       	st	X, r24
    468e:	07 c0       	rjmp	.+14     	; 0x469e <enableOrDisable+0x62>
		break;
	case INT2_EN:
		SET_BIT(EXTI_GICR,GICR_INT2);
    4690:	ab e5       	ldi	r26, 0x5B	; 91
    4692:	b0 e0       	ldi	r27, 0x00	; 0
    4694:	eb e5       	ldi	r30, 0x5B	; 91
    4696:	f0 e0       	ldi	r31, 0x00	; 0
    4698:	80 81       	ld	r24, Z
    469a:	80 62       	ori	r24, 0x20	; 32
    469c:	8c 93       	st	X, r24
		break;



	}
}
    469e:	0f 90       	pop	r0
    46a0:	0f 90       	pop	r0
    46a2:	0f 90       	pop	r0
    46a4:	cf 91       	pop	r28
    46a6:	df 91       	pop	r29
    46a8:	08 95       	ret

000046aa <intitalizeExtiRunTimeChange>:
void intitalizeExtiRunTimeChange(uint8 extiNumber,uint8 mode)
{
    46aa:	df 93       	push	r29
    46ac:	cf 93       	push	r28
    46ae:	cd b7       	in	r28, 0x3d	; 61
    46b0:	de b7       	in	r29, 0x3e	; 62
    46b2:	28 97       	sbiw	r28, 0x08	; 8
    46b4:	0f b6       	in	r0, 0x3f	; 63
    46b6:	f8 94       	cli
    46b8:	de bf       	out	0x3e, r29	; 62
    46ba:	0f be       	out	0x3f, r0	; 63
    46bc:	cd bf       	out	0x3d, r28	; 61
    46be:	89 83       	std	Y+1, r24	; 0x01
    46c0:	6a 83       	std	Y+2, r22	; 0x02

	//globalInterruptManipulate(GLOBAL_INTERRUPT_ENABLE);

	//SET_BIT(SREG,SREG_I);

	switch(extiNumber)
    46c2:	89 81       	ldd	r24, Y+1	; 0x01
    46c4:	28 2f       	mov	r18, r24
    46c6:	30 e0       	ldi	r19, 0x00	; 0
    46c8:	38 87       	std	Y+8, r19	; 0x08
    46ca:	2f 83       	std	Y+7, r18	; 0x07
    46cc:	8f 81       	ldd	r24, Y+7	; 0x07
    46ce:	98 85       	ldd	r25, Y+8	; 0x08
    46d0:	00 97       	sbiw	r24, 0x00	; 0
    46d2:	39 f0       	breq	.+14     	; 0x46e2 <intitalizeExtiRunTimeChange+0x38>
    46d4:	2f 81       	ldd	r18, Y+7	; 0x07
    46d6:	38 85       	ldd	r19, Y+8	; 0x08
    46d8:	21 30       	cpi	r18, 0x01	; 1
    46da:	31 05       	cpc	r19, r1
    46dc:	09 f4       	brne	.+2      	; 0x46e0 <intitalizeExtiRunTimeChange+0x36>
    46de:	5d c0       	rjmp	.+186    	; 0x479a <intitalizeExtiRunTimeChange+0xf0>
    46e0:	b7 c0       	rjmp	.+366    	; 0x4850 <intitalizeExtiRunTimeChange+0x1a6>



	case INT0_EN:

		switch(mode)
    46e2:	8a 81       	ldd	r24, Y+2	; 0x02
    46e4:	28 2f       	mov	r18, r24
    46e6:	30 e0       	ldi	r19, 0x00	; 0
    46e8:	3e 83       	std	Y+6, r19	; 0x06
    46ea:	2d 83       	std	Y+5, r18	; 0x05
    46ec:	8d 81       	ldd	r24, Y+5	; 0x05
    46ee:	9e 81       	ldd	r25, Y+6	; 0x06
    46f0:	81 30       	cpi	r24, 0x01	; 1
    46f2:	91 05       	cpc	r25, r1
    46f4:	09 f4       	brne	.+2      	; 0x46f8 <intitalizeExtiRunTimeChange+0x4e>
    46f6:	42 c0       	rjmp	.+132    	; 0x477c <intitalizeExtiRunTimeChange+0xd2>
    46f8:	2d 81       	ldd	r18, Y+5	; 0x05
    46fa:	3e 81       	ldd	r19, Y+6	; 0x06
    46fc:	22 30       	cpi	r18, 0x02	; 2
    46fe:	31 05       	cpc	r19, r1
    4700:	2c f4       	brge	.+10     	; 0x470c <intitalizeExtiRunTimeChange+0x62>
    4702:	8d 81       	ldd	r24, Y+5	; 0x05
    4704:	9e 81       	ldd	r25, Y+6	; 0x06
    4706:	00 97       	sbiw	r24, 0x00	; 0
    4708:	61 f0       	breq	.+24     	; 0x4722 <intitalizeExtiRunTimeChange+0x78>
    470a:	a2 c0       	rjmp	.+324    	; 0x4850 <intitalizeExtiRunTimeChange+0x1a6>
    470c:	2d 81       	ldd	r18, Y+5	; 0x05
    470e:	3e 81       	ldd	r19, Y+6	; 0x06
    4710:	22 30       	cpi	r18, 0x02	; 2
    4712:	31 05       	cpc	r19, r1
    4714:	a9 f0       	breq	.+42     	; 0x4740 <intitalizeExtiRunTimeChange+0x96>
    4716:	8d 81       	ldd	r24, Y+5	; 0x05
    4718:	9e 81       	ldd	r25, Y+6	; 0x06
    471a:	83 30       	cpi	r24, 0x03	; 3
    471c:	91 05       	cpc	r25, r1
    471e:	f9 f0       	breq	.+62     	; 0x475e <intitalizeExtiRunTimeChange+0xb4>
    4720:	97 c0       	rjmp	.+302    	; 0x4850 <intitalizeExtiRunTimeChange+0x1a6>
		{
		case EXTI_LOGICAL_CHANGE:
			SET_BIT(EXTI_MCUCR,MCUCR_ISC00);
    4722:	a5 e5       	ldi	r26, 0x55	; 85
    4724:	b0 e0       	ldi	r27, 0x00	; 0
    4726:	e5 e5       	ldi	r30, 0x55	; 85
    4728:	f0 e0       	ldi	r31, 0x00	; 0
    472a:	80 81       	ld	r24, Z
    472c:	81 60       	ori	r24, 0x01	; 1
    472e:	8c 93       	st	X, r24
			CLEAR_BIT(EXTI_MCUCR,MCUCR_ISC01);
    4730:	a5 e5       	ldi	r26, 0x55	; 85
    4732:	b0 e0       	ldi	r27, 0x00	; 0
    4734:	e5 e5       	ldi	r30, 0x55	; 85
    4736:	f0 e0       	ldi	r31, 0x00	; 0
    4738:	80 81       	ld	r24, Z
    473a:	8d 7f       	andi	r24, 0xFD	; 253
    473c:	8c 93       	st	X, r24
    473e:	88 c0       	rjmp	.+272    	; 0x4850 <intitalizeExtiRunTimeChange+0x1a6>
			break;
		case EXTI_FALLING_EDGE:
			CLEAR_BIT(EXTI_MCUCR,MCUCR_ISC00);
    4740:	a5 e5       	ldi	r26, 0x55	; 85
    4742:	b0 e0       	ldi	r27, 0x00	; 0
    4744:	e5 e5       	ldi	r30, 0x55	; 85
    4746:	f0 e0       	ldi	r31, 0x00	; 0
    4748:	80 81       	ld	r24, Z
    474a:	8e 7f       	andi	r24, 0xFE	; 254
    474c:	8c 93       	st	X, r24
			SET_BIT(EXTI_MCUCR,MCUCR_ISC01);
    474e:	a5 e5       	ldi	r26, 0x55	; 85
    4750:	b0 e0       	ldi	r27, 0x00	; 0
    4752:	e5 e5       	ldi	r30, 0x55	; 85
    4754:	f0 e0       	ldi	r31, 0x00	; 0
    4756:	80 81       	ld	r24, Z
    4758:	82 60       	ori	r24, 0x02	; 2
    475a:	8c 93       	st	X, r24
    475c:	79 c0       	rjmp	.+242    	; 0x4850 <intitalizeExtiRunTimeChange+0x1a6>
			break;
		case EXTI_RISING_EDGE:
			SET_BIT(EXTI_MCUCR,MCUCR_ISC00);
    475e:	a5 e5       	ldi	r26, 0x55	; 85
    4760:	b0 e0       	ldi	r27, 0x00	; 0
    4762:	e5 e5       	ldi	r30, 0x55	; 85
    4764:	f0 e0       	ldi	r31, 0x00	; 0
    4766:	80 81       	ld	r24, Z
    4768:	81 60       	ori	r24, 0x01	; 1
    476a:	8c 93       	st	X, r24
			SET_BIT(EXTI_MCUCR,MCUCR_ISC01);
    476c:	a5 e5       	ldi	r26, 0x55	; 85
    476e:	b0 e0       	ldi	r27, 0x00	; 0
    4770:	e5 e5       	ldi	r30, 0x55	; 85
    4772:	f0 e0       	ldi	r31, 0x00	; 0
    4774:	80 81       	ld	r24, Z
    4776:	82 60       	ori	r24, 0x02	; 2
    4778:	8c 93       	st	X, r24
    477a:	6a c0       	rjmp	.+212    	; 0x4850 <intitalizeExtiRunTimeChange+0x1a6>
			break;
		case EXTI_LOW_LEVEL:
			CLEAR_BIT(EXTI_MCUCR,MCUCR_ISC00);
    477c:	a5 e5       	ldi	r26, 0x55	; 85
    477e:	b0 e0       	ldi	r27, 0x00	; 0
    4780:	e5 e5       	ldi	r30, 0x55	; 85
    4782:	f0 e0       	ldi	r31, 0x00	; 0
    4784:	80 81       	ld	r24, Z
    4786:	8e 7f       	andi	r24, 0xFE	; 254
    4788:	8c 93       	st	X, r24
			CLEAR_BIT(EXTI_MCUCR,MCUCR_ISC01);
    478a:	a5 e5       	ldi	r26, 0x55	; 85
    478c:	b0 e0       	ldi	r27, 0x00	; 0
    478e:	e5 e5       	ldi	r30, 0x55	; 85
    4790:	f0 e0       	ldi	r31, 0x00	; 0
    4792:	80 81       	ld	r24, Z
    4794:	8d 7f       	andi	r24, 0xFD	; 253
    4796:	8c 93       	st	X, r24
    4798:	5b c0       	rjmp	.+182    	; 0x4850 <intitalizeExtiRunTimeChange+0x1a6>
		}
		break;
	case INT1_EN:


		switch(mode)
    479a:	8a 81       	ldd	r24, Y+2	; 0x02
    479c:	28 2f       	mov	r18, r24
    479e:	30 e0       	ldi	r19, 0x00	; 0
    47a0:	3c 83       	std	Y+4, r19	; 0x04
    47a2:	2b 83       	std	Y+3, r18	; 0x03
    47a4:	8b 81       	ldd	r24, Y+3	; 0x03
    47a6:	9c 81       	ldd	r25, Y+4	; 0x04
    47a8:	81 30       	cpi	r24, 0x01	; 1
    47aa:	91 05       	cpc	r25, r1
    47ac:	09 f4       	brne	.+2      	; 0x47b0 <intitalizeExtiRunTimeChange+0x106>
    47ae:	42 c0       	rjmp	.+132    	; 0x4834 <intitalizeExtiRunTimeChange+0x18a>
    47b0:	2b 81       	ldd	r18, Y+3	; 0x03
    47b2:	3c 81       	ldd	r19, Y+4	; 0x04
    47b4:	22 30       	cpi	r18, 0x02	; 2
    47b6:	31 05       	cpc	r19, r1
    47b8:	2c f4       	brge	.+10     	; 0x47c4 <intitalizeExtiRunTimeChange+0x11a>
    47ba:	8b 81       	ldd	r24, Y+3	; 0x03
    47bc:	9c 81       	ldd	r25, Y+4	; 0x04
    47be:	00 97       	sbiw	r24, 0x00	; 0
    47c0:	61 f0       	breq	.+24     	; 0x47da <intitalizeExtiRunTimeChange+0x130>
    47c2:	46 c0       	rjmp	.+140    	; 0x4850 <intitalizeExtiRunTimeChange+0x1a6>
    47c4:	2b 81       	ldd	r18, Y+3	; 0x03
    47c6:	3c 81       	ldd	r19, Y+4	; 0x04
    47c8:	22 30       	cpi	r18, 0x02	; 2
    47ca:	31 05       	cpc	r19, r1
    47cc:	a9 f0       	breq	.+42     	; 0x47f8 <intitalizeExtiRunTimeChange+0x14e>
    47ce:	8b 81       	ldd	r24, Y+3	; 0x03
    47d0:	9c 81       	ldd	r25, Y+4	; 0x04
    47d2:	83 30       	cpi	r24, 0x03	; 3
    47d4:	91 05       	cpc	r25, r1
    47d6:	f9 f0       	breq	.+62     	; 0x4816 <intitalizeExtiRunTimeChange+0x16c>
    47d8:	3b c0       	rjmp	.+118    	; 0x4850 <intitalizeExtiRunTimeChange+0x1a6>
		{
		case EXTI_LOGICAL_CHANGE:
			SET_BIT(EXTI_MCUCR,MCUCR_ISC10);
    47da:	a5 e5       	ldi	r26, 0x55	; 85
    47dc:	b0 e0       	ldi	r27, 0x00	; 0
    47de:	e5 e5       	ldi	r30, 0x55	; 85
    47e0:	f0 e0       	ldi	r31, 0x00	; 0
    47e2:	80 81       	ld	r24, Z
    47e4:	84 60       	ori	r24, 0x04	; 4
    47e6:	8c 93       	st	X, r24
			CLEAR_BIT(EXTI_MCUCR,MCUCR_ISC11);
    47e8:	a5 e5       	ldi	r26, 0x55	; 85
    47ea:	b0 e0       	ldi	r27, 0x00	; 0
    47ec:	e5 e5       	ldi	r30, 0x55	; 85
    47ee:	f0 e0       	ldi	r31, 0x00	; 0
    47f0:	80 81       	ld	r24, Z
    47f2:	87 7f       	andi	r24, 0xF7	; 247
    47f4:	8c 93       	st	X, r24
    47f6:	2c c0       	rjmp	.+88     	; 0x4850 <intitalizeExtiRunTimeChange+0x1a6>
		break;
		case EXTI_FALLING_EDGE:
		    CLEAR_BIT(EXTI_MCUCR,MCUCR_ISC10);
    47f8:	a5 e5       	ldi	r26, 0x55	; 85
    47fa:	b0 e0       	ldi	r27, 0x00	; 0
    47fc:	e5 e5       	ldi	r30, 0x55	; 85
    47fe:	f0 e0       	ldi	r31, 0x00	; 0
    4800:	80 81       	ld	r24, Z
    4802:	8b 7f       	andi	r24, 0xFB	; 251
    4804:	8c 93       	st	X, r24
			SET_BIT(EXTI_MCUCR,MCUCR_ISC11);
    4806:	a5 e5       	ldi	r26, 0x55	; 85
    4808:	b0 e0       	ldi	r27, 0x00	; 0
    480a:	e5 e5       	ldi	r30, 0x55	; 85
    480c:	f0 e0       	ldi	r31, 0x00	; 0
    480e:	80 81       	ld	r24, Z
    4810:	88 60       	ori	r24, 0x08	; 8
    4812:	8c 93       	st	X, r24
    4814:	1d c0       	rjmp	.+58     	; 0x4850 <intitalizeExtiRunTimeChange+0x1a6>
		break;
		case EXTI_RISING_EDGE:
			SET_BIT(EXTI_MCUCR,MCUCR_ISC10);
    4816:	a5 e5       	ldi	r26, 0x55	; 85
    4818:	b0 e0       	ldi	r27, 0x00	; 0
    481a:	e5 e5       	ldi	r30, 0x55	; 85
    481c:	f0 e0       	ldi	r31, 0x00	; 0
    481e:	80 81       	ld	r24, Z
    4820:	84 60       	ori	r24, 0x04	; 4
    4822:	8c 93       	st	X, r24
			SET_BIT(EXTI_MCUCR,MCUCR_ISC11);
    4824:	a5 e5       	ldi	r26, 0x55	; 85
    4826:	b0 e0       	ldi	r27, 0x00	; 0
    4828:	e5 e5       	ldi	r30, 0x55	; 85
    482a:	f0 e0       	ldi	r31, 0x00	; 0
    482c:	80 81       	ld	r24, Z
    482e:	88 60       	ori	r24, 0x08	; 8
    4830:	8c 93       	st	X, r24
    4832:	0e c0       	rjmp	.+28     	; 0x4850 <intitalizeExtiRunTimeChange+0x1a6>
		break;
		case EXTI_LOW_LEVEL:
			CLEAR_BIT(EXTI_MCUCR,MCUCR_ISC10);
    4834:	a5 e5       	ldi	r26, 0x55	; 85
    4836:	b0 e0       	ldi	r27, 0x00	; 0
    4838:	e5 e5       	ldi	r30, 0x55	; 85
    483a:	f0 e0       	ldi	r31, 0x00	; 0
    483c:	80 81       	ld	r24, Z
    483e:	8b 7f       	andi	r24, 0xFB	; 251
    4840:	8c 93       	st	X, r24
			CLEAR_BIT(EXTI_MCUCR,MCUCR_ISC11);
    4842:	a5 e5       	ldi	r26, 0x55	; 85
    4844:	b0 e0       	ldi	r27, 0x00	; 0
    4846:	e5 e5       	ldi	r30, 0x55	; 85
    4848:	f0 e0       	ldi	r31, 0x00	; 0
    484a:	80 81       	ld	r24, Z
    484c:	87 7f       	andi	r24, 0xF7	; 247
    484e:	8c 93       	st	X, r24


	}


}
    4850:	28 96       	adiw	r28, 0x08	; 8
    4852:	0f b6       	in	r0, 0x3f	; 63
    4854:	f8 94       	cli
    4856:	de bf       	out	0x3e, r29	; 62
    4858:	0f be       	out	0x3f, r0	; 63
    485a:	cd bf       	out	0x3d, r28	; 61
    485c:	cf 91       	pop	r28
    485e:	df 91       	pop	r29
    4860:	08 95       	ret

00004862 <intializeExti>:

void intializeExti(void(*ptf)(void))
{
    4862:	df 93       	push	r29
    4864:	cf 93       	push	r28
    4866:	cd b7       	in	r28, 0x3d	; 61
    4868:	de b7       	in	r29, 0x3e	; 62
    486a:	29 97       	sbiw	r28, 0x09	; 9
    486c:	0f b6       	in	r0, 0x3f	; 63
    486e:	f8 94       	cli
    4870:	de bf       	out	0x3e, r29	; 62
    4872:	0f be       	out	0x3f, r0	; 63
    4874:	cd bf       	out	0x3d, r28	; 61
    4876:	9b 83       	std	Y+3, r25	; 0x03
    4878:	8a 83       	std	Y+2, r24	; 0x02
	globalInterruptManipulate(GLOBAL_INTERRUPT_ENABLE);
    487a:	81 e0       	ldi	r24, 0x01	; 1
    487c:	0e 94 37 38 	call	0x706e	; 0x706e <globalInterruptManipulate>

	for(uint8 i = 0;i<NUMBER_OF_USED_EXTI;i++)
    4880:	19 82       	std	Y+1, r1	; 0x01
    4882:	0a c1       	rjmp	.+532    	; 0x4a98 <intializeExti+0x236>
	{
		switch(arrOfUsedExternalInterrupt[i])
    4884:	89 81       	ldd	r24, Y+1	; 0x01
    4886:	88 2f       	mov	r24, r24
    4888:	90 e0       	ldi	r25, 0x00	; 0
    488a:	fc 01       	movw	r30, r24
    488c:	e5 51       	subi	r30, 0x15	; 21
    488e:	fe 4f       	sbci	r31, 0xFE	; 254
    4890:	80 81       	ld	r24, Z
    4892:	28 2f       	mov	r18, r24
    4894:	30 e0       	ldi	r19, 0x00	; 0
    4896:	39 87       	std	Y+9, r19	; 0x09
    4898:	28 87       	std	Y+8, r18	; 0x08
    489a:	88 85       	ldd	r24, Y+8	; 0x08
    489c:	99 85       	ldd	r25, Y+9	; 0x09
    489e:	81 30       	cpi	r24, 0x01	; 1
    48a0:	91 05       	cpc	r25, r1
    48a2:	09 f4       	brne	.+2      	; 0x48a6 <intializeExti+0x44>
    48a4:	7a c0       	rjmp	.+244    	; 0x499a <intializeExti+0x138>
    48a6:	28 85       	ldd	r18, Y+8	; 0x08
    48a8:	39 85       	ldd	r19, Y+9	; 0x09
    48aa:	22 30       	cpi	r18, 0x02	; 2
    48ac:	31 05       	cpc	r19, r1
    48ae:	09 f4       	brne	.+2      	; 0x48b2 <intializeExti+0x50>
    48b0:	e3 c0       	rjmp	.+454    	; 0x4a78 <intializeExti+0x216>
    48b2:	88 85       	ldd	r24, Y+8	; 0x08
    48b4:	99 85       	ldd	r25, Y+9	; 0x09
    48b6:	00 97       	sbiw	r24, 0x00	; 0
    48b8:	09 f0       	breq	.+2      	; 0x48bc <intializeExti+0x5a>
    48ba:	eb c0       	rjmp	.+470    	; 0x4a92 <intializeExti+0x230>
		{
		case INT0_EN:
			SET_BIT(EXTI_GICR,GICR_INT0);
    48bc:	ab e5       	ldi	r26, 0x5B	; 91
    48be:	b0 e0       	ldi	r27, 0x00	; 0
    48c0:	eb e5       	ldi	r30, 0x5B	; 91
    48c2:	f0 e0       	ldi	r31, 0x00	; 0
    48c4:	80 81       	ld	r24, Z
    48c6:	80 64       	ori	r24, 0x40	; 64
    48c8:	8c 93       	st	X, r24
			ptToExtiCallBackFunction1 = ptf;
    48ca:	8a 81       	ldd	r24, Y+2	; 0x02
    48cc:	9b 81       	ldd	r25, Y+3	; 0x03
    48ce:	90 93 17 02 	sts	0x0217, r25
    48d2:	80 93 16 02 	sts	0x0216, r24
			switch(arrOfUsedExternalInterruptModes[i])
    48d6:	89 81       	ldd	r24, Y+1	; 0x01
    48d8:	88 2f       	mov	r24, r24
    48da:	90 e0       	ldi	r25, 0x00	; 0
    48dc:	fc 01       	movw	r30, r24
    48de:	e8 58       	subi	r30, 0x88	; 136
    48e0:	fe 4f       	sbci	r31, 0xFE	; 254
    48e2:	80 81       	ld	r24, Z
    48e4:	28 2f       	mov	r18, r24
    48e6:	30 e0       	ldi	r19, 0x00	; 0
    48e8:	3f 83       	std	Y+7, r19	; 0x07
    48ea:	2e 83       	std	Y+6, r18	; 0x06
    48ec:	8e 81       	ldd	r24, Y+6	; 0x06
    48ee:	9f 81       	ldd	r25, Y+7	; 0x07
    48f0:	81 30       	cpi	r24, 0x01	; 1
    48f2:	91 05       	cpc	r25, r1
    48f4:	09 f4       	brne	.+2      	; 0x48f8 <intializeExti+0x96>
    48f6:	42 c0       	rjmp	.+132    	; 0x497c <intializeExti+0x11a>
    48f8:	2e 81       	ldd	r18, Y+6	; 0x06
    48fa:	3f 81       	ldd	r19, Y+7	; 0x07
    48fc:	22 30       	cpi	r18, 0x02	; 2
    48fe:	31 05       	cpc	r19, r1
    4900:	2c f4       	brge	.+10     	; 0x490c <intializeExti+0xaa>
    4902:	8e 81       	ldd	r24, Y+6	; 0x06
    4904:	9f 81       	ldd	r25, Y+7	; 0x07
    4906:	00 97       	sbiw	r24, 0x00	; 0
    4908:	61 f0       	breq	.+24     	; 0x4922 <intializeExti+0xc0>
    490a:	c3 c0       	rjmp	.+390    	; 0x4a92 <intializeExti+0x230>
    490c:	2e 81       	ldd	r18, Y+6	; 0x06
    490e:	3f 81       	ldd	r19, Y+7	; 0x07
    4910:	22 30       	cpi	r18, 0x02	; 2
    4912:	31 05       	cpc	r19, r1
    4914:	a9 f0       	breq	.+42     	; 0x4940 <intializeExti+0xde>
    4916:	8e 81       	ldd	r24, Y+6	; 0x06
    4918:	9f 81       	ldd	r25, Y+7	; 0x07
    491a:	83 30       	cpi	r24, 0x03	; 3
    491c:	91 05       	cpc	r25, r1
    491e:	f9 f0       	breq	.+62     	; 0x495e <intializeExti+0xfc>
    4920:	b8 c0       	rjmp	.+368    	; 0x4a92 <intializeExti+0x230>
			{

			case EXTI_LOGICAL_CHANGE:
				SET_BIT(EXTI_MCUCR,MCUCR_ISC00);
    4922:	a5 e5       	ldi	r26, 0x55	; 85
    4924:	b0 e0       	ldi	r27, 0x00	; 0
    4926:	e5 e5       	ldi	r30, 0x55	; 85
    4928:	f0 e0       	ldi	r31, 0x00	; 0
    492a:	80 81       	ld	r24, Z
    492c:	81 60       	ori	r24, 0x01	; 1
    492e:	8c 93       	st	X, r24
				CLEAR_BIT(EXTI_MCUCR,MCUCR_ISC01);
    4930:	a5 e5       	ldi	r26, 0x55	; 85
    4932:	b0 e0       	ldi	r27, 0x00	; 0
    4934:	e5 e5       	ldi	r30, 0x55	; 85
    4936:	f0 e0       	ldi	r31, 0x00	; 0
    4938:	80 81       	ld	r24, Z
    493a:	8d 7f       	andi	r24, 0xFD	; 253
    493c:	8c 93       	st	X, r24
    493e:	a9 c0       	rjmp	.+338    	; 0x4a92 <intializeExti+0x230>
				break;
			case EXTI_FALLING_EDGE:
				CLEAR_BIT(EXTI_MCUCR,MCUCR_ISC00);
    4940:	a5 e5       	ldi	r26, 0x55	; 85
    4942:	b0 e0       	ldi	r27, 0x00	; 0
    4944:	e5 e5       	ldi	r30, 0x55	; 85
    4946:	f0 e0       	ldi	r31, 0x00	; 0
    4948:	80 81       	ld	r24, Z
    494a:	8e 7f       	andi	r24, 0xFE	; 254
    494c:	8c 93       	st	X, r24
				SET_BIT(EXTI_MCUCR,MCUCR_ISC01);
    494e:	a5 e5       	ldi	r26, 0x55	; 85
    4950:	b0 e0       	ldi	r27, 0x00	; 0
    4952:	e5 e5       	ldi	r30, 0x55	; 85
    4954:	f0 e0       	ldi	r31, 0x00	; 0
    4956:	80 81       	ld	r24, Z
    4958:	82 60       	ori	r24, 0x02	; 2
    495a:	8c 93       	st	X, r24
    495c:	9a c0       	rjmp	.+308    	; 0x4a92 <intializeExti+0x230>
				break;
			case EXTI_RISING_EDGE:
				SET_BIT(EXTI_MCUCR,MCUCR_ISC00);
    495e:	a5 e5       	ldi	r26, 0x55	; 85
    4960:	b0 e0       	ldi	r27, 0x00	; 0
    4962:	e5 e5       	ldi	r30, 0x55	; 85
    4964:	f0 e0       	ldi	r31, 0x00	; 0
    4966:	80 81       	ld	r24, Z
    4968:	81 60       	ori	r24, 0x01	; 1
    496a:	8c 93       	st	X, r24
				SET_BIT(EXTI_MCUCR,MCUCR_ISC01);
    496c:	a5 e5       	ldi	r26, 0x55	; 85
    496e:	b0 e0       	ldi	r27, 0x00	; 0
    4970:	e5 e5       	ldi	r30, 0x55	; 85
    4972:	f0 e0       	ldi	r31, 0x00	; 0
    4974:	80 81       	ld	r24, Z
    4976:	82 60       	ori	r24, 0x02	; 2
    4978:	8c 93       	st	X, r24
    497a:	8b c0       	rjmp	.+278    	; 0x4a92 <intializeExti+0x230>
				break;
			case EXTI_LOW_LEVEL:
				CLEAR_BIT(EXTI_MCUCR,MCUCR_ISC00);
    497c:	a5 e5       	ldi	r26, 0x55	; 85
    497e:	b0 e0       	ldi	r27, 0x00	; 0
    4980:	e5 e5       	ldi	r30, 0x55	; 85
    4982:	f0 e0       	ldi	r31, 0x00	; 0
    4984:	80 81       	ld	r24, Z
    4986:	8e 7f       	andi	r24, 0xFE	; 254
    4988:	8c 93       	st	X, r24
				CLEAR_BIT(EXTI_MCUCR,MCUCR_ISC01);
    498a:	a5 e5       	ldi	r26, 0x55	; 85
    498c:	b0 e0       	ldi	r27, 0x00	; 0
    498e:	e5 e5       	ldi	r30, 0x55	; 85
    4990:	f0 e0       	ldi	r31, 0x00	; 0
    4992:	80 81       	ld	r24, Z
    4994:	8d 7f       	andi	r24, 0xFD	; 253
    4996:	8c 93       	st	X, r24
    4998:	7c c0       	rjmp	.+248    	; 0x4a92 <intializeExti+0x230>

			}

			break;
		case INT1_EN:
			SET_BIT(EXTI_GICR,GICR_INT1);
    499a:	ab e5       	ldi	r26, 0x5B	; 91
    499c:	b0 e0       	ldi	r27, 0x00	; 0
    499e:	eb e5       	ldi	r30, 0x5B	; 91
    49a0:	f0 e0       	ldi	r31, 0x00	; 0
    49a2:	80 81       	ld	r24, Z
    49a4:	80 68       	ori	r24, 0x80	; 128
    49a6:	8c 93       	st	X, r24
			ptToExtiCallBackFunction2 = ptf;
    49a8:	8a 81       	ldd	r24, Y+2	; 0x02
    49aa:	9b 81       	ldd	r25, Y+3	; 0x03
    49ac:	90 93 15 02 	sts	0x0215, r25
    49b0:	80 93 14 02 	sts	0x0214, r24
			switch(arrOfUsedExternalInterruptModes[i])
    49b4:	89 81       	ldd	r24, Y+1	; 0x01
    49b6:	88 2f       	mov	r24, r24
    49b8:	90 e0       	ldi	r25, 0x00	; 0
    49ba:	fc 01       	movw	r30, r24
    49bc:	e8 58       	subi	r30, 0x88	; 136
    49be:	fe 4f       	sbci	r31, 0xFE	; 254
    49c0:	80 81       	ld	r24, Z
    49c2:	28 2f       	mov	r18, r24
    49c4:	30 e0       	ldi	r19, 0x00	; 0
    49c6:	3d 83       	std	Y+5, r19	; 0x05
    49c8:	2c 83       	std	Y+4, r18	; 0x04
    49ca:	8c 81       	ldd	r24, Y+4	; 0x04
    49cc:	9d 81       	ldd	r25, Y+5	; 0x05
    49ce:	81 30       	cpi	r24, 0x01	; 1
    49d0:	91 05       	cpc	r25, r1
    49d2:	09 f4       	brne	.+2      	; 0x49d6 <intializeExti+0x174>
    49d4:	42 c0       	rjmp	.+132    	; 0x4a5a <intializeExti+0x1f8>
    49d6:	2c 81       	ldd	r18, Y+4	; 0x04
    49d8:	3d 81       	ldd	r19, Y+5	; 0x05
    49da:	22 30       	cpi	r18, 0x02	; 2
    49dc:	31 05       	cpc	r19, r1
    49de:	2c f4       	brge	.+10     	; 0x49ea <intializeExti+0x188>
    49e0:	8c 81       	ldd	r24, Y+4	; 0x04
    49e2:	9d 81       	ldd	r25, Y+5	; 0x05
    49e4:	00 97       	sbiw	r24, 0x00	; 0
    49e6:	61 f0       	breq	.+24     	; 0x4a00 <intializeExti+0x19e>
    49e8:	54 c0       	rjmp	.+168    	; 0x4a92 <intializeExti+0x230>
    49ea:	2c 81       	ldd	r18, Y+4	; 0x04
    49ec:	3d 81       	ldd	r19, Y+5	; 0x05
    49ee:	22 30       	cpi	r18, 0x02	; 2
    49f0:	31 05       	cpc	r19, r1
    49f2:	a9 f0       	breq	.+42     	; 0x4a1e <intializeExti+0x1bc>
    49f4:	8c 81       	ldd	r24, Y+4	; 0x04
    49f6:	9d 81       	ldd	r25, Y+5	; 0x05
    49f8:	83 30       	cpi	r24, 0x03	; 3
    49fa:	91 05       	cpc	r25, r1
    49fc:	f9 f0       	breq	.+62     	; 0x4a3c <intializeExti+0x1da>
    49fe:	49 c0       	rjmp	.+146    	; 0x4a92 <intializeExti+0x230>
			{

			case EXTI_LOGICAL_CHANGE:
			     SET_BIT(EXTI_MCUCR,MCUCR_ISC10);
    4a00:	a5 e5       	ldi	r26, 0x55	; 85
    4a02:	b0 e0       	ldi	r27, 0x00	; 0
    4a04:	e5 e5       	ldi	r30, 0x55	; 85
    4a06:	f0 e0       	ldi	r31, 0x00	; 0
    4a08:	80 81       	ld	r24, Z
    4a0a:	84 60       	ori	r24, 0x04	; 4
    4a0c:	8c 93       	st	X, r24
			     CLEAR_BIT(EXTI_MCUCR,MCUCR_ISC11);
    4a0e:	a5 e5       	ldi	r26, 0x55	; 85
    4a10:	b0 e0       	ldi	r27, 0x00	; 0
    4a12:	e5 e5       	ldi	r30, 0x55	; 85
    4a14:	f0 e0       	ldi	r31, 0x00	; 0
    4a16:	80 81       	ld	r24, Z
    4a18:	87 7f       	andi	r24, 0xF7	; 247
    4a1a:	8c 93       	st	X, r24
    4a1c:	3a c0       	rjmp	.+116    	; 0x4a92 <intializeExti+0x230>
			break;
			case EXTI_FALLING_EDGE:
			     CLEAR_BIT(EXTI_MCUCR,MCUCR_ISC10);
    4a1e:	a5 e5       	ldi	r26, 0x55	; 85
    4a20:	b0 e0       	ldi	r27, 0x00	; 0
    4a22:	e5 e5       	ldi	r30, 0x55	; 85
    4a24:	f0 e0       	ldi	r31, 0x00	; 0
    4a26:	80 81       	ld	r24, Z
    4a28:	8b 7f       	andi	r24, 0xFB	; 251
    4a2a:	8c 93       	st	X, r24
			     SET_BIT(EXTI_MCUCR,MCUCR_ISC11);
    4a2c:	a5 e5       	ldi	r26, 0x55	; 85
    4a2e:	b0 e0       	ldi	r27, 0x00	; 0
    4a30:	e5 e5       	ldi	r30, 0x55	; 85
    4a32:	f0 e0       	ldi	r31, 0x00	; 0
    4a34:	80 81       	ld	r24, Z
    4a36:	88 60       	ori	r24, 0x08	; 8
    4a38:	8c 93       	st	X, r24
    4a3a:	2b c0       	rjmp	.+86     	; 0x4a92 <intializeExti+0x230>
			break;
			case EXTI_RISING_EDGE:
				 SET_BIT(EXTI_MCUCR,MCUCR_ISC10);
    4a3c:	a5 e5       	ldi	r26, 0x55	; 85
    4a3e:	b0 e0       	ldi	r27, 0x00	; 0
    4a40:	e5 e5       	ldi	r30, 0x55	; 85
    4a42:	f0 e0       	ldi	r31, 0x00	; 0
    4a44:	80 81       	ld	r24, Z
    4a46:	84 60       	ori	r24, 0x04	; 4
    4a48:	8c 93       	st	X, r24
				 SET_BIT(EXTI_MCUCR,MCUCR_ISC11);
    4a4a:	a5 e5       	ldi	r26, 0x55	; 85
    4a4c:	b0 e0       	ldi	r27, 0x00	; 0
    4a4e:	e5 e5       	ldi	r30, 0x55	; 85
    4a50:	f0 e0       	ldi	r31, 0x00	; 0
    4a52:	80 81       	ld	r24, Z
    4a54:	88 60       	ori	r24, 0x08	; 8
    4a56:	8c 93       	st	X, r24
    4a58:	1c c0       	rjmp	.+56     	; 0x4a92 <intializeExti+0x230>
			break;
		    case EXTI_LOW_LEVEL:
				 CLEAR_BIT(EXTI_MCUCR,MCUCR_ISC10);
    4a5a:	a5 e5       	ldi	r26, 0x55	; 85
    4a5c:	b0 e0       	ldi	r27, 0x00	; 0
    4a5e:	e5 e5       	ldi	r30, 0x55	; 85
    4a60:	f0 e0       	ldi	r31, 0x00	; 0
    4a62:	80 81       	ld	r24, Z
    4a64:	8b 7f       	andi	r24, 0xFB	; 251
    4a66:	8c 93       	st	X, r24
				 CLEAR_BIT(EXTI_MCUCR,MCUCR_ISC11);
    4a68:	a5 e5       	ldi	r26, 0x55	; 85
    4a6a:	b0 e0       	ldi	r27, 0x00	; 0
    4a6c:	e5 e5       	ldi	r30, 0x55	; 85
    4a6e:	f0 e0       	ldi	r31, 0x00	; 0
    4a70:	80 81       	ld	r24, Z
    4a72:	87 7f       	andi	r24, 0xF7	; 247
    4a74:	8c 93       	st	X, r24
    4a76:	0d c0       	rjmp	.+26     	; 0x4a92 <intializeExti+0x230>

			break;


		case INT2_EN:
			ptToExtiCallBackFunction3 = ptf;
    4a78:	8a 81       	ldd	r24, Y+2	; 0x02
    4a7a:	9b 81       	ldd	r25, Y+3	; 0x03
    4a7c:	90 93 19 02 	sts	0x0219, r25
    4a80:	80 93 18 02 	sts	0x0218, r24
			SET_BIT(EXTI_GICR,GICR_INT2);
    4a84:	ab e5       	ldi	r26, 0x5B	; 91
    4a86:	b0 e0       	ldi	r27, 0x00	; 0
    4a88:	eb e5       	ldi	r30, 0x5B	; 91
    4a8a:	f0 e0       	ldi	r31, 0x00	; 0
    4a8c:	80 81       	ld	r24, Z
    4a8e:	80 62       	ori	r24, 0x20	; 32
    4a90:	8c 93       	st	X, r24

void intializeExti(void(*ptf)(void))
{
	globalInterruptManipulate(GLOBAL_INTERRUPT_ENABLE);

	for(uint8 i = 0;i<NUMBER_OF_USED_EXTI;i++)
    4a92:	89 81       	ldd	r24, Y+1	; 0x01
    4a94:	8f 5f       	subi	r24, 0xFF	; 255
    4a96:	89 83       	std	Y+1, r24	; 0x01
    4a98:	89 81       	ldd	r24, Y+1	; 0x01
    4a9a:	88 23       	and	r24, r24
    4a9c:	09 f4       	brne	.+2      	; 0x4aa0 <intializeExti+0x23e>
    4a9e:	f2 ce       	rjmp	.-540    	; 0x4884 <intializeExti+0x22>

	}



}
    4aa0:	29 96       	adiw	r28, 0x09	; 9
    4aa2:	0f b6       	in	r0, 0x3f	; 63
    4aa4:	f8 94       	cli
    4aa6:	de bf       	out	0x3e, r29	; 62
    4aa8:	0f be       	out	0x3f, r0	; 63
    4aaa:	cd bf       	out	0x3d, r28	; 61
    4aac:	cf 91       	pop	r28
    4aae:	df 91       	pop	r29
    4ab0:	08 95       	ret

00004ab2 <__vector_1>:
 * to the external interrupt function !
 * indirect call.....
 */

ISR(INTO_EXTI0)
{
    4ab2:	1f 92       	push	r1
    4ab4:	0f 92       	push	r0
    4ab6:	0f b6       	in	r0, 0x3f	; 63
    4ab8:	0f 92       	push	r0
    4aba:	11 24       	eor	r1, r1
    4abc:	2f 93       	push	r18
    4abe:	3f 93       	push	r19
    4ac0:	4f 93       	push	r20
    4ac2:	5f 93       	push	r21
    4ac4:	6f 93       	push	r22
    4ac6:	7f 93       	push	r23
    4ac8:	8f 93       	push	r24
    4aca:	9f 93       	push	r25
    4acc:	af 93       	push	r26
    4ace:	bf 93       	push	r27
    4ad0:	ef 93       	push	r30
    4ad2:	ff 93       	push	r31
    4ad4:	df 93       	push	r29
    4ad6:	cf 93       	push	r28
    4ad8:	cd b7       	in	r28, 0x3d	; 61
    4ada:	de b7       	in	r29, 0x3e	; 62

	ptToExtiCallBackFunction1();
    4adc:	e0 91 16 02 	lds	r30, 0x0216
    4ae0:	f0 91 17 02 	lds	r31, 0x0217
    4ae4:	09 95       	icall
//	AVEManipulateLed(BIT4,PORTB,LED_ON);
	//AVEManipulateLed(BIT4,PORTB,LED_OFF);

	//AVEManipulateLed(BIT4,PORTB,LED_ON);
}
    4ae6:	cf 91       	pop	r28
    4ae8:	df 91       	pop	r29
    4aea:	ff 91       	pop	r31
    4aec:	ef 91       	pop	r30
    4aee:	bf 91       	pop	r27
    4af0:	af 91       	pop	r26
    4af2:	9f 91       	pop	r25
    4af4:	8f 91       	pop	r24
    4af6:	7f 91       	pop	r23
    4af8:	6f 91       	pop	r22
    4afa:	5f 91       	pop	r21
    4afc:	4f 91       	pop	r20
    4afe:	3f 91       	pop	r19
    4b00:	2f 91       	pop	r18
    4b02:	0f 90       	pop	r0
    4b04:	0f be       	out	0x3f, r0	; 63
    4b06:	0f 90       	pop	r0
    4b08:	1f 90       	pop	r1
    4b0a:	18 95       	reti

00004b0c <AVE_gpioIntialization>:
 * input pullup.
 */


void AVE_gpioIntialization(void)
{
    4b0c:	df 93       	push	r29
    4b0e:	cf 93       	push	r28
    4b10:	cd b7       	in	r28, 0x3d	; 61
    4b12:	de b7       	in	r29, 0x3e	; 62


#if PORTA_BIT0 == OUTPUT
	SET_PINS_VALUE(GPIOA_DDR,BIT0);
    4b14:	aa e3       	ldi	r26, 0x3A	; 58
    4b16:	b0 e0       	ldi	r27, 0x00	; 0
    4b18:	ea e3       	ldi	r30, 0x3A	; 58
    4b1a:	f0 e0       	ldi	r31, 0x00	; 0
    4b1c:	80 81       	ld	r24, Z
    4b1e:	81 60       	ori	r24, 0x01	; 1
    4b20:	8c 93       	st	X, r24
	SET_PINS_VALUE(GPIOA_PORT,BIT0);
#endif


#if PORTA_BIT1 == OUTPUT
	SET_PINS_VALUE(GPIOA_DDR,BIT1);
    4b22:	aa e3       	ldi	r26, 0x3A	; 58
    4b24:	b0 e0       	ldi	r27, 0x00	; 0
    4b26:	ea e3       	ldi	r30, 0x3A	; 58
    4b28:	f0 e0       	ldi	r31, 0x00	; 0
    4b2a:	80 81       	ld	r24, Z
    4b2c:	82 60       	ori	r24, 0x02	; 2
    4b2e:	8c 93       	st	X, r24
#endif



#if PORTA_BIT2 == OUTPUT
	SET_PINS_VALUE(GPIOA_DDR,BIT2);
    4b30:	aa e3       	ldi	r26, 0x3A	; 58
    4b32:	b0 e0       	ldi	r27, 0x00	; 0
    4b34:	ea e3       	ldi	r30, 0x3A	; 58
    4b36:	f0 e0       	ldi	r31, 0x00	; 0
    4b38:	80 81       	ld	r24, Z
    4b3a:	84 60       	ori	r24, 0x04	; 4
    4b3c:	8c 93       	st	X, r24
	SET_PINS_VALUE(GPIOA_PORT,BIT2);
#endif


#if PORTA_BIT3 == OUTPUT
	SET_PINS_VALUE(GPIOA_DDR,BIT3);
    4b3e:	aa e3       	ldi	r26, 0x3A	; 58
    4b40:	b0 e0       	ldi	r27, 0x00	; 0
    4b42:	ea e3       	ldi	r30, 0x3A	; 58
    4b44:	f0 e0       	ldi	r31, 0x00	; 0
    4b46:	80 81       	ld	r24, Z
    4b48:	88 60       	ori	r24, 0x08	; 8
    4b4a:	8c 93       	st	X, r24
#endif



#if PORTA_BIT4 == OUTPUT
	SET_PINS_VALUE(GPIOA_DDR,BIT4);
    4b4c:	aa e3       	ldi	r26, 0x3A	; 58
    4b4e:	b0 e0       	ldi	r27, 0x00	; 0
    4b50:	ea e3       	ldi	r30, 0x3A	; 58
    4b52:	f0 e0       	ldi	r31, 0x00	; 0
    4b54:	80 81       	ld	r24, Z
    4b56:	80 61       	ori	r24, 0x10	; 16
    4b58:	8c 93       	st	X, r24
#endif



#if PORTA_BIT5 == OUTPUT
	SET_PINS_VALUE(GPIOA_DDR,BIT5);
    4b5a:	aa e3       	ldi	r26, 0x3A	; 58
    4b5c:	b0 e0       	ldi	r27, 0x00	; 0
    4b5e:	ea e3       	ldi	r30, 0x3A	; 58
    4b60:	f0 e0       	ldi	r31, 0x00	; 0
    4b62:	80 81       	ld	r24, Z
    4b64:	80 62       	ori	r24, 0x20	; 32
    4b66:	8c 93       	st	X, r24
#endif



#if PORTA_BIT6 == OUTPUT
	SET_PINS_VALUE(GPIOA_DDR,BIT6);
    4b68:	aa e3       	ldi	r26, 0x3A	; 58
    4b6a:	b0 e0       	ldi	r27, 0x00	; 0
    4b6c:	ea e3       	ldi	r30, 0x3A	; 58
    4b6e:	f0 e0       	ldi	r31, 0x00	; 0
    4b70:	80 81       	ld	r24, Z
    4b72:	80 64       	ori	r24, 0x40	; 64
    4b74:	8c 93       	st	X, r24
	SET_PINS_VALUE(GPIOA_PORT,BIT6);
#endif


#if PORTA_BIT7 == OUTPUT
	SET_PINS_VALUE(GPIOA_DDR,BIT7);
    4b76:	aa e3       	ldi	r26, 0x3A	; 58
    4b78:	b0 e0       	ldi	r27, 0x00	; 0
    4b7a:	ea e3       	ldi	r30, 0x3A	; 58
    4b7c:	f0 e0       	ldi	r31, 0x00	; 0
    4b7e:	80 81       	ld	r24, Z
    4b80:	80 68       	ori	r24, 0x80	; 128
    4b82:	8c 93       	st	X, r24




#if PORTB_BIT0 == OUTPUT
	SET_PINS_VALUE(GPIOB_DDR,BIT0);
    4b84:	a7 e3       	ldi	r26, 0x37	; 55
    4b86:	b0 e0       	ldi	r27, 0x00	; 0
    4b88:	e7 e3       	ldi	r30, 0x37	; 55
    4b8a:	f0 e0       	ldi	r31, 0x00	; 0
    4b8c:	80 81       	ld	r24, Z
    4b8e:	81 60       	ori	r24, 0x01	; 1
    4b90:	8c 93       	st	X, r24
	SET_PINS_VALUE(GPIOB_PORT,BIT0);
#endif


#if PORTB_BIT1 == OUTPUT
	SET_PINS_VALUE(GPIOA_DDR,BIT1);
    4b92:	aa e3       	ldi	r26, 0x3A	; 58
    4b94:	b0 e0       	ldi	r27, 0x00	; 0
    4b96:	ea e3       	ldi	r30, 0x3A	; 58
    4b98:	f0 e0       	ldi	r31, 0x00	; 0
    4b9a:	80 81       	ld	r24, Z
    4b9c:	82 60       	ori	r24, 0x02	; 2
    4b9e:	8c 93       	st	X, r24
#endif



#if PORTB_BIT2 == OUTPUT
	SET_PINS_VALUE(GPIOB_DDR,BIT2);
    4ba0:	a7 e3       	ldi	r26, 0x37	; 55
    4ba2:	b0 e0       	ldi	r27, 0x00	; 0
    4ba4:	e7 e3       	ldi	r30, 0x37	; 55
    4ba6:	f0 e0       	ldi	r31, 0x00	; 0
    4ba8:	80 81       	ld	r24, Z
    4baa:	84 60       	ori	r24, 0x04	; 4
    4bac:	8c 93       	st	X, r24
	SET_PINS_VALUE(GPIOB_PORT,BIT2);
#endif


#if PORTB_BIT3 == OUTPUT
	SET_PINS_VALUE(GPIOB_DDR,BIT3);
    4bae:	a7 e3       	ldi	r26, 0x37	; 55
    4bb0:	b0 e0       	ldi	r27, 0x00	; 0
    4bb2:	e7 e3       	ldi	r30, 0x37	; 55
    4bb4:	f0 e0       	ldi	r31, 0x00	; 0
    4bb6:	80 81       	ld	r24, Z
    4bb8:	88 60       	ori	r24, 0x08	; 8
    4bba:	8c 93       	st	X, r24
#endif



#if PORTB_BIT4 == OUTPUT
	SET_PINS_VALUE(GPIOB_DDR,BIT4);
    4bbc:	a7 e3       	ldi	r26, 0x37	; 55
    4bbe:	b0 e0       	ldi	r27, 0x00	; 0
    4bc0:	e7 e3       	ldi	r30, 0x37	; 55
    4bc2:	f0 e0       	ldi	r31, 0x00	; 0
    4bc4:	80 81       	ld	r24, Z
    4bc6:	80 61       	ori	r24, 0x10	; 16
    4bc8:	8c 93       	st	X, r24
#endif



#if PORTB_BIT5 == OUTPUT
	SET_PINS_VALUE(GPIOB_DDR,BIT5);
    4bca:	a7 e3       	ldi	r26, 0x37	; 55
    4bcc:	b0 e0       	ldi	r27, 0x00	; 0
    4bce:	e7 e3       	ldi	r30, 0x37	; 55
    4bd0:	f0 e0       	ldi	r31, 0x00	; 0
    4bd2:	80 81       	ld	r24, Z
    4bd4:	80 62       	ori	r24, 0x20	; 32
    4bd6:	8c 93       	st	X, r24
#endif



#if PORTB_BIT6 == OUTPUT
	SET_PINS_VALUE(GPIOB_DDR,BIT6);
    4bd8:	a7 e3       	ldi	r26, 0x37	; 55
    4bda:	b0 e0       	ldi	r27, 0x00	; 0
    4bdc:	e7 e3       	ldi	r30, 0x37	; 55
    4bde:	f0 e0       	ldi	r31, 0x00	; 0
    4be0:	80 81       	ld	r24, Z
    4be2:	80 64       	ori	r24, 0x40	; 64
    4be4:	8c 93       	st	X, r24
	SET_PINS_VALUE(GPIOB_PORT,BIT6);
#endif


#if PORTB_BIT7 == OUTPUT
	SET_PINS_VALUE(GPIOB_DDR,BIT7);
    4be6:	a7 e3       	ldi	r26, 0x37	; 55
    4be8:	b0 e0       	ldi	r27, 0x00	; 0
    4bea:	e7 e3       	ldi	r30, 0x37	; 55
    4bec:	f0 e0       	ldi	r31, 0x00	; 0
    4bee:	80 81       	ld	r24, Z
    4bf0:	80 68       	ori	r24, 0x80	; 128
    4bf2:	8c 93       	st	X, r24


#if PORTC_BIT0 == OUTPUT
	SET_PINS_VALUE(GPIOC_DDR,BIT0);
#elif PORTC_BIT0 == INPUT
	CLR_PINS_VALUE(GPIOC_DDR,BIT0);
    4bf4:	a4 e3       	ldi	r26, 0x34	; 52
    4bf6:	b0 e0       	ldi	r27, 0x00	; 0
    4bf8:	e4 e3       	ldi	r30, 0x34	; 52
    4bfa:	f0 e0       	ldi	r31, 0x00	; 0
    4bfc:	80 81       	ld	r24, Z
    4bfe:	8e 7f       	andi	r24, 0xFE	; 254
    4c00:	8c 93       	st	X, r24


#if PORTC_BIT1 == OUTPUT
	SET_PINS_VALUE(GPIOC_DDR,BIT1);
#elif PORTC_BIT1 == INPUT
	CLR_PINS_VALUE(GPIOC_DDR,BIT1);
    4c02:	a4 e3       	ldi	r26, 0x34	; 52
    4c04:	b0 e0       	ldi	r27, 0x00	; 0
    4c06:	e4 e3       	ldi	r30, 0x34	; 52
    4c08:	f0 e0       	ldi	r31, 0x00	; 0
    4c0a:	80 81       	ld	r24, Z
    4c0c:	8d 7f       	andi	r24, 0xFD	; 253
    4c0e:	8c 93       	st	X, r24


#if PORTC_BIT2 == OUTPUT
	SET_PINS_VALUE(GPIOC_DDR,BIT2);
#elif PORTC_BIT2 == INPUT
	CLR_PINS_VALUE(GPIOC_DDR,BIT2);
    4c10:	a4 e3       	ldi	r26, 0x34	; 52
    4c12:	b0 e0       	ldi	r27, 0x00	; 0
    4c14:	e4 e3       	ldi	r30, 0x34	; 52
    4c16:	f0 e0       	ldi	r31, 0x00	; 0
    4c18:	80 81       	ld	r24, Z
    4c1a:	8b 7f       	andi	r24, 0xFB	; 251
    4c1c:	8c 93       	st	X, r24


#if PORTC_BIT3 == OUTPUT
	SET_PINS_VALUE(GPIOC_DDR,BIT3);
#elif PORTC_BIT3 == INPUT
	CLR_PINS_VALUE(GPIOC_DDR,BIT3);
    4c1e:	a4 e3       	ldi	r26, 0x34	; 52
    4c20:	b0 e0       	ldi	r27, 0x00	; 0
    4c22:	e4 e3       	ldi	r30, 0x34	; 52
    4c24:	f0 e0       	ldi	r31, 0x00	; 0
    4c26:	80 81       	ld	r24, Z
    4c28:	87 7f       	andi	r24, 0xF7	; 247
    4c2a:	8c 93       	st	X, r24


#if PORTC_BIT4 == OUTPUT
	SET_PINS_VALUE(GPIOC_DDR,BIT4);
#elif PORTC_BIT4 == INPUT
	CLR_PINS_VALUE(GPIOC_DDR,BIT4);
    4c2c:	a4 e3       	ldi	r26, 0x34	; 52
    4c2e:	b0 e0       	ldi	r27, 0x00	; 0
    4c30:	e4 e3       	ldi	r30, 0x34	; 52
    4c32:	f0 e0       	ldi	r31, 0x00	; 0
    4c34:	80 81       	ld	r24, Z
    4c36:	8f 7e       	andi	r24, 0xEF	; 239
    4c38:	8c 93       	st	X, r24


#if PORTC_BIT5 == OUTPUT
	SET_PINS_VALUE(GPIOC_DDR,BIT5);
#elif PORTC_BIT5 == INPUT
	CLR_PINS_VALUE(GPIOC_DDR,BIT5);
    4c3a:	a4 e3       	ldi	r26, 0x34	; 52
    4c3c:	b0 e0       	ldi	r27, 0x00	; 0
    4c3e:	e4 e3       	ldi	r30, 0x34	; 52
    4c40:	f0 e0       	ldi	r31, 0x00	; 0
    4c42:	80 81       	ld	r24, Z
    4c44:	8f 7d       	andi	r24, 0xDF	; 223
    4c46:	8c 93       	st	X, r24


#if PORTC_BIT6 == OUTPUT
	SET_PINS_VALUE(GPIOC_DDR,BIT6);
#elif PORTC_BIT6 == INPUT
	CLR_PINS_VALUE(GPIOC_DDR,BIT6);
    4c48:	a4 e3       	ldi	r26, 0x34	; 52
    4c4a:	b0 e0       	ldi	r27, 0x00	; 0
    4c4c:	e4 e3       	ldi	r30, 0x34	; 52
    4c4e:	f0 e0       	ldi	r31, 0x00	; 0
    4c50:	80 81       	ld	r24, Z
    4c52:	8f 7b       	andi	r24, 0xBF	; 191
    4c54:	8c 93       	st	X, r24


#if PORTC_BIT7 == OUTPUT
	SET_PINS_VALUE(GPIOC_DDR,BIT7);
#elif PORTC_BIT7 == INPUT
	CLR_PINS_VALUE(GPIOC_DDR,BIT7);
    4c56:	a4 e3       	ldi	r26, 0x34	; 52
    4c58:	b0 e0       	ldi	r27, 0x00	; 0
    4c5a:	e4 e3       	ldi	r30, 0x34	; 52
    4c5c:	f0 e0       	ldi	r31, 0x00	; 0
    4c5e:	80 81       	ld	r24, Z
    4c60:	8f 77       	andi	r24, 0x7F	; 127
    4c62:	8c 93       	st	X, r24


#if PORTD_BIT0 == OUTPUT
	SET_PINS_VALUE(GPIOD_DDR,BIT0);
#elif PORTD_BIT0 == INPUT
	CLR_PINS_VALUE(GPIOD_DDR,BIT0);
    4c64:	a1 e3       	ldi	r26, 0x31	; 49
    4c66:	b0 e0       	ldi	r27, 0x00	; 0
    4c68:	e1 e3       	ldi	r30, 0x31	; 49
    4c6a:	f0 e0       	ldi	r31, 0x00	; 0
    4c6c:	80 81       	ld	r24, Z
    4c6e:	8e 7f       	andi	r24, 0xFE	; 254
    4c70:	8c 93       	st	X, r24


#if PORTD_BIT1 == OUTPUT
	SET_PINS_VALUE(GPIOD_DDR,BIT1);
#elif PORTD_BIT1 == INPUT
	CLR_PINS_VALUE(GPIOD_DDR,BIT1);
    4c72:	a1 e3       	ldi	r26, 0x31	; 49
    4c74:	b0 e0       	ldi	r27, 0x00	; 0
    4c76:	e1 e3       	ldi	r30, 0x31	; 49
    4c78:	f0 e0       	ldi	r31, 0x00	; 0
    4c7a:	80 81       	ld	r24, Z
    4c7c:	8d 7f       	andi	r24, 0xFD	; 253
    4c7e:	8c 93       	st	X, r24


#if PORTD_BIT2 == OUTPUT
	SET_PINS_VALUE(GPIOD_DDR,BIT2);
#elif PORTD_BIT2 == INPUT
	CLR_PINS_VALUE(GPIOD_DDR,BIT2);
    4c80:	a1 e3       	ldi	r26, 0x31	; 49
    4c82:	b0 e0       	ldi	r27, 0x00	; 0
    4c84:	e1 e3       	ldi	r30, 0x31	; 49
    4c86:	f0 e0       	ldi	r31, 0x00	; 0
    4c88:	80 81       	ld	r24, Z
    4c8a:	8b 7f       	andi	r24, 0xFB	; 251
    4c8c:	8c 93       	st	X, r24


#if PORTD_BIT3 == OUTPUT
	SET_PINS_VALUE(GPIOD_DDR,BIT3);
#elif PORTD_BIT3 == INPUT
	CLR_PINS_VALUE(GPIOD_DDR,BIT3);
    4c8e:	a1 e3       	ldi	r26, 0x31	; 49
    4c90:	b0 e0       	ldi	r27, 0x00	; 0
    4c92:	e1 e3       	ldi	r30, 0x31	; 49
    4c94:	f0 e0       	ldi	r31, 0x00	; 0
    4c96:	80 81       	ld	r24, Z
    4c98:	87 7f       	andi	r24, 0xF7	; 247
    4c9a:	8c 93       	st	X, r24


#if PORTD_BIT4 == OUTPUT
	SET_PINS_VALUE(GPIOD_DDR,BIT4);
#elif PORTD_BIT4 == INPUT
	CLR_PINS_VALUE(GPIOD_DDR,BIT4);
    4c9c:	a1 e3       	ldi	r26, 0x31	; 49
    4c9e:	b0 e0       	ldi	r27, 0x00	; 0
    4ca0:	e1 e3       	ldi	r30, 0x31	; 49
    4ca2:	f0 e0       	ldi	r31, 0x00	; 0
    4ca4:	80 81       	ld	r24, Z
    4ca6:	8f 7e       	andi	r24, 0xEF	; 239
    4ca8:	8c 93       	st	X, r24


#if PORTD_BIT5 == OUTPUT
	SET_PINS_VALUE(GPIOD_DDR,BIT5);
#elif PORTD_BIT5 == INPUT
	CLR_PINS_VALUE(GPIOD_DDR,BIT5);
    4caa:	a1 e3       	ldi	r26, 0x31	; 49
    4cac:	b0 e0       	ldi	r27, 0x00	; 0
    4cae:	e1 e3       	ldi	r30, 0x31	; 49
    4cb0:	f0 e0       	ldi	r31, 0x00	; 0
    4cb2:	80 81       	ld	r24, Z
    4cb4:	8f 7d       	andi	r24, 0xDF	; 223
    4cb6:	8c 93       	st	X, r24


#if PORTD_BIT6 == OUTPUT
	SET_PINS_VALUE(GPIOD_DDR,BIT6);
#elif PORTD_BIT6 == INPUT
	CLR_PINS_VALUE(GPIOD_DDR,BIT6);
    4cb8:	a1 e3       	ldi	r26, 0x31	; 49
    4cba:	b0 e0       	ldi	r27, 0x00	; 0
    4cbc:	e1 e3       	ldi	r30, 0x31	; 49
    4cbe:	f0 e0       	ldi	r31, 0x00	; 0
    4cc0:	80 81       	ld	r24, Z
    4cc2:	8f 7b       	andi	r24, 0xBF	; 191
    4cc4:	8c 93       	st	X, r24


#if PORTD_BIT7 == OUTPUT
	SET_PINS_VALUE(GPIOD_DDR,BIT7);
#elif PORTD_BIT7 == INPUT
	CLR_PINS_VALUE(GPIOD_DDR,BIT7);
    4cc6:	a1 e3       	ldi	r26, 0x31	; 49
    4cc8:	b0 e0       	ldi	r27, 0x00	; 0
    4cca:	e1 e3       	ldi	r30, 0x31	; 49
    4ccc:	f0 e0       	ldi	r31, 0x00	; 0
    4cce:	80 81       	ld	r24, Z
    4cd0:	8f 77       	andi	r24, 0x7F	; 127
    4cd2:	8c 93       	st	X, r24
	SET_PINS_VALUE(GPIOD_PORT,BIT7);
#endif



}
    4cd4:	cf 91       	pop	r28
    4cd6:	df 91       	pop	r29
    4cd8:	08 95       	ret

00004cda <AVE_gpioPortDirection>:

void AVE_gpioPortDirection(uint8 port, uint8 direction)
{
    4cda:	df 93       	push	r29
    4cdc:	cf 93       	push	r28
    4cde:	cd b7       	in	r28, 0x3d	; 61
    4ce0:	de b7       	in	r29, 0x3e	; 62
    4ce2:	2c 97       	sbiw	r28, 0x0c	; 12
    4ce4:	0f b6       	in	r0, 0x3f	; 63
    4ce6:	f8 94       	cli
    4ce8:	de bf       	out	0x3e, r29	; 62
    4cea:	0f be       	out	0x3f, r0	; 63
    4cec:	cd bf       	out	0x3d, r28	; 61
    4cee:	89 83       	std	Y+1, r24	; 0x01
    4cf0:	6a 83       	std	Y+2, r22	; 0x02


	switch(port)
    4cf2:	89 81       	ldd	r24, Y+1	; 0x01
    4cf4:	28 2f       	mov	r18, r24
    4cf6:	30 e0       	ldi	r19, 0x00	; 0
    4cf8:	3c 87       	std	Y+12, r19	; 0x0c
    4cfa:	2b 87       	std	Y+11, r18	; 0x0b
    4cfc:	8b 85       	ldd	r24, Y+11	; 0x0b
    4cfe:	9c 85       	ldd	r25, Y+12	; 0x0c
    4d00:	81 30       	cpi	r24, 0x01	; 1
    4d02:	91 05       	cpc	r25, r1
    4d04:	e1 f1       	breq	.+120    	; 0x4d7e <AVE_gpioPortDirection+0xa4>
    4d06:	2b 85       	ldd	r18, Y+11	; 0x0b
    4d08:	3c 85       	ldd	r19, Y+12	; 0x0c
    4d0a:	22 30       	cpi	r18, 0x02	; 2
    4d0c:	31 05       	cpc	r19, r1
    4d0e:	2c f4       	brge	.+10     	; 0x4d1a <AVE_gpioPortDirection+0x40>
    4d10:	8b 85       	ldd	r24, Y+11	; 0x0b
    4d12:	9c 85       	ldd	r25, Y+12	; 0x0c
    4d14:	00 97       	sbiw	r24, 0x00	; 0
    4d16:	71 f0       	breq	.+28     	; 0x4d34 <AVE_gpioPortDirection+0x5a>
    4d18:	9e c0       	rjmp	.+316    	; 0x4e56 <AVE_gpioPortDirection+0x17c>
    4d1a:	2b 85       	ldd	r18, Y+11	; 0x0b
    4d1c:	3c 85       	ldd	r19, Y+12	; 0x0c
    4d1e:	22 30       	cpi	r18, 0x02	; 2
    4d20:	31 05       	cpc	r19, r1
    4d22:	09 f4       	brne	.+2      	; 0x4d26 <AVE_gpioPortDirection+0x4c>
    4d24:	51 c0       	rjmp	.+162    	; 0x4dc8 <AVE_gpioPortDirection+0xee>
    4d26:	8b 85       	ldd	r24, Y+11	; 0x0b
    4d28:	9c 85       	ldd	r25, Y+12	; 0x0c
    4d2a:	83 30       	cpi	r24, 0x03	; 3
    4d2c:	91 05       	cpc	r25, r1
    4d2e:	09 f4       	brne	.+2      	; 0x4d32 <AVE_gpioPortDirection+0x58>
    4d30:	6f c0       	rjmp	.+222    	; 0x4e10 <AVE_gpioPortDirection+0x136>
    4d32:	91 c0       	rjmp	.+290    	; 0x4e56 <AVE_gpioPortDirection+0x17c>
	{
	case PORTA:
		switch(direction)
    4d34:	8a 81       	ldd	r24, Y+2	; 0x02
    4d36:	28 2f       	mov	r18, r24
    4d38:	30 e0       	ldi	r19, 0x00	; 0
    4d3a:	3a 87       	std	Y+10, r19	; 0x0a
    4d3c:	29 87       	std	Y+9, r18	; 0x09
    4d3e:	89 85       	ldd	r24, Y+9	; 0x09
    4d40:	9a 85       	ldd	r25, Y+10	; 0x0a
    4d42:	81 30       	cpi	r24, 0x01	; 1
    4d44:	91 05       	cpc	r25, r1
    4d46:	99 f0       	breq	.+38     	; 0x4d6e <AVE_gpioPortDirection+0x94>
    4d48:	29 85       	ldd	r18, Y+9	; 0x09
    4d4a:	3a 85       	ldd	r19, Y+10	; 0x0a
    4d4c:	22 30       	cpi	r18, 0x02	; 2
    4d4e:	31 05       	cpc	r19, r1
    4d50:	49 f0       	breq	.+18     	; 0x4d64 <AVE_gpioPortDirection+0x8a>
    4d52:	89 85       	ldd	r24, Y+9	; 0x09
    4d54:	9a 85       	ldd	r25, Y+10	; 0x0a
    4d56:	00 97       	sbiw	r24, 0x00	; 0
    4d58:	09 f0       	breq	.+2      	; 0x4d5c <AVE_gpioPortDirection+0x82>
    4d5a:	7d c0       	rjmp	.+250    	; 0x4e56 <AVE_gpioPortDirection+0x17c>
		{
		case INPUT:
			GPIOA_DDR = GPIO_ALL_INBUT;
    4d5c:	ea e3       	ldi	r30, 0x3A	; 58
    4d5e:	f0 e0       	ldi	r31, 0x00	; 0
    4d60:	10 82       	st	Z, r1
    4d62:	79 c0       	rjmp	.+242    	; 0x4e56 <AVE_gpioPortDirection+0x17c>
			break;
		case OUTPUT:
			GPIOA_DDR = GPIO_ALL_OUTPUT;
    4d64:	ea e3       	ldi	r30, 0x3A	; 58
    4d66:	f0 e0       	ldi	r31, 0x00	; 0
    4d68:	8f ef       	ldi	r24, 0xFF	; 255
    4d6a:	80 83       	st	Z, r24
    4d6c:	74 c0       	rjmp	.+232    	; 0x4e56 <AVE_gpioPortDirection+0x17c>
			break;
		case INPUT_PULLUP:
			GPIOA_DDR = GPIO_ALL_INBUT;
    4d6e:	ea e3       	ldi	r30, 0x3A	; 58
    4d70:	f0 e0       	ldi	r31, 0x00	; 0
    4d72:	10 82       	st	Z, r1
			GPIOA_PORT = GPIO_ALL_OUTPUT;
    4d74:	eb e3       	ldi	r30, 0x3B	; 59
    4d76:	f0 e0       	ldi	r31, 0x00	; 0
    4d78:	8f ef       	ldi	r24, 0xFF	; 255
    4d7a:	80 83       	st	Z, r24
    4d7c:	6c c0       	rjmp	.+216    	; 0x4e56 <AVE_gpioPortDirection+0x17c>
			break;
		}
	break;

	case PORTB:
		switch(direction)
    4d7e:	8a 81       	ldd	r24, Y+2	; 0x02
    4d80:	28 2f       	mov	r18, r24
    4d82:	30 e0       	ldi	r19, 0x00	; 0
    4d84:	38 87       	std	Y+8, r19	; 0x08
    4d86:	2f 83       	std	Y+7, r18	; 0x07
    4d88:	8f 81       	ldd	r24, Y+7	; 0x07
    4d8a:	98 85       	ldd	r25, Y+8	; 0x08
    4d8c:	81 30       	cpi	r24, 0x01	; 1
    4d8e:	91 05       	cpc	r25, r1
    4d90:	99 f0       	breq	.+38     	; 0x4db8 <AVE_gpioPortDirection+0xde>
    4d92:	2f 81       	ldd	r18, Y+7	; 0x07
    4d94:	38 85       	ldd	r19, Y+8	; 0x08
    4d96:	22 30       	cpi	r18, 0x02	; 2
    4d98:	31 05       	cpc	r19, r1
    4d9a:	49 f0       	breq	.+18     	; 0x4dae <AVE_gpioPortDirection+0xd4>
    4d9c:	8f 81       	ldd	r24, Y+7	; 0x07
    4d9e:	98 85       	ldd	r25, Y+8	; 0x08
    4da0:	00 97       	sbiw	r24, 0x00	; 0
    4da2:	09 f0       	breq	.+2      	; 0x4da6 <AVE_gpioPortDirection+0xcc>
    4da4:	58 c0       	rjmp	.+176    	; 0x4e56 <AVE_gpioPortDirection+0x17c>
				{
				case INPUT:
					GPIOB_DDR = GPIO_ALL_INBUT;
    4da6:	e7 e3       	ldi	r30, 0x37	; 55
    4da8:	f0 e0       	ldi	r31, 0x00	; 0
    4daa:	10 82       	st	Z, r1
    4dac:	54 c0       	rjmp	.+168    	; 0x4e56 <AVE_gpioPortDirection+0x17c>
					break;
				case OUTPUT:
					GPIOB_DDR = GPIO_ALL_OUTPUT;
    4dae:	e7 e3       	ldi	r30, 0x37	; 55
    4db0:	f0 e0       	ldi	r31, 0x00	; 0
    4db2:	8f ef       	ldi	r24, 0xFF	; 255
    4db4:	80 83       	st	Z, r24
    4db6:	4f c0       	rjmp	.+158    	; 0x4e56 <AVE_gpioPortDirection+0x17c>
					break;
				case INPUT_PULLUP:
					GPIOB_DDR = GPIO_ALL_INBUT;
    4db8:	e7 e3       	ldi	r30, 0x37	; 55
    4dba:	f0 e0       	ldi	r31, 0x00	; 0
    4dbc:	10 82       	st	Z, r1
					GPIOB_PORT = GPIO_ALL_OUTPUT;
    4dbe:	e8 e3       	ldi	r30, 0x38	; 56
    4dc0:	f0 e0       	ldi	r31, 0x00	; 0
    4dc2:	8f ef       	ldi	r24, 0xFF	; 255
    4dc4:	80 83       	st	Z, r24
    4dc6:	47 c0       	rjmp	.+142    	; 0x4e56 <AVE_gpioPortDirection+0x17c>
					break;
				}
	break;

	case PORTC:
		switch(direction)
    4dc8:	8a 81       	ldd	r24, Y+2	; 0x02
    4dca:	28 2f       	mov	r18, r24
    4dcc:	30 e0       	ldi	r19, 0x00	; 0
    4dce:	3e 83       	std	Y+6, r19	; 0x06
    4dd0:	2d 83       	std	Y+5, r18	; 0x05
    4dd2:	8d 81       	ldd	r24, Y+5	; 0x05
    4dd4:	9e 81       	ldd	r25, Y+6	; 0x06
    4dd6:	81 30       	cpi	r24, 0x01	; 1
    4dd8:	91 05       	cpc	r25, r1
    4dda:	91 f0       	breq	.+36     	; 0x4e00 <AVE_gpioPortDirection+0x126>
    4ddc:	2d 81       	ldd	r18, Y+5	; 0x05
    4dde:	3e 81       	ldd	r19, Y+6	; 0x06
    4de0:	22 30       	cpi	r18, 0x02	; 2
    4de2:	31 05       	cpc	r19, r1
    4de4:	41 f0       	breq	.+16     	; 0x4df6 <AVE_gpioPortDirection+0x11c>
    4de6:	8d 81       	ldd	r24, Y+5	; 0x05
    4de8:	9e 81       	ldd	r25, Y+6	; 0x06
    4dea:	00 97       	sbiw	r24, 0x00	; 0
    4dec:	a1 f5       	brne	.+104    	; 0x4e56 <AVE_gpioPortDirection+0x17c>
				{
				case INPUT:
					GPIOC_DDR = GPIO_ALL_INBUT;
    4dee:	e4 e3       	ldi	r30, 0x34	; 52
    4df0:	f0 e0       	ldi	r31, 0x00	; 0
    4df2:	10 82       	st	Z, r1
    4df4:	30 c0       	rjmp	.+96     	; 0x4e56 <AVE_gpioPortDirection+0x17c>
					break;
				case OUTPUT:
					GPIOC_DDR = GPIO_ALL_OUTPUT;
    4df6:	e4 e3       	ldi	r30, 0x34	; 52
    4df8:	f0 e0       	ldi	r31, 0x00	; 0
    4dfa:	8f ef       	ldi	r24, 0xFF	; 255
    4dfc:	80 83       	st	Z, r24
    4dfe:	2b c0       	rjmp	.+86     	; 0x4e56 <AVE_gpioPortDirection+0x17c>
					break;
				case INPUT_PULLUP:
					GPIOC_DDR = GPIO_ALL_INBUT;
    4e00:	e4 e3       	ldi	r30, 0x34	; 52
    4e02:	f0 e0       	ldi	r31, 0x00	; 0
    4e04:	10 82       	st	Z, r1
					GPIOC_PORT = GPIO_ALL_OUTPUT;
    4e06:	e5 e3       	ldi	r30, 0x35	; 53
    4e08:	f0 e0       	ldi	r31, 0x00	; 0
    4e0a:	8f ef       	ldi	r24, 0xFF	; 255
    4e0c:	80 83       	st	Z, r24
    4e0e:	23 c0       	rjmp	.+70     	; 0x4e56 <AVE_gpioPortDirection+0x17c>
					break;
				}
	break;

	case PORTD:
		switch(direction)
    4e10:	8a 81       	ldd	r24, Y+2	; 0x02
    4e12:	28 2f       	mov	r18, r24
    4e14:	30 e0       	ldi	r19, 0x00	; 0
    4e16:	3c 83       	std	Y+4, r19	; 0x04
    4e18:	2b 83       	std	Y+3, r18	; 0x03
    4e1a:	8b 81       	ldd	r24, Y+3	; 0x03
    4e1c:	9c 81       	ldd	r25, Y+4	; 0x04
    4e1e:	81 30       	cpi	r24, 0x01	; 1
    4e20:	91 05       	cpc	r25, r1
    4e22:	91 f0       	breq	.+36     	; 0x4e48 <AVE_gpioPortDirection+0x16e>
    4e24:	2b 81       	ldd	r18, Y+3	; 0x03
    4e26:	3c 81       	ldd	r19, Y+4	; 0x04
    4e28:	22 30       	cpi	r18, 0x02	; 2
    4e2a:	31 05       	cpc	r19, r1
    4e2c:	41 f0       	breq	.+16     	; 0x4e3e <AVE_gpioPortDirection+0x164>
    4e2e:	8b 81       	ldd	r24, Y+3	; 0x03
    4e30:	9c 81       	ldd	r25, Y+4	; 0x04
    4e32:	00 97       	sbiw	r24, 0x00	; 0
    4e34:	81 f4       	brne	.+32     	; 0x4e56 <AVE_gpioPortDirection+0x17c>
				{
				case INPUT:
					GPIOD_DDR = GPIO_ALL_INBUT;
    4e36:	e1 e3       	ldi	r30, 0x31	; 49
    4e38:	f0 e0       	ldi	r31, 0x00	; 0
    4e3a:	10 82       	st	Z, r1
    4e3c:	0c c0       	rjmp	.+24     	; 0x4e56 <AVE_gpioPortDirection+0x17c>
					break;
				case OUTPUT:
					GPIOD_DDR = GPIO_ALL_OUTPUT;
    4e3e:	e1 e3       	ldi	r30, 0x31	; 49
    4e40:	f0 e0       	ldi	r31, 0x00	; 0
    4e42:	8f ef       	ldi	r24, 0xFF	; 255
    4e44:	80 83       	st	Z, r24
    4e46:	07 c0       	rjmp	.+14     	; 0x4e56 <AVE_gpioPortDirection+0x17c>
					break;
				case INPUT_PULLUP:
					GPIOD_DDR = GPIO_ALL_INBUT;
    4e48:	e1 e3       	ldi	r30, 0x31	; 49
    4e4a:	f0 e0       	ldi	r31, 0x00	; 0
    4e4c:	10 82       	st	Z, r1
					GPIOD_PORT = GPIO_ALL_OUTPUT;
    4e4e:	e2 e3       	ldi	r30, 0x32	; 50
    4e50:	f0 e0       	ldi	r31, 0x00	; 0
    4e52:	8f ef       	ldi	r24, 0xFF	; 255
    4e54:	80 83       	st	Z, r24


    }


}
    4e56:	2c 96       	adiw	r28, 0x0c	; 12
    4e58:	0f b6       	in	r0, 0x3f	; 63
    4e5a:	f8 94       	cli
    4e5c:	de bf       	out	0x3e, r29	; 62
    4e5e:	0f be       	out	0x3f, r0	; 63
    4e60:	cd bf       	out	0x3d, r28	; 61
    4e62:	cf 91       	pop	r28
    4e64:	df 91       	pop	r29
    4e66:	08 95       	ret

00004e68 <AVE_gpioPortWrite>:
 * it writes a specific value on a previously intialzed port as an output!
 *
 *
 */
void AVE_gpioPortWrite(uint8 port, uint8 value)
{
    4e68:	df 93       	push	r29
    4e6a:	cf 93       	push	r28
    4e6c:	cd b7       	in	r28, 0x3d	; 61
    4e6e:	de b7       	in	r29, 0x3e	; 62
    4e70:	64 97       	sbiw	r28, 0x14	; 20
    4e72:	0f b6       	in	r0, 0x3f	; 63
    4e74:	f8 94       	cli
    4e76:	de bf       	out	0x3e, r29	; 62
    4e78:	0f be       	out	0x3f, r0	; 63
    4e7a:	cd bf       	out	0x3d, r28	; 61
    4e7c:	89 83       	std	Y+1, r24	; 0x01
    4e7e:	6a 83       	std	Y+2, r22	; 0x02

	switch(port)
    4e80:	89 81       	ldd	r24, Y+1	; 0x01
    4e82:	28 2f       	mov	r18, r24
    4e84:	30 e0       	ldi	r19, 0x00	; 0
    4e86:	3c 8b       	std	Y+20, r19	; 0x14
    4e88:	2b 8b       	std	Y+19, r18	; 0x13
    4e8a:	8b 89       	ldd	r24, Y+19	; 0x13
    4e8c:	9c 89       	ldd	r25, Y+20	; 0x14
    4e8e:	81 30       	cpi	r24, 0x01	; 1
    4e90:	91 05       	cpc	r25, r1
    4e92:	a9 f1       	breq	.+106    	; 0x4efe <AVE_gpioPortWrite+0x96>
    4e94:	2b 89       	ldd	r18, Y+19	; 0x13
    4e96:	3c 89       	ldd	r19, Y+20	; 0x14
    4e98:	22 30       	cpi	r18, 0x02	; 2
    4e9a:	31 05       	cpc	r19, r1
    4e9c:	2c f4       	brge	.+10     	; 0x4ea8 <AVE_gpioPortWrite+0x40>
    4e9e:	8b 89       	ldd	r24, Y+19	; 0x13
    4ea0:	9c 89       	ldd	r25, Y+20	; 0x14
    4ea2:	00 97       	sbiw	r24, 0x00	; 0
    4ea4:	71 f0       	breq	.+28     	; 0x4ec2 <AVE_gpioPortWrite+0x5a>
    4ea6:	82 c0       	rjmp	.+260    	; 0x4fac <AVE_gpioPortWrite+0x144>
    4ea8:	2b 89       	ldd	r18, Y+19	; 0x13
    4eaa:	3c 89       	ldd	r19, Y+20	; 0x14
    4eac:	22 30       	cpi	r18, 0x02	; 2
    4eae:	31 05       	cpc	r19, r1
    4eb0:	09 f4       	brne	.+2      	; 0x4eb4 <AVE_gpioPortWrite+0x4c>
    4eb2:	43 c0       	rjmp	.+134    	; 0x4f3a <AVE_gpioPortWrite+0xd2>
    4eb4:	8b 89       	ldd	r24, Y+19	; 0x13
    4eb6:	9c 89       	ldd	r25, Y+20	; 0x14
    4eb8:	83 30       	cpi	r24, 0x03	; 3
    4eba:	91 05       	cpc	r25, r1
    4ebc:	09 f4       	brne	.+2      	; 0x4ec0 <AVE_gpioPortWrite+0x58>
    4ebe:	5a c0       	rjmp	.+180    	; 0x4f74 <AVE_gpioPortWrite+0x10c>
    4ec0:	75 c0       	rjmp	.+234    	; 0x4fac <AVE_gpioPortWrite+0x144>
	{

	case PORTA:
		switch(value)
    4ec2:	8a 81       	ldd	r24, Y+2	; 0x02
    4ec4:	28 2f       	mov	r18, r24
    4ec6:	30 e0       	ldi	r19, 0x00	; 0
    4ec8:	3a 8b       	std	Y+18, r19	; 0x12
    4eca:	29 8b       	std	Y+17, r18	; 0x11
    4ecc:	89 89       	ldd	r24, Y+17	; 0x11
    4ece:	9a 89       	ldd	r25, Y+18	; 0x12
    4ed0:	00 97       	sbiw	r24, 0x00	; 0
    4ed2:	71 f0       	breq	.+28     	; 0x4ef0 <AVE_gpioPortWrite+0x88>
    4ed4:	29 89       	ldd	r18, Y+17	; 0x11
    4ed6:	3a 89       	ldd	r19, Y+18	; 0x12
    4ed8:	21 30       	cpi	r18, 0x01	; 1
    4eda:	31 05       	cpc	r19, r1
    4edc:	09 f0       	breq	.+2      	; 0x4ee0 <AVE_gpioPortWrite+0x78>
    4ede:	66 c0       	rjmp	.+204    	; 0x4fac <AVE_gpioPortWrite+0x144>
		{
		case HIGH:
			SET_REG(GPIOA_PORT);
    4ee0:	eb e3       	ldi	r30, 0x3B	; 59
    4ee2:	f0 e0       	ldi	r31, 0x00	; 0
    4ee4:	30 81       	ld	r19, Z
    4ee6:	eb e3       	ldi	r30, 0x3B	; 59
    4ee8:	f0 e0       	ldi	r31, 0x00	; 0
    4eea:	8f ef       	ldi	r24, 0xFF	; 255
    4eec:	80 83       	st	Z, r24
    4eee:	5e c0       	rjmp	.+188    	; 0x4fac <AVE_gpioPortWrite+0x144>
			break;
		case LOW:
			CLEAR_REG(GPIOA_PORT);
    4ef0:	eb e3       	ldi	r30, 0x3B	; 59
    4ef2:	f0 e0       	ldi	r31, 0x00	; 0
    4ef4:	80 81       	ld	r24, Z
    4ef6:	eb e3       	ldi	r30, 0x3B	; 59
    4ef8:	f0 e0       	ldi	r31, 0x00	; 0
    4efa:	10 82       	st	Z, r1
    4efc:	57 c0       	rjmp	.+174    	; 0x4fac <AVE_gpioPortWrite+0x144>

		}

		break;
	case PORTB:
		switch(value)
    4efe:	8a 81       	ldd	r24, Y+2	; 0x02
    4f00:	28 2f       	mov	r18, r24
    4f02:	30 e0       	ldi	r19, 0x00	; 0
    4f04:	3e 87       	std	Y+14, r19	; 0x0e
    4f06:	2d 87       	std	Y+13, r18	; 0x0d
    4f08:	8d 85       	ldd	r24, Y+13	; 0x0d
    4f0a:	9e 85       	ldd	r25, Y+14	; 0x0e
    4f0c:	00 97       	sbiw	r24, 0x00	; 0
    4f0e:	71 f0       	breq	.+28     	; 0x4f2c <AVE_gpioPortWrite+0xc4>
    4f10:	2d 85       	ldd	r18, Y+13	; 0x0d
    4f12:	3e 85       	ldd	r19, Y+14	; 0x0e
    4f14:	21 30       	cpi	r18, 0x01	; 1
    4f16:	31 05       	cpc	r19, r1
    4f18:	09 f0       	breq	.+2      	; 0x4f1c <AVE_gpioPortWrite+0xb4>
    4f1a:	48 c0       	rjmp	.+144    	; 0x4fac <AVE_gpioPortWrite+0x144>
		{

		case HIGH:
			SET_REG(GPIOB_PORT);
    4f1c:	e8 e3       	ldi	r30, 0x38	; 56
    4f1e:	f0 e0       	ldi	r31, 0x00	; 0
    4f20:	30 81       	ld	r19, Z
    4f22:	e8 e3       	ldi	r30, 0x38	; 56
    4f24:	f0 e0       	ldi	r31, 0x00	; 0
    4f26:	8f ef       	ldi	r24, 0xFF	; 255
    4f28:	80 83       	st	Z, r24
    4f2a:	40 c0       	rjmp	.+128    	; 0x4fac <AVE_gpioPortWrite+0x144>
			break;
		case LOW:
			CLEAR_REG(GPIOB_PORT);
    4f2c:	e8 e3       	ldi	r30, 0x38	; 56
    4f2e:	f0 e0       	ldi	r31, 0x00	; 0
    4f30:	80 81       	ld	r24, Z
    4f32:	e8 e3       	ldi	r30, 0x38	; 56
    4f34:	f0 e0       	ldi	r31, 0x00	; 0
    4f36:	10 82       	st	Z, r1
    4f38:	39 c0       	rjmp	.+114    	; 0x4fac <AVE_gpioPortWrite+0x144>

		}

		break;
	case PORTC:
		switch(value)
    4f3a:	8a 81       	ldd	r24, Y+2	; 0x02
    4f3c:	28 2f       	mov	r18, r24
    4f3e:	30 e0       	ldi	r19, 0x00	; 0
    4f40:	3a 87       	std	Y+10, r19	; 0x0a
    4f42:	29 87       	std	Y+9, r18	; 0x09
    4f44:	89 85       	ldd	r24, Y+9	; 0x09
    4f46:	9a 85       	ldd	r25, Y+10	; 0x0a
    4f48:	00 97       	sbiw	r24, 0x00	; 0
    4f4a:	69 f0       	breq	.+26     	; 0x4f66 <AVE_gpioPortWrite+0xfe>
    4f4c:	29 85       	ldd	r18, Y+9	; 0x09
    4f4e:	3a 85       	ldd	r19, Y+10	; 0x0a
    4f50:	21 30       	cpi	r18, 0x01	; 1
    4f52:	31 05       	cpc	r19, r1
    4f54:	59 f5       	brne	.+86     	; 0x4fac <AVE_gpioPortWrite+0x144>
		{
		case HIGH:
			SET_REG(GPIOC_PORT);
    4f56:	e5 e3       	ldi	r30, 0x35	; 53
    4f58:	f0 e0       	ldi	r31, 0x00	; 0
    4f5a:	30 81       	ld	r19, Z
    4f5c:	e5 e3       	ldi	r30, 0x35	; 53
    4f5e:	f0 e0       	ldi	r31, 0x00	; 0
    4f60:	8f ef       	ldi	r24, 0xFF	; 255
    4f62:	80 83       	st	Z, r24
    4f64:	23 c0       	rjmp	.+70     	; 0x4fac <AVE_gpioPortWrite+0x144>
			break;
		case LOW:
			CLEAR_REG(GPIOC_PORT);
    4f66:	e5 e3       	ldi	r30, 0x35	; 53
    4f68:	f0 e0       	ldi	r31, 0x00	; 0
    4f6a:	80 81       	ld	r24, Z
    4f6c:	e5 e3       	ldi	r30, 0x35	; 53
    4f6e:	f0 e0       	ldi	r31, 0x00	; 0
    4f70:	10 82       	st	Z, r1
    4f72:	1c c0       	rjmp	.+56     	; 0x4fac <AVE_gpioPortWrite+0x144>
			break;

		}
		break;
	case PORTD:
		switch(value)
    4f74:	8a 81       	ldd	r24, Y+2	; 0x02
    4f76:	28 2f       	mov	r18, r24
    4f78:	30 e0       	ldi	r19, 0x00	; 0
    4f7a:	3e 83       	std	Y+6, r19	; 0x06
    4f7c:	2d 83       	std	Y+5, r18	; 0x05
    4f7e:	8d 81       	ldd	r24, Y+5	; 0x05
    4f80:	9e 81       	ldd	r25, Y+6	; 0x06
    4f82:	00 97       	sbiw	r24, 0x00	; 0
    4f84:	69 f0       	breq	.+26     	; 0x4fa0 <AVE_gpioPortWrite+0x138>
    4f86:	2d 81       	ldd	r18, Y+5	; 0x05
    4f88:	3e 81       	ldd	r19, Y+6	; 0x06
    4f8a:	21 30       	cpi	r18, 0x01	; 1
    4f8c:	31 05       	cpc	r19, r1
    4f8e:	71 f4       	brne	.+28     	; 0x4fac <AVE_gpioPortWrite+0x144>
		{
		case HIGH:
			SET_REG(GPIOD_PORT);
    4f90:	e2 e3       	ldi	r30, 0x32	; 50
    4f92:	f0 e0       	ldi	r31, 0x00	; 0
    4f94:	30 81       	ld	r19, Z
    4f96:	e2 e3       	ldi	r30, 0x32	; 50
    4f98:	f0 e0       	ldi	r31, 0x00	; 0
    4f9a:	8f ef       	ldi	r24, 0xFF	; 255
    4f9c:	80 83       	st	Z, r24
    4f9e:	06 c0       	rjmp	.+12     	; 0x4fac <AVE_gpioPortWrite+0x144>
			break;
		case LOW:
			CLEAR_REG(GPIOD_PORT);
    4fa0:	e2 e3       	ldi	r30, 0x32	; 50
    4fa2:	f0 e0       	ldi	r31, 0x00	; 0
    4fa4:	80 81       	ld	r24, Z
    4fa6:	e2 e3       	ldi	r30, 0x32	; 50
    4fa8:	f0 e0       	ldi	r31, 0x00	; 0
    4faa:	10 82       	st	Z, r1

		}
		break;

	}
}
    4fac:	64 96       	adiw	r28, 0x14	; 20
    4fae:	0f b6       	in	r0, 0x3f	; 63
    4fb0:	f8 94       	cli
    4fb2:	de bf       	out	0x3e, r29	; 62
    4fb4:	0f be       	out	0x3f, r0	; 63
    4fb6:	cd bf       	out	0x3d, r28	; 61
    4fb8:	cf 91       	pop	r28
    4fba:	df 91       	pop	r29
    4fbc:	08 95       	ret

00004fbe <AVE_gpioPortToggle>:
 * or low to high !
 * takes as an argument one of the 4 ports A,B,C,D
 */

void AVE_gpioPortToggle(uint8 port)
{
    4fbe:	df 93       	push	r29
    4fc0:	cf 93       	push	r28
    4fc2:	00 d0       	rcall	.+0      	; 0x4fc4 <AVE_gpioPortToggle+0x6>
    4fc4:	0f 92       	push	r0
    4fc6:	cd b7       	in	r28, 0x3d	; 61
    4fc8:	de b7       	in	r29, 0x3e	; 62
    4fca:	89 83       	std	Y+1, r24	; 0x01

	switch(port)
    4fcc:	89 81       	ldd	r24, Y+1	; 0x01
    4fce:	28 2f       	mov	r18, r24
    4fd0:	30 e0       	ldi	r19, 0x00	; 0
    4fd2:	3b 83       	std	Y+3, r19	; 0x03
    4fd4:	2a 83       	std	Y+2, r18	; 0x02
    4fd6:	8a 81       	ldd	r24, Y+2	; 0x02
    4fd8:	9b 81       	ldd	r25, Y+3	; 0x03
    4fda:	81 30       	cpi	r24, 0x01	; 1
    4fdc:	91 05       	cpc	r25, r1
    4fde:	e9 f0       	breq	.+58     	; 0x501a <AVE_gpioPortToggle+0x5c>
    4fe0:	2a 81       	ldd	r18, Y+2	; 0x02
    4fe2:	3b 81       	ldd	r19, Y+3	; 0x03
    4fe4:	22 30       	cpi	r18, 0x02	; 2
    4fe6:	31 05       	cpc	r19, r1
    4fe8:	2c f4       	brge	.+10     	; 0x4ff4 <AVE_gpioPortToggle+0x36>
    4fea:	8a 81       	ldd	r24, Y+2	; 0x02
    4fec:	9b 81       	ldd	r25, Y+3	; 0x03
    4fee:	00 97       	sbiw	r24, 0x00	; 0
    4ff0:	61 f0       	breq	.+24     	; 0x500a <AVE_gpioPortToggle+0x4c>
    4ff2:	2a c0       	rjmp	.+84     	; 0x5048 <AVE_gpioPortToggle+0x8a>
    4ff4:	2a 81       	ldd	r18, Y+2	; 0x02
    4ff6:	3b 81       	ldd	r19, Y+3	; 0x03
    4ff8:	22 30       	cpi	r18, 0x02	; 2
    4ffa:	31 05       	cpc	r19, r1
    4ffc:	b1 f0       	breq	.+44     	; 0x502a <AVE_gpioPortToggle+0x6c>
    4ffe:	8a 81       	ldd	r24, Y+2	; 0x02
    5000:	9b 81       	ldd	r25, Y+3	; 0x03
    5002:	83 30       	cpi	r24, 0x03	; 3
    5004:	91 05       	cpc	r25, r1
    5006:	c9 f0       	breq	.+50     	; 0x503a <AVE_gpioPortToggle+0x7c>
    5008:	1f c0       	rjmp	.+62     	; 0x5048 <AVE_gpioPortToggle+0x8a>
	{


	case PORTA:
		GPIOA_PORT ^= GPIO_ALL_TOGGLE;
    500a:	ab e3       	ldi	r26, 0x3B	; 59
    500c:	b0 e0       	ldi	r27, 0x00	; 0
    500e:	eb e3       	ldi	r30, 0x3B	; 59
    5010:	f0 e0       	ldi	r31, 0x00	; 0
    5012:	80 81       	ld	r24, Z
    5014:	80 95       	com	r24
    5016:	8c 93       	st	X, r24
    5018:	17 c0       	rjmp	.+46     	; 0x5048 <AVE_gpioPortToggle+0x8a>
		break;
	case PORTB:
		GPIOB_PORT ^= GPIO_ALL_TOGGLE;
    501a:	a8 e3       	ldi	r26, 0x38	; 56
    501c:	b0 e0       	ldi	r27, 0x00	; 0
    501e:	e8 e3       	ldi	r30, 0x38	; 56
    5020:	f0 e0       	ldi	r31, 0x00	; 0
    5022:	80 81       	ld	r24, Z
    5024:	80 95       	com	r24
    5026:	8c 93       	st	X, r24
    5028:	0f c0       	rjmp	.+30     	; 0x5048 <AVE_gpioPortToggle+0x8a>
		break;
	case PORTC:
		GPIOC_PORT ^= GPIO_ALL_TOGGLE;
    502a:	a5 e3       	ldi	r26, 0x35	; 53
    502c:	b0 e0       	ldi	r27, 0x00	; 0
    502e:	e5 e3       	ldi	r30, 0x35	; 53
    5030:	f0 e0       	ldi	r31, 0x00	; 0
    5032:	80 81       	ld	r24, Z
    5034:	80 95       	com	r24
    5036:	8c 93       	st	X, r24
    5038:	07 c0       	rjmp	.+14     	; 0x5048 <AVE_gpioPortToggle+0x8a>
		break;
	case PORTD:
		GPIOD_PORT ^= GPIO_ALL_TOGGLE;
    503a:	a2 e3       	ldi	r26, 0x32	; 50
    503c:	b0 e0       	ldi	r27, 0x00	; 0
    503e:	e2 e3       	ldi	r30, 0x32	; 50
    5040:	f0 e0       	ldi	r31, 0x00	; 0
    5042:	80 81       	ld	r24, Z
    5044:	80 95       	com	r24
    5046:	8c 93       	st	X, r24
		break;

	}

}
    5048:	0f 90       	pop	r0
    504a:	0f 90       	pop	r0
    504c:	0f 90       	pop	r0
    504e:	cf 91       	pop	r28
    5050:	df 91       	pop	r29
    5052:	08 95       	ret

00005054 <AVE_gpioPortRead>:
 * before you can even use this function to get the value
 * of the port
 *
 */
void AVE_gpioPortRead(uint8 port,uint8*returnedValue)
{
    5054:	df 93       	push	r29
    5056:	cf 93       	push	r28
    5058:	00 d0       	rcall	.+0      	; 0x505a <AVE_gpioPortRead+0x6>
    505a:	00 d0       	rcall	.+0      	; 0x505c <AVE_gpioPortRead+0x8>
    505c:	0f 92       	push	r0
    505e:	cd b7       	in	r28, 0x3d	; 61
    5060:	de b7       	in	r29, 0x3e	; 62
    5062:	89 83       	std	Y+1, r24	; 0x01
    5064:	7b 83       	std	Y+3, r23	; 0x03
    5066:	6a 83       	std	Y+2, r22	; 0x02


	switch(port)
    5068:	89 81       	ldd	r24, Y+1	; 0x01
    506a:	28 2f       	mov	r18, r24
    506c:	30 e0       	ldi	r19, 0x00	; 0
    506e:	3d 83       	std	Y+5, r19	; 0x05
    5070:	2c 83       	std	Y+4, r18	; 0x04
    5072:	8c 81       	ldd	r24, Y+4	; 0x04
    5074:	9d 81       	ldd	r25, Y+5	; 0x05
    5076:	81 30       	cpi	r24, 0x01	; 1
    5078:	91 05       	cpc	r25, r1
    507a:	e1 f0       	breq	.+56     	; 0x50b4 <AVE_gpioPortRead+0x60>
    507c:	2c 81       	ldd	r18, Y+4	; 0x04
    507e:	3d 81       	ldd	r19, Y+5	; 0x05
    5080:	22 30       	cpi	r18, 0x02	; 2
    5082:	31 05       	cpc	r19, r1
    5084:	2c f4       	brge	.+10     	; 0x5090 <AVE_gpioPortRead+0x3c>
    5086:	8c 81       	ldd	r24, Y+4	; 0x04
    5088:	9d 81       	ldd	r25, Y+5	; 0x05
    508a:	00 97       	sbiw	r24, 0x00	; 0
    508c:	61 f0       	breq	.+24     	; 0x50a6 <AVE_gpioPortRead+0x52>
    508e:	26 c0       	rjmp	.+76     	; 0x50dc <AVE_gpioPortRead+0x88>
    5090:	2c 81       	ldd	r18, Y+4	; 0x04
    5092:	3d 81       	ldd	r19, Y+5	; 0x05
    5094:	22 30       	cpi	r18, 0x02	; 2
    5096:	31 05       	cpc	r19, r1
    5098:	a1 f0       	breq	.+40     	; 0x50c2 <AVE_gpioPortRead+0x6e>
    509a:	8c 81       	ldd	r24, Y+4	; 0x04
    509c:	9d 81       	ldd	r25, Y+5	; 0x05
    509e:	83 30       	cpi	r24, 0x03	; 3
    50a0:	91 05       	cpc	r25, r1
    50a2:	b1 f0       	breq	.+44     	; 0x50d0 <AVE_gpioPortRead+0x7c>
    50a4:	1b c0       	rjmp	.+54     	; 0x50dc <AVE_gpioPortRead+0x88>
	{

	case PORTA:
		*returnedValue = GPIOA_PIN;
    50a6:	e9 e3       	ldi	r30, 0x39	; 57
    50a8:	f0 e0       	ldi	r31, 0x00	; 0
    50aa:	80 81       	ld	r24, Z
    50ac:	ea 81       	ldd	r30, Y+2	; 0x02
    50ae:	fb 81       	ldd	r31, Y+3	; 0x03
    50b0:	80 83       	st	Z, r24
    50b2:	14 c0       	rjmp	.+40     	; 0x50dc <AVE_gpioPortRead+0x88>
		break;
	case PORTB:
		*returnedValue = GPIOB_PIN;
    50b4:	e6 e3       	ldi	r30, 0x36	; 54
    50b6:	f0 e0       	ldi	r31, 0x00	; 0
    50b8:	80 81       	ld	r24, Z
    50ba:	ea 81       	ldd	r30, Y+2	; 0x02
    50bc:	fb 81       	ldd	r31, Y+3	; 0x03
    50be:	80 83       	st	Z, r24
    50c0:	0d c0       	rjmp	.+26     	; 0x50dc <AVE_gpioPortRead+0x88>
		break;
	case PORTC:
		*returnedValue = GPIOC_PIN;
    50c2:	e3 e3       	ldi	r30, 0x33	; 51
    50c4:	f0 e0       	ldi	r31, 0x00	; 0
    50c6:	80 81       	ld	r24, Z
    50c8:	ea 81       	ldd	r30, Y+2	; 0x02
    50ca:	fb 81       	ldd	r31, Y+3	; 0x03
    50cc:	80 83       	st	Z, r24
    50ce:	06 c0       	rjmp	.+12     	; 0x50dc <AVE_gpioPortRead+0x88>
		break;
	case PORTD:
		*returnedValue = GPIOD_PIN;
    50d0:	e0 e3       	ldi	r30, 0x30	; 48
    50d2:	f0 e0       	ldi	r31, 0x00	; 0
    50d4:	80 81       	ld	r24, Z
    50d6:	ea 81       	ldd	r30, Y+2	; 0x02
    50d8:	fb 81       	ldd	r31, Y+3	; 0x03
    50da:	80 83       	st	Z, r24


	return;


}
    50dc:	0f 90       	pop	r0
    50de:	0f 90       	pop	r0
    50e0:	0f 90       	pop	r0
    50e2:	0f 90       	pop	r0
    50e4:	0f 90       	pop	r0
    50e6:	cf 91       	pop	r28
    50e8:	df 91       	pop	r29
    50ea:	08 95       	ret

000050ec <AVE_gpioPinDirection>:
 * available mode whether input or output or input pull up .
 *
 */

void AVE_gpioPinDirection(uint8 port, uint8 pins, uint8 direction)
{
    50ec:	df 93       	push	r29
    50ee:	cf 93       	push	r28
    50f0:	cd b7       	in	r28, 0x3d	; 61
    50f2:	de b7       	in	r29, 0x3e	; 62
    50f4:	2d 97       	sbiw	r28, 0x0d	; 13
    50f6:	0f b6       	in	r0, 0x3f	; 63
    50f8:	f8 94       	cli
    50fa:	de bf       	out	0x3e, r29	; 62
    50fc:	0f be       	out	0x3f, r0	; 63
    50fe:	cd bf       	out	0x3d, r28	; 61
    5100:	89 83       	std	Y+1, r24	; 0x01
    5102:	6a 83       	std	Y+2, r22	; 0x02
    5104:	4b 83       	std	Y+3, r20	; 0x03
	switch(port)
    5106:	89 81       	ldd	r24, Y+1	; 0x01
    5108:	28 2f       	mov	r18, r24
    510a:	30 e0       	ldi	r19, 0x00	; 0
    510c:	3d 87       	std	Y+13, r19	; 0x0d
    510e:	2c 87       	std	Y+12, r18	; 0x0c
    5110:	8c 85       	ldd	r24, Y+12	; 0x0c
    5112:	9d 85       	ldd	r25, Y+13	; 0x0d
    5114:	81 30       	cpi	r24, 0x01	; 1
    5116:	91 05       	cpc	r25, r1
    5118:	09 f4       	brne	.+2      	; 0x511c <AVE_gpioPinDirection+0x30>
    511a:	52 c0       	rjmp	.+164    	; 0x51c0 <AVE_gpioPinDirection+0xd4>
    511c:	2c 85       	ldd	r18, Y+12	; 0x0c
    511e:	3d 85       	ldd	r19, Y+13	; 0x0d
    5120:	22 30       	cpi	r18, 0x02	; 2
    5122:	31 05       	cpc	r19, r1
    5124:	2c f4       	brge	.+10     	; 0x5130 <AVE_gpioPinDirection+0x44>
    5126:	8c 85       	ldd	r24, Y+12	; 0x0c
    5128:	9d 85       	ldd	r25, Y+13	; 0x0d
    512a:	00 97       	sbiw	r24, 0x00	; 0
    512c:	71 f0       	breq	.+28     	; 0x514a <AVE_gpioPinDirection+0x5e>
    512e:	f7 c0       	rjmp	.+494    	; 0x531e <AVE_gpioPinDirection+0x232>
    5130:	2c 85       	ldd	r18, Y+12	; 0x0c
    5132:	3d 85       	ldd	r19, Y+13	; 0x0d
    5134:	22 30       	cpi	r18, 0x02	; 2
    5136:	31 05       	cpc	r19, r1
    5138:	09 f4       	brne	.+2      	; 0x513c <AVE_gpioPinDirection+0x50>
    513a:	7d c0       	rjmp	.+250    	; 0x5236 <AVE_gpioPinDirection+0x14a>
    513c:	8c 85       	ldd	r24, Y+12	; 0x0c
    513e:	9d 85       	ldd	r25, Y+13	; 0x0d
    5140:	83 30       	cpi	r24, 0x03	; 3
    5142:	91 05       	cpc	r25, r1
    5144:	09 f4       	brne	.+2      	; 0x5148 <AVE_gpioPinDirection+0x5c>
    5146:	b2 c0       	rjmp	.+356    	; 0x52ac <AVE_gpioPinDirection+0x1c0>
    5148:	ea c0       	rjmp	.+468    	; 0x531e <AVE_gpioPinDirection+0x232>
	{

		case PORTA:
			switch(direction)
    514a:	8b 81       	ldd	r24, Y+3	; 0x03
    514c:	28 2f       	mov	r18, r24
    514e:	30 e0       	ldi	r19, 0x00	; 0
    5150:	3b 87       	std	Y+11, r19	; 0x0b
    5152:	2a 87       	std	Y+10, r18	; 0x0a
    5154:	8a 85       	ldd	r24, Y+10	; 0x0a
    5156:	9b 85       	ldd	r25, Y+11	; 0x0b
    5158:	81 30       	cpi	r24, 0x01	; 1
    515a:	91 05       	cpc	r25, r1
    515c:	f1 f0       	breq	.+60     	; 0x519a <AVE_gpioPinDirection+0xae>
    515e:	2a 85       	ldd	r18, Y+10	; 0x0a
    5160:	3b 85       	ldd	r19, Y+11	; 0x0b
    5162:	22 30       	cpi	r18, 0x02	; 2
    5164:	31 05       	cpc	r19, r1
    5166:	81 f0       	breq	.+32     	; 0x5188 <AVE_gpioPinDirection+0x9c>
    5168:	8a 85       	ldd	r24, Y+10	; 0x0a
    516a:	9b 85       	ldd	r25, Y+11	; 0x0b
    516c:	00 97       	sbiw	r24, 0x00	; 0
    516e:	09 f0       	breq	.+2      	; 0x5172 <AVE_gpioPinDirection+0x86>
    5170:	d6 c0       	rjmp	.+428    	; 0x531e <AVE_gpioPinDirection+0x232>
			{
				case INPUT:
					CLR_PINS_VALUE(GPIOA_DDR,pins);
    5172:	aa e3       	ldi	r26, 0x3A	; 58
    5174:	b0 e0       	ldi	r27, 0x00	; 0
    5176:	ea e3       	ldi	r30, 0x3A	; 58
    5178:	f0 e0       	ldi	r31, 0x00	; 0
    517a:	80 81       	ld	r24, Z
    517c:	98 2f       	mov	r25, r24
    517e:	8a 81       	ldd	r24, Y+2	; 0x02
    5180:	80 95       	com	r24
    5182:	89 23       	and	r24, r25
    5184:	8c 93       	st	X, r24
    5186:	cb c0       	rjmp	.+406    	; 0x531e <AVE_gpioPinDirection+0x232>
					break;
				case OUTPUT:
					SET_PINS_VALUE(GPIOA_DDR,pins);
    5188:	aa e3       	ldi	r26, 0x3A	; 58
    518a:	b0 e0       	ldi	r27, 0x00	; 0
    518c:	ea e3       	ldi	r30, 0x3A	; 58
    518e:	f0 e0       	ldi	r31, 0x00	; 0
    5190:	90 81       	ld	r25, Z
    5192:	8a 81       	ldd	r24, Y+2	; 0x02
    5194:	89 2b       	or	r24, r25
    5196:	8c 93       	st	X, r24
    5198:	c2 c0       	rjmp	.+388    	; 0x531e <AVE_gpioPinDirection+0x232>
					break;
				case INPUT_PULLUP:
					CLR_PINS_VALUE(GPIOA_DDR,pins);
    519a:	aa e3       	ldi	r26, 0x3A	; 58
    519c:	b0 e0       	ldi	r27, 0x00	; 0
    519e:	ea e3       	ldi	r30, 0x3A	; 58
    51a0:	f0 e0       	ldi	r31, 0x00	; 0
    51a2:	80 81       	ld	r24, Z
    51a4:	98 2f       	mov	r25, r24
    51a6:	8a 81       	ldd	r24, Y+2	; 0x02
    51a8:	80 95       	com	r24
    51aa:	89 23       	and	r24, r25
    51ac:	8c 93       	st	X, r24
					SET_PINS_VALUE(GPIOA_PORT,pins);
    51ae:	ab e3       	ldi	r26, 0x3B	; 59
    51b0:	b0 e0       	ldi	r27, 0x00	; 0
    51b2:	eb e3       	ldi	r30, 0x3B	; 59
    51b4:	f0 e0       	ldi	r31, 0x00	; 0
    51b6:	90 81       	ld	r25, Z
    51b8:	8a 81       	ldd	r24, Y+2	; 0x02
    51ba:	89 2b       	or	r24, r25
    51bc:	8c 93       	st	X, r24
    51be:	af c0       	rjmp	.+350    	; 0x531e <AVE_gpioPinDirection+0x232>
					break;
			}
		break;
	case PORTB:
			switch(direction)
    51c0:	8b 81       	ldd	r24, Y+3	; 0x03
    51c2:	28 2f       	mov	r18, r24
    51c4:	30 e0       	ldi	r19, 0x00	; 0
    51c6:	39 87       	std	Y+9, r19	; 0x09
    51c8:	28 87       	std	Y+8, r18	; 0x08
    51ca:	88 85       	ldd	r24, Y+8	; 0x08
    51cc:	99 85       	ldd	r25, Y+9	; 0x09
    51ce:	81 30       	cpi	r24, 0x01	; 1
    51d0:	91 05       	cpc	r25, r1
    51d2:	f1 f0       	breq	.+60     	; 0x5210 <AVE_gpioPinDirection+0x124>
    51d4:	28 85       	ldd	r18, Y+8	; 0x08
    51d6:	39 85       	ldd	r19, Y+9	; 0x09
    51d8:	22 30       	cpi	r18, 0x02	; 2
    51da:	31 05       	cpc	r19, r1
    51dc:	81 f0       	breq	.+32     	; 0x51fe <AVE_gpioPinDirection+0x112>
    51de:	88 85       	ldd	r24, Y+8	; 0x08
    51e0:	99 85       	ldd	r25, Y+9	; 0x09
    51e2:	00 97       	sbiw	r24, 0x00	; 0
    51e4:	09 f0       	breq	.+2      	; 0x51e8 <AVE_gpioPinDirection+0xfc>
    51e6:	9b c0       	rjmp	.+310    	; 0x531e <AVE_gpioPinDirection+0x232>
			{
			case INPUT:
				CLR_PINS_VALUE(GPIOB_DDR,pins);
    51e8:	a7 e3       	ldi	r26, 0x37	; 55
    51ea:	b0 e0       	ldi	r27, 0x00	; 0
    51ec:	e7 e3       	ldi	r30, 0x37	; 55
    51ee:	f0 e0       	ldi	r31, 0x00	; 0
    51f0:	80 81       	ld	r24, Z
    51f2:	98 2f       	mov	r25, r24
    51f4:	8a 81       	ldd	r24, Y+2	; 0x02
    51f6:	80 95       	com	r24
    51f8:	89 23       	and	r24, r25
    51fa:	8c 93       	st	X, r24
    51fc:	90 c0       	rjmp	.+288    	; 0x531e <AVE_gpioPinDirection+0x232>
				break;
			case OUTPUT:
				SET_PINS_VALUE(GPIOB_DDR,pins);
    51fe:	a7 e3       	ldi	r26, 0x37	; 55
    5200:	b0 e0       	ldi	r27, 0x00	; 0
    5202:	e7 e3       	ldi	r30, 0x37	; 55
    5204:	f0 e0       	ldi	r31, 0x00	; 0
    5206:	90 81       	ld	r25, Z
    5208:	8a 81       	ldd	r24, Y+2	; 0x02
    520a:	89 2b       	or	r24, r25
    520c:	8c 93       	st	X, r24
    520e:	87 c0       	rjmp	.+270    	; 0x531e <AVE_gpioPinDirection+0x232>
				break;
			case INPUT_PULLUP:
				CLR_PINS_VALUE(GPIOB_DDR,pins);
    5210:	a7 e3       	ldi	r26, 0x37	; 55
    5212:	b0 e0       	ldi	r27, 0x00	; 0
    5214:	e7 e3       	ldi	r30, 0x37	; 55
    5216:	f0 e0       	ldi	r31, 0x00	; 0
    5218:	80 81       	ld	r24, Z
    521a:	98 2f       	mov	r25, r24
    521c:	8a 81       	ldd	r24, Y+2	; 0x02
    521e:	80 95       	com	r24
    5220:	89 23       	and	r24, r25
    5222:	8c 93       	st	X, r24
				SET_PINS_VALUE(GPIOB_PORT,pins);
    5224:	a8 e3       	ldi	r26, 0x38	; 56
    5226:	b0 e0       	ldi	r27, 0x00	; 0
    5228:	e8 e3       	ldi	r30, 0x38	; 56
    522a:	f0 e0       	ldi	r31, 0x00	; 0
    522c:	90 81       	ld	r25, Z
    522e:	8a 81       	ldd	r24, Y+2	; 0x02
    5230:	89 2b       	or	r24, r25
    5232:	8c 93       	st	X, r24
    5234:	74 c0       	rjmp	.+232    	; 0x531e <AVE_gpioPinDirection+0x232>

			}
			break;

	case PORTC:
			switch(direction)
    5236:	8b 81       	ldd	r24, Y+3	; 0x03
    5238:	28 2f       	mov	r18, r24
    523a:	30 e0       	ldi	r19, 0x00	; 0
    523c:	3f 83       	std	Y+7, r19	; 0x07
    523e:	2e 83       	std	Y+6, r18	; 0x06
    5240:	8e 81       	ldd	r24, Y+6	; 0x06
    5242:	9f 81       	ldd	r25, Y+7	; 0x07
    5244:	81 30       	cpi	r24, 0x01	; 1
    5246:	91 05       	cpc	r25, r1
    5248:	f1 f0       	breq	.+60     	; 0x5286 <AVE_gpioPinDirection+0x19a>
    524a:	2e 81       	ldd	r18, Y+6	; 0x06
    524c:	3f 81       	ldd	r19, Y+7	; 0x07
    524e:	22 30       	cpi	r18, 0x02	; 2
    5250:	31 05       	cpc	r19, r1
    5252:	81 f0       	breq	.+32     	; 0x5274 <AVE_gpioPinDirection+0x188>
    5254:	8e 81       	ldd	r24, Y+6	; 0x06
    5256:	9f 81       	ldd	r25, Y+7	; 0x07
    5258:	00 97       	sbiw	r24, 0x00	; 0
    525a:	09 f0       	breq	.+2      	; 0x525e <AVE_gpioPinDirection+0x172>
    525c:	60 c0       	rjmp	.+192    	; 0x531e <AVE_gpioPinDirection+0x232>
			{
			case INPUT:
				CLR_PINS_VALUE(GPIOC_DDR,pins);
    525e:	a4 e3       	ldi	r26, 0x34	; 52
    5260:	b0 e0       	ldi	r27, 0x00	; 0
    5262:	e4 e3       	ldi	r30, 0x34	; 52
    5264:	f0 e0       	ldi	r31, 0x00	; 0
    5266:	80 81       	ld	r24, Z
    5268:	98 2f       	mov	r25, r24
    526a:	8a 81       	ldd	r24, Y+2	; 0x02
    526c:	80 95       	com	r24
    526e:	89 23       	and	r24, r25
    5270:	8c 93       	st	X, r24
    5272:	55 c0       	rjmp	.+170    	; 0x531e <AVE_gpioPinDirection+0x232>
				break;
			case OUTPUT:
				SET_PINS_VALUE(GPIOC_DDR,pins);
    5274:	a4 e3       	ldi	r26, 0x34	; 52
    5276:	b0 e0       	ldi	r27, 0x00	; 0
    5278:	e4 e3       	ldi	r30, 0x34	; 52
    527a:	f0 e0       	ldi	r31, 0x00	; 0
    527c:	90 81       	ld	r25, Z
    527e:	8a 81       	ldd	r24, Y+2	; 0x02
    5280:	89 2b       	or	r24, r25
    5282:	8c 93       	st	X, r24
    5284:	4c c0       	rjmp	.+152    	; 0x531e <AVE_gpioPinDirection+0x232>
				break;
			case INPUT_PULLUP:
				CLR_PINS_VALUE(GPIOC_DDR,pins);
    5286:	a4 e3       	ldi	r26, 0x34	; 52
    5288:	b0 e0       	ldi	r27, 0x00	; 0
    528a:	e4 e3       	ldi	r30, 0x34	; 52
    528c:	f0 e0       	ldi	r31, 0x00	; 0
    528e:	80 81       	ld	r24, Z
    5290:	98 2f       	mov	r25, r24
    5292:	8a 81       	ldd	r24, Y+2	; 0x02
    5294:	80 95       	com	r24
    5296:	89 23       	and	r24, r25
    5298:	8c 93       	st	X, r24
				SET_PINS_VALUE(GPIOC_PORT,pins);
    529a:	a5 e3       	ldi	r26, 0x35	; 53
    529c:	b0 e0       	ldi	r27, 0x00	; 0
    529e:	e5 e3       	ldi	r30, 0x35	; 53
    52a0:	f0 e0       	ldi	r31, 0x00	; 0
    52a2:	90 81       	ld	r25, Z
    52a4:	8a 81       	ldd	r24, Y+2	; 0x02
    52a6:	89 2b       	or	r24, r25
    52a8:	8c 93       	st	X, r24
    52aa:	39 c0       	rjmp	.+114    	; 0x531e <AVE_gpioPinDirection+0x232>

			}
			break;

	case PORTD:
			switch(direction)
    52ac:	8b 81       	ldd	r24, Y+3	; 0x03
    52ae:	28 2f       	mov	r18, r24
    52b0:	30 e0       	ldi	r19, 0x00	; 0
    52b2:	3d 83       	std	Y+5, r19	; 0x05
    52b4:	2c 83       	std	Y+4, r18	; 0x04
    52b6:	8c 81       	ldd	r24, Y+4	; 0x04
    52b8:	9d 81       	ldd	r25, Y+5	; 0x05
    52ba:	81 30       	cpi	r24, 0x01	; 1
    52bc:	91 05       	cpc	r25, r1
    52be:	e9 f0       	breq	.+58     	; 0x52fa <AVE_gpioPinDirection+0x20e>
    52c0:	2c 81       	ldd	r18, Y+4	; 0x04
    52c2:	3d 81       	ldd	r19, Y+5	; 0x05
    52c4:	22 30       	cpi	r18, 0x02	; 2
    52c6:	31 05       	cpc	r19, r1
    52c8:	79 f0       	breq	.+30     	; 0x52e8 <AVE_gpioPinDirection+0x1fc>
    52ca:	8c 81       	ldd	r24, Y+4	; 0x04
    52cc:	9d 81       	ldd	r25, Y+5	; 0x05
    52ce:	00 97       	sbiw	r24, 0x00	; 0
    52d0:	31 f5       	brne	.+76     	; 0x531e <AVE_gpioPinDirection+0x232>
			{
			case INPUT:
				CLR_PINS_VALUE(GPIOD_DDR,pins);
    52d2:	a1 e3       	ldi	r26, 0x31	; 49
    52d4:	b0 e0       	ldi	r27, 0x00	; 0
    52d6:	e1 e3       	ldi	r30, 0x31	; 49
    52d8:	f0 e0       	ldi	r31, 0x00	; 0
    52da:	80 81       	ld	r24, Z
    52dc:	98 2f       	mov	r25, r24
    52de:	8a 81       	ldd	r24, Y+2	; 0x02
    52e0:	80 95       	com	r24
    52e2:	89 23       	and	r24, r25
    52e4:	8c 93       	st	X, r24
    52e6:	1b c0       	rjmp	.+54     	; 0x531e <AVE_gpioPinDirection+0x232>
				break;
			case OUTPUT:
				SET_PINS_VALUE(GPIOD_DDR,pins);
    52e8:	a1 e3       	ldi	r26, 0x31	; 49
    52ea:	b0 e0       	ldi	r27, 0x00	; 0
    52ec:	e1 e3       	ldi	r30, 0x31	; 49
    52ee:	f0 e0       	ldi	r31, 0x00	; 0
    52f0:	90 81       	ld	r25, Z
    52f2:	8a 81       	ldd	r24, Y+2	; 0x02
    52f4:	89 2b       	or	r24, r25
    52f6:	8c 93       	st	X, r24
    52f8:	12 c0       	rjmp	.+36     	; 0x531e <AVE_gpioPinDirection+0x232>
				break;
			case INPUT_PULLUP:
				CLR_PINS_VALUE(GPIOD_DDR,pins);
    52fa:	a1 e3       	ldi	r26, 0x31	; 49
    52fc:	b0 e0       	ldi	r27, 0x00	; 0
    52fe:	e1 e3       	ldi	r30, 0x31	; 49
    5300:	f0 e0       	ldi	r31, 0x00	; 0
    5302:	80 81       	ld	r24, Z
    5304:	98 2f       	mov	r25, r24
    5306:	8a 81       	ldd	r24, Y+2	; 0x02
    5308:	80 95       	com	r24
    530a:	89 23       	and	r24, r25
    530c:	8c 93       	st	X, r24
				SET_PINS_VALUE(GPIOD_PORT,pins);
    530e:	a2 e3       	ldi	r26, 0x32	; 50
    5310:	b0 e0       	ldi	r27, 0x00	; 0
    5312:	e2 e3       	ldi	r30, 0x32	; 50
    5314:	f0 e0       	ldi	r31, 0x00	; 0
    5316:	90 81       	ld	r25, Z
    5318:	8a 81       	ldd	r24, Y+2	; 0x02
    531a:	89 2b       	or	r24, r25
    531c:	8c 93       	st	X, r24
			break;



	}
}
    531e:	2d 96       	adiw	r28, 0x0d	; 13
    5320:	0f b6       	in	r0, 0x3f	; 63
    5322:	f8 94       	cli
    5324:	de bf       	out	0x3e, r29	; 62
    5326:	0f be       	out	0x3f, r0	; 63
    5328:	cd bf       	out	0x3d, r28	; 61
    532a:	cf 91       	pop	r28
    532c:	df 91       	pop	r29
    532e:	08 95       	ret

00005330 <AVE_BittsMappedToPins>:
 * this function is used internally inside our file to mapp the bit value to the value
 * of a pin inside a port !.
 */

static void AVE_BittsMappedToPins(uint8 Bit,uint8* Pin)
{
    5330:	df 93       	push	r29
    5332:	cf 93       	push	r28
    5334:	00 d0       	rcall	.+0      	; 0x5336 <AVE_BittsMappedToPins+0x6>
    5336:	00 d0       	rcall	.+0      	; 0x5338 <AVE_BittsMappedToPins+0x8>
    5338:	cd b7       	in	r28, 0x3d	; 61
    533a:	de b7       	in	r29, 0x3e	; 62
    533c:	8a 83       	std	Y+2, r24	; 0x02
    533e:	7c 83       	std	Y+4, r23	; 0x04
    5340:	6b 83       	std	Y+3, r22	; 0x03
	uint8 counter = 0;
    5342:	19 82       	std	Y+1, r1	; 0x01
    5344:	06 c0       	rjmp	.+12     	; 0x5352 <AVE_BittsMappedToPins+0x22>
	while(Bit/2)
	{
		counter++;
    5346:	89 81       	ldd	r24, Y+1	; 0x01
    5348:	8f 5f       	subi	r24, 0xFF	; 255
    534a:	89 83       	std	Y+1, r24	; 0x01
		Bit/=2;
    534c:	8a 81       	ldd	r24, Y+2	; 0x02
    534e:	86 95       	lsr	r24
    5350:	8a 83       	std	Y+2, r24	; 0x02
 */

static void AVE_BittsMappedToPins(uint8 Bit,uint8* Pin)
{
	uint8 counter = 0;
	while(Bit/2)
    5352:	8a 81       	ldd	r24, Y+2	; 0x02
    5354:	82 30       	cpi	r24, 0x02	; 2
    5356:	b8 f7       	brcc	.-18     	; 0x5346 <AVE_BittsMappedToPins+0x16>
		counter++;
		Bit/=2;

	}

	*Pin = counter;
    5358:	eb 81       	ldd	r30, Y+3	; 0x03
    535a:	fc 81       	ldd	r31, Y+4	; 0x04
    535c:	89 81       	ldd	r24, Y+1	; 0x01
    535e:	80 83       	st	Z, r24



}
    5360:	0f 90       	pop	r0
    5362:	0f 90       	pop	r0
    5364:	0f 90       	pop	r0
    5366:	0f 90       	pop	r0
    5368:	cf 91       	pop	r28
    536a:	df 91       	pop	r29
    536c:	08 95       	ret

0000536e <AVE_gpioPinWrite>:
 * the value is one of the two following HIGH or LOW !.
 *
 */

void AVE_gpioPinWrite(uint8 port, uint8 pins, uint8 value)
{
    536e:	df 93       	push	r29
    5370:	cf 93       	push	r28
    5372:	cd b7       	in	r28, 0x3d	; 61
    5374:	de b7       	in	r29, 0x3e	; 62
    5376:	2e 97       	sbiw	r28, 0x0e	; 14
    5378:	0f b6       	in	r0, 0x3f	; 63
    537a:	f8 94       	cli
    537c:	de bf       	out	0x3e, r29	; 62
    537e:	0f be       	out	0x3f, r0	; 63
    5380:	cd bf       	out	0x3d, r28	; 61
    5382:	8a 83       	std	Y+2, r24	; 0x02
    5384:	6b 83       	std	Y+3, r22	; 0x03
    5386:	4c 83       	std	Y+4, r20	; 0x04
	uint8 pin;
	AVE_BittsMappedToPins(pins,&pin);
    5388:	8b 81       	ldd	r24, Y+3	; 0x03
    538a:	9e 01       	movw	r18, r28
    538c:	2f 5f       	subi	r18, 0xFF	; 255
    538e:	3f 4f       	sbci	r19, 0xFF	; 255
    5390:	b9 01       	movw	r22, r18
    5392:	0e 94 98 29 	call	0x5330	; 0x5330 <AVE_BittsMappedToPins>

	switch(port)
    5396:	8a 81       	ldd	r24, Y+2	; 0x02
    5398:	28 2f       	mov	r18, r24
    539a:	30 e0       	ldi	r19, 0x00	; 0
    539c:	3e 87       	std	Y+14, r19	; 0x0e
    539e:	2d 87       	std	Y+13, r18	; 0x0d
    53a0:	8d 85       	ldd	r24, Y+13	; 0x0d
    53a2:	9e 85       	ldd	r25, Y+14	; 0x0e
    53a4:	81 30       	cpi	r24, 0x01	; 1
    53a6:	91 05       	cpc	r25, r1
    53a8:	09 f4       	brne	.+2      	; 0x53ac <AVE_gpioPinWrite+0x3e>
    53aa:	4f c0       	rjmp	.+158    	; 0x544a <AVE_gpioPinWrite+0xdc>
    53ac:	2d 85       	ldd	r18, Y+13	; 0x0d
    53ae:	3e 85       	ldd	r19, Y+14	; 0x0e
    53b0:	22 30       	cpi	r18, 0x02	; 2
    53b2:	31 05       	cpc	r19, r1
    53b4:	2c f4       	brge	.+10     	; 0x53c0 <AVE_gpioPinWrite+0x52>
    53b6:	8d 85       	ldd	r24, Y+13	; 0x0d
    53b8:	9e 85       	ldd	r25, Y+14	; 0x0e
    53ba:	00 97       	sbiw	r24, 0x00	; 0
    53bc:	71 f0       	breq	.+28     	; 0x53da <AVE_gpioPinWrite+0x6c>
    53be:	eb c0       	rjmp	.+470    	; 0x5596 <AVE_gpioPinWrite+0x228>
    53c0:	2d 85       	ldd	r18, Y+13	; 0x0d
    53c2:	3e 85       	ldd	r19, Y+14	; 0x0e
    53c4:	22 30       	cpi	r18, 0x02	; 2
    53c6:	31 05       	cpc	r19, r1
    53c8:	09 f4       	brne	.+2      	; 0x53cc <AVE_gpioPinWrite+0x5e>
    53ca:	77 c0       	rjmp	.+238    	; 0x54ba <AVE_gpioPinWrite+0x14c>
    53cc:	8d 85       	ldd	r24, Y+13	; 0x0d
    53ce:	9e 85       	ldd	r25, Y+14	; 0x0e
    53d0:	83 30       	cpi	r24, 0x03	; 3
    53d2:	91 05       	cpc	r25, r1
    53d4:	09 f4       	brne	.+2      	; 0x53d8 <AVE_gpioPinWrite+0x6a>
    53d6:	a9 c0       	rjmp	.+338    	; 0x552a <AVE_gpioPinWrite+0x1bc>
    53d8:	de c0       	rjmp	.+444    	; 0x5596 <AVE_gpioPinWrite+0x228>
	{
	case PORTA:
		switch(value)
    53da:	8c 81       	ldd	r24, Y+4	; 0x04
    53dc:	28 2f       	mov	r18, r24
    53de:	30 e0       	ldi	r19, 0x00	; 0
    53e0:	3c 87       	std	Y+12, r19	; 0x0c
    53e2:	2b 87       	std	Y+11, r18	; 0x0b
    53e4:	8b 85       	ldd	r24, Y+11	; 0x0b
    53e6:	9c 85       	ldd	r25, Y+12	; 0x0c
    53e8:	00 97       	sbiw	r24, 0x00	; 0
    53ea:	d1 f0       	breq	.+52     	; 0x5420 <AVE_gpioPinWrite+0xb2>
    53ec:	2b 85       	ldd	r18, Y+11	; 0x0b
    53ee:	3c 85       	ldd	r19, Y+12	; 0x0c
    53f0:	21 30       	cpi	r18, 0x01	; 1
    53f2:	31 05       	cpc	r19, r1
    53f4:	09 f0       	breq	.+2      	; 0x53f8 <AVE_gpioPinWrite+0x8a>
    53f6:	cf c0       	rjmp	.+414    	; 0x5596 <AVE_gpioPinWrite+0x228>
		{
		case HIGH:
			SET_BIT(GPIOA_PORT,pin);
    53f8:	ab e3       	ldi	r26, 0x3B	; 59
    53fa:	b0 e0       	ldi	r27, 0x00	; 0
    53fc:	eb e3       	ldi	r30, 0x3B	; 59
    53fe:	f0 e0       	ldi	r31, 0x00	; 0
    5400:	80 81       	ld	r24, Z
    5402:	48 2f       	mov	r20, r24
    5404:	89 81       	ldd	r24, Y+1	; 0x01
    5406:	28 2f       	mov	r18, r24
    5408:	30 e0       	ldi	r19, 0x00	; 0
    540a:	81 e0       	ldi	r24, 0x01	; 1
    540c:	90 e0       	ldi	r25, 0x00	; 0
    540e:	02 2e       	mov	r0, r18
    5410:	02 c0       	rjmp	.+4      	; 0x5416 <AVE_gpioPinWrite+0xa8>
    5412:	88 0f       	add	r24, r24
    5414:	99 1f       	adc	r25, r25
    5416:	0a 94       	dec	r0
    5418:	e2 f7       	brpl	.-8      	; 0x5412 <AVE_gpioPinWrite+0xa4>
    541a:	84 2b       	or	r24, r20
    541c:	8c 93       	st	X, r24
    541e:	bb c0       	rjmp	.+374    	; 0x5596 <AVE_gpioPinWrite+0x228>
			break;
		case LOW:
			CLEAR_BIT(GPIOA_PORT,pin);
    5420:	ab e3       	ldi	r26, 0x3B	; 59
    5422:	b0 e0       	ldi	r27, 0x00	; 0
    5424:	eb e3       	ldi	r30, 0x3B	; 59
    5426:	f0 e0       	ldi	r31, 0x00	; 0
    5428:	80 81       	ld	r24, Z
    542a:	48 2f       	mov	r20, r24
    542c:	89 81       	ldd	r24, Y+1	; 0x01
    542e:	28 2f       	mov	r18, r24
    5430:	30 e0       	ldi	r19, 0x00	; 0
    5432:	81 e0       	ldi	r24, 0x01	; 1
    5434:	90 e0       	ldi	r25, 0x00	; 0
    5436:	02 2e       	mov	r0, r18
    5438:	02 c0       	rjmp	.+4      	; 0x543e <AVE_gpioPinWrite+0xd0>
    543a:	88 0f       	add	r24, r24
    543c:	99 1f       	adc	r25, r25
    543e:	0a 94       	dec	r0
    5440:	e2 f7       	brpl	.-8      	; 0x543a <AVE_gpioPinWrite+0xcc>
    5442:	80 95       	com	r24
    5444:	84 23       	and	r24, r20
    5446:	8c 93       	st	X, r24
    5448:	a6 c0       	rjmp	.+332    	; 0x5596 <AVE_gpioPinWrite+0x228>
		}


		break;
	case PORTB:
		switch(value)
    544a:	8c 81       	ldd	r24, Y+4	; 0x04
    544c:	28 2f       	mov	r18, r24
    544e:	30 e0       	ldi	r19, 0x00	; 0
    5450:	3a 87       	std	Y+10, r19	; 0x0a
    5452:	29 87       	std	Y+9, r18	; 0x09
    5454:	89 85       	ldd	r24, Y+9	; 0x09
    5456:	9a 85       	ldd	r25, Y+10	; 0x0a
    5458:	00 97       	sbiw	r24, 0x00	; 0
    545a:	d1 f0       	breq	.+52     	; 0x5490 <AVE_gpioPinWrite+0x122>
    545c:	29 85       	ldd	r18, Y+9	; 0x09
    545e:	3a 85       	ldd	r19, Y+10	; 0x0a
    5460:	21 30       	cpi	r18, 0x01	; 1
    5462:	31 05       	cpc	r19, r1
    5464:	09 f0       	breq	.+2      	; 0x5468 <AVE_gpioPinWrite+0xfa>
    5466:	97 c0       	rjmp	.+302    	; 0x5596 <AVE_gpioPinWrite+0x228>
		{

		case HIGH:
			SET_BIT(GPIOB_PORT,pin);
    5468:	a8 e3       	ldi	r26, 0x38	; 56
    546a:	b0 e0       	ldi	r27, 0x00	; 0
    546c:	e8 e3       	ldi	r30, 0x38	; 56
    546e:	f0 e0       	ldi	r31, 0x00	; 0
    5470:	80 81       	ld	r24, Z
    5472:	48 2f       	mov	r20, r24
    5474:	89 81       	ldd	r24, Y+1	; 0x01
    5476:	28 2f       	mov	r18, r24
    5478:	30 e0       	ldi	r19, 0x00	; 0
    547a:	81 e0       	ldi	r24, 0x01	; 1
    547c:	90 e0       	ldi	r25, 0x00	; 0
    547e:	02 2e       	mov	r0, r18
    5480:	02 c0       	rjmp	.+4      	; 0x5486 <AVE_gpioPinWrite+0x118>
    5482:	88 0f       	add	r24, r24
    5484:	99 1f       	adc	r25, r25
    5486:	0a 94       	dec	r0
    5488:	e2 f7       	brpl	.-8      	; 0x5482 <AVE_gpioPinWrite+0x114>
    548a:	84 2b       	or	r24, r20
    548c:	8c 93       	st	X, r24
    548e:	83 c0       	rjmp	.+262    	; 0x5596 <AVE_gpioPinWrite+0x228>
			break;
		case LOW:
			CLEAR_BIT(GPIOB_PORT,pin);
    5490:	a8 e3       	ldi	r26, 0x38	; 56
    5492:	b0 e0       	ldi	r27, 0x00	; 0
    5494:	e8 e3       	ldi	r30, 0x38	; 56
    5496:	f0 e0       	ldi	r31, 0x00	; 0
    5498:	80 81       	ld	r24, Z
    549a:	48 2f       	mov	r20, r24
    549c:	89 81       	ldd	r24, Y+1	; 0x01
    549e:	28 2f       	mov	r18, r24
    54a0:	30 e0       	ldi	r19, 0x00	; 0
    54a2:	81 e0       	ldi	r24, 0x01	; 1
    54a4:	90 e0       	ldi	r25, 0x00	; 0
    54a6:	02 2e       	mov	r0, r18
    54a8:	02 c0       	rjmp	.+4      	; 0x54ae <AVE_gpioPinWrite+0x140>
    54aa:	88 0f       	add	r24, r24
    54ac:	99 1f       	adc	r25, r25
    54ae:	0a 94       	dec	r0
    54b0:	e2 f7       	brpl	.-8      	; 0x54aa <AVE_gpioPinWrite+0x13c>
    54b2:	80 95       	com	r24
    54b4:	84 23       	and	r24, r20
    54b6:	8c 93       	st	X, r24
    54b8:	6e c0       	rjmp	.+220    	; 0x5596 <AVE_gpioPinWrite+0x228>
		}


		break;
	case PORTC:
		switch(value)
    54ba:	8c 81       	ldd	r24, Y+4	; 0x04
    54bc:	28 2f       	mov	r18, r24
    54be:	30 e0       	ldi	r19, 0x00	; 0
    54c0:	38 87       	std	Y+8, r19	; 0x08
    54c2:	2f 83       	std	Y+7, r18	; 0x07
    54c4:	8f 81       	ldd	r24, Y+7	; 0x07
    54c6:	98 85       	ldd	r25, Y+8	; 0x08
    54c8:	00 97       	sbiw	r24, 0x00	; 0
    54ca:	d1 f0       	breq	.+52     	; 0x5500 <AVE_gpioPinWrite+0x192>
    54cc:	2f 81       	ldd	r18, Y+7	; 0x07
    54ce:	38 85       	ldd	r19, Y+8	; 0x08
    54d0:	21 30       	cpi	r18, 0x01	; 1
    54d2:	31 05       	cpc	r19, r1
    54d4:	09 f0       	breq	.+2      	; 0x54d8 <AVE_gpioPinWrite+0x16a>
    54d6:	5f c0       	rjmp	.+190    	; 0x5596 <AVE_gpioPinWrite+0x228>
		{
		case HIGH:
			SET_BIT(GPIOC_PORT,pin);
    54d8:	a5 e3       	ldi	r26, 0x35	; 53
    54da:	b0 e0       	ldi	r27, 0x00	; 0
    54dc:	e5 e3       	ldi	r30, 0x35	; 53
    54de:	f0 e0       	ldi	r31, 0x00	; 0
    54e0:	80 81       	ld	r24, Z
    54e2:	48 2f       	mov	r20, r24
    54e4:	89 81       	ldd	r24, Y+1	; 0x01
    54e6:	28 2f       	mov	r18, r24
    54e8:	30 e0       	ldi	r19, 0x00	; 0
    54ea:	81 e0       	ldi	r24, 0x01	; 1
    54ec:	90 e0       	ldi	r25, 0x00	; 0
    54ee:	02 2e       	mov	r0, r18
    54f0:	02 c0       	rjmp	.+4      	; 0x54f6 <AVE_gpioPinWrite+0x188>
    54f2:	88 0f       	add	r24, r24
    54f4:	99 1f       	adc	r25, r25
    54f6:	0a 94       	dec	r0
    54f8:	e2 f7       	brpl	.-8      	; 0x54f2 <AVE_gpioPinWrite+0x184>
    54fa:	84 2b       	or	r24, r20
    54fc:	8c 93       	st	X, r24
    54fe:	4b c0       	rjmp	.+150    	; 0x5596 <AVE_gpioPinWrite+0x228>
			break;
		case LOW:
			CLEAR_BIT(GPIOC_PORT,pin);
    5500:	a5 e3       	ldi	r26, 0x35	; 53
    5502:	b0 e0       	ldi	r27, 0x00	; 0
    5504:	e5 e3       	ldi	r30, 0x35	; 53
    5506:	f0 e0       	ldi	r31, 0x00	; 0
    5508:	80 81       	ld	r24, Z
    550a:	48 2f       	mov	r20, r24
    550c:	89 81       	ldd	r24, Y+1	; 0x01
    550e:	28 2f       	mov	r18, r24
    5510:	30 e0       	ldi	r19, 0x00	; 0
    5512:	81 e0       	ldi	r24, 0x01	; 1
    5514:	90 e0       	ldi	r25, 0x00	; 0
    5516:	02 2e       	mov	r0, r18
    5518:	02 c0       	rjmp	.+4      	; 0x551e <AVE_gpioPinWrite+0x1b0>
    551a:	88 0f       	add	r24, r24
    551c:	99 1f       	adc	r25, r25
    551e:	0a 94       	dec	r0
    5520:	e2 f7       	brpl	.-8      	; 0x551a <AVE_gpioPinWrite+0x1ac>
    5522:	80 95       	com	r24
    5524:	84 23       	and	r24, r20
    5526:	8c 93       	st	X, r24
    5528:	36 c0       	rjmp	.+108    	; 0x5596 <AVE_gpioPinWrite+0x228>
		}


		break;
	case PORTD:
		switch(value)
    552a:	8c 81       	ldd	r24, Y+4	; 0x04
    552c:	28 2f       	mov	r18, r24
    552e:	30 e0       	ldi	r19, 0x00	; 0
    5530:	3e 83       	std	Y+6, r19	; 0x06
    5532:	2d 83       	std	Y+5, r18	; 0x05
    5534:	8d 81       	ldd	r24, Y+5	; 0x05
    5536:	9e 81       	ldd	r25, Y+6	; 0x06
    5538:	00 97       	sbiw	r24, 0x00	; 0
    553a:	c9 f0       	breq	.+50     	; 0x556e <AVE_gpioPinWrite+0x200>
    553c:	2d 81       	ldd	r18, Y+5	; 0x05
    553e:	3e 81       	ldd	r19, Y+6	; 0x06
    5540:	21 30       	cpi	r18, 0x01	; 1
    5542:	31 05       	cpc	r19, r1
    5544:	41 f5       	brne	.+80     	; 0x5596 <AVE_gpioPinWrite+0x228>
		{
		case HIGH:
			SET_BIT(GPIOD_PORT,pin);
    5546:	a2 e3       	ldi	r26, 0x32	; 50
    5548:	b0 e0       	ldi	r27, 0x00	; 0
    554a:	e2 e3       	ldi	r30, 0x32	; 50
    554c:	f0 e0       	ldi	r31, 0x00	; 0
    554e:	80 81       	ld	r24, Z
    5550:	48 2f       	mov	r20, r24
    5552:	89 81       	ldd	r24, Y+1	; 0x01
    5554:	28 2f       	mov	r18, r24
    5556:	30 e0       	ldi	r19, 0x00	; 0
    5558:	81 e0       	ldi	r24, 0x01	; 1
    555a:	90 e0       	ldi	r25, 0x00	; 0
    555c:	02 2e       	mov	r0, r18
    555e:	02 c0       	rjmp	.+4      	; 0x5564 <AVE_gpioPinWrite+0x1f6>
    5560:	88 0f       	add	r24, r24
    5562:	99 1f       	adc	r25, r25
    5564:	0a 94       	dec	r0
    5566:	e2 f7       	brpl	.-8      	; 0x5560 <AVE_gpioPinWrite+0x1f2>
    5568:	84 2b       	or	r24, r20
    556a:	8c 93       	st	X, r24
    556c:	14 c0       	rjmp	.+40     	; 0x5596 <AVE_gpioPinWrite+0x228>
			break;
		case LOW:
			CLEAR_BIT(GPIOD_PORT,pin);
    556e:	a2 e3       	ldi	r26, 0x32	; 50
    5570:	b0 e0       	ldi	r27, 0x00	; 0
    5572:	e2 e3       	ldi	r30, 0x32	; 50
    5574:	f0 e0       	ldi	r31, 0x00	; 0
    5576:	80 81       	ld	r24, Z
    5578:	48 2f       	mov	r20, r24
    557a:	89 81       	ldd	r24, Y+1	; 0x01
    557c:	28 2f       	mov	r18, r24
    557e:	30 e0       	ldi	r19, 0x00	; 0
    5580:	81 e0       	ldi	r24, 0x01	; 1
    5582:	90 e0       	ldi	r25, 0x00	; 0
    5584:	02 2e       	mov	r0, r18
    5586:	02 c0       	rjmp	.+4      	; 0x558c <AVE_gpioPinWrite+0x21e>
    5588:	88 0f       	add	r24, r24
    558a:	99 1f       	adc	r25, r25
    558c:	0a 94       	dec	r0
    558e:	e2 f7       	brpl	.-8      	; 0x5588 <AVE_gpioPinWrite+0x21a>
    5590:	80 95       	com	r24
    5592:	84 23       	and	r24, r20
    5594:	8c 93       	st	X, r24
		}


		break;
	}
}
    5596:	2e 96       	adiw	r28, 0x0e	; 14
    5598:	0f b6       	in	r0, 0x3f	; 63
    559a:	f8 94       	cli
    559c:	de bf       	out	0x3e, r29	; 62
    559e:	0f be       	out	0x3f, r0	; 63
    55a0:	cd bf       	out	0x3d, r28	; 61
    55a2:	cf 91       	pop	r28
    55a4:	df 91       	pop	r29
    55a6:	08 95       	ret

000055a8 <AVE_gpioPinToggle>:
 * the pin must previously set as output in order for that function to be
 * work correctly !.
 */

void AVE_gpioPinToggle(uint8 port, uint8 pins)
{
    55a8:	df 93       	push	r29
    55aa:	cf 93       	push	r28
    55ac:	00 d0       	rcall	.+0      	; 0x55ae <AVE_gpioPinToggle+0x6>
    55ae:	00 d0       	rcall	.+0      	; 0x55b0 <AVE_gpioPinToggle+0x8>
    55b0:	cd b7       	in	r28, 0x3d	; 61
    55b2:	de b7       	in	r29, 0x3e	; 62
    55b4:	89 83       	std	Y+1, r24	; 0x01
    55b6:	6a 83       	std	Y+2, r22	; 0x02

	switch(port)
    55b8:	89 81       	ldd	r24, Y+1	; 0x01
    55ba:	28 2f       	mov	r18, r24
    55bc:	30 e0       	ldi	r19, 0x00	; 0
    55be:	3c 83       	std	Y+4, r19	; 0x04
    55c0:	2b 83       	std	Y+3, r18	; 0x03
    55c2:	8b 81       	ldd	r24, Y+3	; 0x03
    55c4:	9c 81       	ldd	r25, Y+4	; 0x04
    55c6:	81 30       	cpi	r24, 0x01	; 1
    55c8:	91 05       	cpc	r25, r1
    55ca:	f1 f0       	breq	.+60     	; 0x5608 <AVE_gpioPinToggle+0x60>
    55cc:	2b 81       	ldd	r18, Y+3	; 0x03
    55ce:	3c 81       	ldd	r19, Y+4	; 0x04
    55d0:	22 30       	cpi	r18, 0x02	; 2
    55d2:	31 05       	cpc	r19, r1
    55d4:	2c f4       	brge	.+10     	; 0x55e0 <AVE_gpioPinToggle+0x38>
    55d6:	8b 81       	ldd	r24, Y+3	; 0x03
    55d8:	9c 81       	ldd	r25, Y+4	; 0x04
    55da:	00 97       	sbiw	r24, 0x00	; 0
    55dc:	61 f0       	breq	.+24     	; 0x55f6 <AVE_gpioPinToggle+0x4e>
    55de:	2e c0       	rjmp	.+92     	; 0x563c <AVE_gpioPinToggle+0x94>
    55e0:	2b 81       	ldd	r18, Y+3	; 0x03
    55e2:	3c 81       	ldd	r19, Y+4	; 0x04
    55e4:	22 30       	cpi	r18, 0x02	; 2
    55e6:	31 05       	cpc	r19, r1
    55e8:	c1 f0       	breq	.+48     	; 0x561a <AVE_gpioPinToggle+0x72>
    55ea:	8b 81       	ldd	r24, Y+3	; 0x03
    55ec:	9c 81       	ldd	r25, Y+4	; 0x04
    55ee:	83 30       	cpi	r24, 0x03	; 3
    55f0:	91 05       	cpc	r25, r1
    55f2:	e1 f0       	breq	.+56     	; 0x562c <AVE_gpioPinToggle+0x84>
    55f4:	23 c0       	rjmp	.+70     	; 0x563c <AVE_gpioPinToggle+0x94>
	{

	case PORTA:
		TOGGLE_PINS(GPIOA_PORT,pins);
    55f6:	ab e3       	ldi	r26, 0x3B	; 59
    55f8:	b0 e0       	ldi	r27, 0x00	; 0
    55fa:	eb e3       	ldi	r30, 0x3B	; 59
    55fc:	f0 e0       	ldi	r31, 0x00	; 0
    55fe:	90 81       	ld	r25, Z
    5600:	8a 81       	ldd	r24, Y+2	; 0x02
    5602:	89 27       	eor	r24, r25
    5604:	8c 93       	st	X, r24
    5606:	1a c0       	rjmp	.+52     	; 0x563c <AVE_gpioPinToggle+0x94>
		break;
	case PORTB:
		TOGGLE_PINS(GPIOB_PORT,pins);
    5608:	a8 e3       	ldi	r26, 0x38	; 56
    560a:	b0 e0       	ldi	r27, 0x00	; 0
    560c:	e8 e3       	ldi	r30, 0x38	; 56
    560e:	f0 e0       	ldi	r31, 0x00	; 0
    5610:	90 81       	ld	r25, Z
    5612:	8a 81       	ldd	r24, Y+2	; 0x02
    5614:	89 27       	eor	r24, r25
    5616:	8c 93       	st	X, r24
    5618:	11 c0       	rjmp	.+34     	; 0x563c <AVE_gpioPinToggle+0x94>
		break;
	case PORTC:
		TOGGLE_PINS(GPIOC_PORT,pins);
    561a:	a5 e3       	ldi	r26, 0x35	; 53
    561c:	b0 e0       	ldi	r27, 0x00	; 0
    561e:	e5 e3       	ldi	r30, 0x35	; 53
    5620:	f0 e0       	ldi	r31, 0x00	; 0
    5622:	90 81       	ld	r25, Z
    5624:	8a 81       	ldd	r24, Y+2	; 0x02
    5626:	89 27       	eor	r24, r25
    5628:	8c 93       	st	X, r24
    562a:	08 c0       	rjmp	.+16     	; 0x563c <AVE_gpioPinToggle+0x94>
		break;
	case PORTD:
		TOGGLE_PINS(GPIOD_PORT,pins);
    562c:	a2 e3       	ldi	r26, 0x32	; 50
    562e:	b0 e0       	ldi	r27, 0x00	; 0
    5630:	e2 e3       	ldi	r30, 0x32	; 50
    5632:	f0 e0       	ldi	r31, 0x00	; 0
    5634:	90 81       	ld	r25, Z
    5636:	8a 81       	ldd	r24, Y+2	; 0x02
    5638:	89 27       	eor	r24, r25
    563a:	8c 93       	st	X, r24
		break;

	}
}
    563c:	0f 90       	pop	r0
    563e:	0f 90       	pop	r0
    5640:	0f 90       	pop	r0
    5642:	0f 90       	pop	r0
    5644:	cf 91       	pop	r28
    5646:	df 91       	pop	r29
    5648:	08 95       	ret

0000564a <AVE_gpioPinRead>:
 * to be filled with the value of a specified pin inside a port.
 *
 */

void AVE_gpioPinRead(uint8 port, uint8 pin,uint8*value)
{
    564a:	df 93       	push	r29
    564c:	cf 93       	push	r28
    564e:	cd b7       	in	r28, 0x3d	; 61
    5650:	de b7       	in	r29, 0x3e	; 62
    5652:	27 97       	sbiw	r28, 0x07	; 7
    5654:	0f b6       	in	r0, 0x3f	; 63
    5656:	f8 94       	cli
    5658:	de bf       	out	0x3e, r29	; 62
    565a:	0f be       	out	0x3f, r0	; 63
    565c:	cd bf       	out	0x3d, r28	; 61
    565e:	8a 83       	std	Y+2, r24	; 0x02
    5660:	6b 83       	std	Y+3, r22	; 0x03
    5662:	5d 83       	std	Y+5, r21	; 0x05
    5664:	4c 83       	std	Y+4, r20	; 0x04

	uint8 PIN;
	AVE_BittsMappedToPins(pin,&PIN);
    5666:	8b 81       	ldd	r24, Y+3	; 0x03
    5668:	9e 01       	movw	r18, r28
    566a:	2f 5f       	subi	r18, 0xFF	; 255
    566c:	3f 4f       	sbci	r19, 0xFF	; 255
    566e:	b9 01       	movw	r22, r18
    5670:	0e 94 98 29 	call	0x5330	; 0x5330 <AVE_BittsMappedToPins>

	switch(port)
    5674:	8a 81       	ldd	r24, Y+2	; 0x02
    5676:	28 2f       	mov	r18, r24
    5678:	30 e0       	ldi	r19, 0x00	; 0
    567a:	3f 83       	std	Y+7, r19	; 0x07
    567c:	2e 83       	std	Y+6, r18	; 0x06
    567e:	4e 81       	ldd	r20, Y+6	; 0x06
    5680:	5f 81       	ldd	r21, Y+7	; 0x07
    5682:	41 30       	cpi	r20, 0x01	; 1
    5684:	51 05       	cpc	r21, r1
    5686:	59 f1       	breq	.+86     	; 0x56de <AVE_gpioPinRead+0x94>
    5688:	8e 81       	ldd	r24, Y+6	; 0x06
    568a:	9f 81       	ldd	r25, Y+7	; 0x07
    568c:	82 30       	cpi	r24, 0x02	; 2
    568e:	91 05       	cpc	r25, r1
    5690:	34 f4       	brge	.+12     	; 0x569e <AVE_gpioPinRead+0x54>
    5692:	2e 81       	ldd	r18, Y+6	; 0x06
    5694:	3f 81       	ldd	r19, Y+7	; 0x07
    5696:	21 15       	cp	r18, r1
    5698:	31 05       	cpc	r19, r1
    569a:	69 f0       	breq	.+26     	; 0x56b6 <AVE_gpioPinRead+0x6c>
    569c:	5b c0       	rjmp	.+182    	; 0x5754 <AVE_gpioPinRead+0x10a>
    569e:	4e 81       	ldd	r20, Y+6	; 0x06
    56a0:	5f 81       	ldd	r21, Y+7	; 0x07
    56a2:	42 30       	cpi	r20, 0x02	; 2
    56a4:	51 05       	cpc	r21, r1
    56a6:	79 f1       	breq	.+94     	; 0x5706 <AVE_gpioPinRead+0xbc>
    56a8:	8e 81       	ldd	r24, Y+6	; 0x06
    56aa:	9f 81       	ldd	r25, Y+7	; 0x07
    56ac:	83 30       	cpi	r24, 0x03	; 3
    56ae:	91 05       	cpc	r25, r1
    56b0:	09 f4       	brne	.+2      	; 0x56b4 <AVE_gpioPinRead+0x6a>
    56b2:	3d c0       	rjmp	.+122    	; 0x572e <AVE_gpioPinRead+0xe4>
    56b4:	4f c0       	rjmp	.+158    	; 0x5754 <AVE_gpioPinRead+0x10a>
	{

	case PORTA:
		*value = GET_BIT(GPIOA_PIN,PIN);
    56b6:	e9 e3       	ldi	r30, 0x39	; 57
    56b8:	f0 e0       	ldi	r31, 0x00	; 0
    56ba:	80 81       	ld	r24, Z
    56bc:	28 2f       	mov	r18, r24
    56be:	30 e0       	ldi	r19, 0x00	; 0
    56c0:	89 81       	ldd	r24, Y+1	; 0x01
    56c2:	88 2f       	mov	r24, r24
    56c4:	90 e0       	ldi	r25, 0x00	; 0
    56c6:	a9 01       	movw	r20, r18
    56c8:	02 c0       	rjmp	.+4      	; 0x56ce <AVE_gpioPinRead+0x84>
    56ca:	55 95       	asr	r21
    56cc:	47 95       	ror	r20
    56ce:	8a 95       	dec	r24
    56d0:	e2 f7       	brpl	.-8      	; 0x56ca <AVE_gpioPinRead+0x80>
    56d2:	ca 01       	movw	r24, r20
    56d4:	81 70       	andi	r24, 0x01	; 1
    56d6:	ec 81       	ldd	r30, Y+4	; 0x04
    56d8:	fd 81       	ldd	r31, Y+5	; 0x05
    56da:	80 83       	st	Z, r24
    56dc:	3b c0       	rjmp	.+118    	; 0x5754 <AVE_gpioPinRead+0x10a>
		break;
	case PORTB:
		*value = GET_BIT(GPIOB_PIN,PIN);
    56de:	e6 e3       	ldi	r30, 0x36	; 54
    56e0:	f0 e0       	ldi	r31, 0x00	; 0
    56e2:	80 81       	ld	r24, Z
    56e4:	28 2f       	mov	r18, r24
    56e6:	30 e0       	ldi	r19, 0x00	; 0
    56e8:	89 81       	ldd	r24, Y+1	; 0x01
    56ea:	88 2f       	mov	r24, r24
    56ec:	90 e0       	ldi	r25, 0x00	; 0
    56ee:	a9 01       	movw	r20, r18
    56f0:	02 c0       	rjmp	.+4      	; 0x56f6 <AVE_gpioPinRead+0xac>
    56f2:	55 95       	asr	r21
    56f4:	47 95       	ror	r20
    56f6:	8a 95       	dec	r24
    56f8:	e2 f7       	brpl	.-8      	; 0x56f2 <AVE_gpioPinRead+0xa8>
    56fa:	ca 01       	movw	r24, r20
    56fc:	81 70       	andi	r24, 0x01	; 1
    56fe:	ec 81       	ldd	r30, Y+4	; 0x04
    5700:	fd 81       	ldd	r31, Y+5	; 0x05
    5702:	80 83       	st	Z, r24
    5704:	27 c0       	rjmp	.+78     	; 0x5754 <AVE_gpioPinRead+0x10a>
		break;
	case PORTC:
		*value = GET_BIT(GPIOC_PIN,PIN);
    5706:	e3 e3       	ldi	r30, 0x33	; 51
    5708:	f0 e0       	ldi	r31, 0x00	; 0
    570a:	80 81       	ld	r24, Z
    570c:	28 2f       	mov	r18, r24
    570e:	30 e0       	ldi	r19, 0x00	; 0
    5710:	89 81       	ldd	r24, Y+1	; 0x01
    5712:	88 2f       	mov	r24, r24
    5714:	90 e0       	ldi	r25, 0x00	; 0
    5716:	a9 01       	movw	r20, r18
    5718:	02 c0       	rjmp	.+4      	; 0x571e <AVE_gpioPinRead+0xd4>
    571a:	55 95       	asr	r21
    571c:	47 95       	ror	r20
    571e:	8a 95       	dec	r24
    5720:	e2 f7       	brpl	.-8      	; 0x571a <AVE_gpioPinRead+0xd0>
    5722:	ca 01       	movw	r24, r20
    5724:	81 70       	andi	r24, 0x01	; 1
    5726:	ec 81       	ldd	r30, Y+4	; 0x04
    5728:	fd 81       	ldd	r31, Y+5	; 0x05
    572a:	80 83       	st	Z, r24
    572c:	13 c0       	rjmp	.+38     	; 0x5754 <AVE_gpioPinRead+0x10a>
		break;
	case PORTD:
		*value = GET_BIT(GPIOD_PIN,PIN);
    572e:	e0 e3       	ldi	r30, 0x30	; 48
    5730:	f0 e0       	ldi	r31, 0x00	; 0
    5732:	80 81       	ld	r24, Z
    5734:	28 2f       	mov	r18, r24
    5736:	30 e0       	ldi	r19, 0x00	; 0
    5738:	89 81       	ldd	r24, Y+1	; 0x01
    573a:	88 2f       	mov	r24, r24
    573c:	90 e0       	ldi	r25, 0x00	; 0
    573e:	a9 01       	movw	r20, r18
    5740:	02 c0       	rjmp	.+4      	; 0x5746 <AVE_gpioPinRead+0xfc>
    5742:	55 95       	asr	r21
    5744:	47 95       	ror	r20
    5746:	8a 95       	dec	r24
    5748:	e2 f7       	brpl	.-8      	; 0x5742 <AVE_gpioPinRead+0xf8>
    574a:	ca 01       	movw	r24, r20
    574c:	81 70       	andi	r24, 0x01	; 1
    574e:	ec 81       	ldd	r30, Y+4	; 0x04
    5750:	fd 81       	ldd	r31, Y+5	; 0x05
    5752:	80 83       	st	Z, r24
	return;




}
    5754:	27 96       	adiw	r28, 0x07	; 7
    5756:	0f b6       	in	r0, 0x3f	; 63
    5758:	f8 94       	cli
    575a:	de bf       	out	0x3e, r29	; 62
    575c:	0f be       	out	0x3f, r0	; 63
    575e:	cd bf       	out	0x3d, r28	; 61
    5760:	cf 91       	pop	r28
    5762:	df 91       	pop	r29
    5764:	08 95       	ret

00005766 <AVE_gpioUpperNibbleDirection>:

void AVE_gpioUpperNibbleDirection(uint8 port, uint8 direction)
{
    5766:	df 93       	push	r29
    5768:	cf 93       	push	r28
    576a:	cd b7       	in	r28, 0x3d	; 61
    576c:	de b7       	in	r29, 0x3e	; 62
    576e:	2c 97       	sbiw	r28, 0x0c	; 12
    5770:	0f b6       	in	r0, 0x3f	; 63
    5772:	f8 94       	cli
    5774:	de bf       	out	0x3e, r29	; 62
    5776:	0f be       	out	0x3f, r0	; 63
    5778:	cd bf       	out	0x3d, r28	; 61
    577a:	89 83       	std	Y+1, r24	; 0x01
    577c:	6a 83       	std	Y+2, r22	; 0x02

	switch(port)
    577e:	89 81       	ldd	r24, Y+1	; 0x01
    5780:	28 2f       	mov	r18, r24
    5782:	30 e0       	ldi	r19, 0x00	; 0
    5784:	3c 87       	std	Y+12, r19	; 0x0c
    5786:	2b 87       	std	Y+11, r18	; 0x0b
    5788:	8b 85       	ldd	r24, Y+11	; 0x0b
    578a:	9c 85       	ldd	r25, Y+12	; 0x0c
    578c:	81 30       	cpi	r24, 0x01	; 1
    578e:	91 05       	cpc	r25, r1
    5790:	09 f4       	brne	.+2      	; 0x5794 <AVE_gpioUpperNibbleDirection+0x2e>
    5792:	4a c0       	rjmp	.+148    	; 0x5828 <AVE_gpioUpperNibbleDirection+0xc2>
    5794:	2b 85       	ldd	r18, Y+11	; 0x0b
    5796:	3c 85       	ldd	r19, Y+12	; 0x0c
    5798:	22 30       	cpi	r18, 0x02	; 2
    579a:	31 05       	cpc	r19, r1
    579c:	2c f4       	brge	.+10     	; 0x57a8 <AVE_gpioUpperNibbleDirection+0x42>
    579e:	8b 85       	ldd	r24, Y+11	; 0x0b
    57a0:	9c 85       	ldd	r25, Y+12	; 0x0c
    57a2:	00 97       	sbiw	r24, 0x00	; 0
    57a4:	71 f0       	breq	.+28     	; 0x57c2 <AVE_gpioUpperNibbleDirection+0x5c>
    57a6:	d7 c0       	rjmp	.+430    	; 0x5956 <AVE_gpioUpperNibbleDirection+0x1f0>
    57a8:	2b 85       	ldd	r18, Y+11	; 0x0b
    57aa:	3c 85       	ldd	r19, Y+12	; 0x0c
    57ac:	22 30       	cpi	r18, 0x02	; 2
    57ae:	31 05       	cpc	r19, r1
    57b0:	09 f4       	brne	.+2      	; 0x57b4 <AVE_gpioUpperNibbleDirection+0x4e>
    57b2:	6d c0       	rjmp	.+218    	; 0x588e <AVE_gpioUpperNibbleDirection+0x128>
    57b4:	8b 85       	ldd	r24, Y+11	; 0x0b
    57b6:	9c 85       	ldd	r25, Y+12	; 0x0c
    57b8:	83 30       	cpi	r24, 0x03	; 3
    57ba:	91 05       	cpc	r25, r1
    57bc:	09 f4       	brne	.+2      	; 0x57c0 <AVE_gpioUpperNibbleDirection+0x5a>
    57be:	9a c0       	rjmp	.+308    	; 0x58f4 <AVE_gpioUpperNibbleDirection+0x18e>
    57c0:	ca c0       	rjmp	.+404    	; 0x5956 <AVE_gpioUpperNibbleDirection+0x1f0>
	{

	case PORTA:
		switch(direction)
    57c2:	8a 81       	ldd	r24, Y+2	; 0x02
    57c4:	28 2f       	mov	r18, r24
    57c6:	30 e0       	ldi	r19, 0x00	; 0
    57c8:	3a 87       	std	Y+10, r19	; 0x0a
    57ca:	29 87       	std	Y+9, r18	; 0x09
    57cc:	89 85       	ldd	r24, Y+9	; 0x09
    57ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    57d0:	81 30       	cpi	r24, 0x01	; 1
    57d2:	91 05       	cpc	r25, r1
    57d4:	d1 f0       	breq	.+52     	; 0x580a <AVE_gpioUpperNibbleDirection+0xa4>
    57d6:	29 85       	ldd	r18, Y+9	; 0x09
    57d8:	3a 85       	ldd	r19, Y+10	; 0x0a
    57da:	22 30       	cpi	r18, 0x02	; 2
    57dc:	31 05       	cpc	r19, r1
    57de:	69 f0       	breq	.+26     	; 0x57fa <AVE_gpioUpperNibbleDirection+0x94>
    57e0:	89 85       	ldd	r24, Y+9	; 0x09
    57e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    57e4:	00 97       	sbiw	r24, 0x00	; 0
    57e6:	09 f0       	breq	.+2      	; 0x57ea <AVE_gpioUpperNibbleDirection+0x84>
    57e8:	b6 c0       	rjmp	.+364    	; 0x5956 <AVE_gpioUpperNibbleDirection+0x1f0>
		{
		case INPUT:
			CLEAR_4_HIGH_NIPPLE(GPIOA_DDR);
    57ea:	aa e3       	ldi	r26, 0x3A	; 58
    57ec:	b0 e0       	ldi	r27, 0x00	; 0
    57ee:	ea e3       	ldi	r30, 0x3A	; 58
    57f0:	f0 e0       	ldi	r31, 0x00	; 0
    57f2:	80 81       	ld	r24, Z
    57f4:	8f 70       	andi	r24, 0x0F	; 15
    57f6:	8c 93       	st	X, r24
    57f8:	ae c0       	rjmp	.+348    	; 0x5956 <AVE_gpioUpperNibbleDirection+0x1f0>
			break;
		case OUTPUT:
			SET_4_HIGH_NIPPLE(GPIOA_DDR);
    57fa:	aa e3       	ldi	r26, 0x3A	; 58
    57fc:	b0 e0       	ldi	r27, 0x00	; 0
    57fe:	ea e3       	ldi	r30, 0x3A	; 58
    5800:	f0 e0       	ldi	r31, 0x00	; 0
    5802:	80 81       	ld	r24, Z
    5804:	80 6f       	ori	r24, 0xF0	; 240
    5806:	8c 93       	st	X, r24
    5808:	a6 c0       	rjmp	.+332    	; 0x5956 <AVE_gpioUpperNibbleDirection+0x1f0>
			break;
		case INPUT_PULLUP:
			CLEAR_4_HIGH_NIPPLE(GPIOA_DDR);
    580a:	aa e3       	ldi	r26, 0x3A	; 58
    580c:	b0 e0       	ldi	r27, 0x00	; 0
    580e:	ea e3       	ldi	r30, 0x3A	; 58
    5810:	f0 e0       	ldi	r31, 0x00	; 0
    5812:	80 81       	ld	r24, Z
    5814:	8f 70       	andi	r24, 0x0F	; 15
    5816:	8c 93       	st	X, r24
			SET_4_HIGH_NIPPLE(GPIOA_PORT);
    5818:	ab e3       	ldi	r26, 0x3B	; 59
    581a:	b0 e0       	ldi	r27, 0x00	; 0
    581c:	eb e3       	ldi	r30, 0x3B	; 59
    581e:	f0 e0       	ldi	r31, 0x00	; 0
    5820:	80 81       	ld	r24, Z
    5822:	80 6f       	ori	r24, 0xF0	; 240
    5824:	8c 93       	st	X, r24
    5826:	97 c0       	rjmp	.+302    	; 0x5956 <AVE_gpioUpperNibbleDirection+0x1f0>
			break;

		}
		break;
	case PORTB:
			switch(direction)
    5828:	8a 81       	ldd	r24, Y+2	; 0x02
    582a:	28 2f       	mov	r18, r24
    582c:	30 e0       	ldi	r19, 0x00	; 0
    582e:	38 87       	std	Y+8, r19	; 0x08
    5830:	2f 83       	std	Y+7, r18	; 0x07
    5832:	8f 81       	ldd	r24, Y+7	; 0x07
    5834:	98 85       	ldd	r25, Y+8	; 0x08
    5836:	81 30       	cpi	r24, 0x01	; 1
    5838:	91 05       	cpc	r25, r1
    583a:	d1 f0       	breq	.+52     	; 0x5870 <AVE_gpioUpperNibbleDirection+0x10a>
    583c:	2f 81       	ldd	r18, Y+7	; 0x07
    583e:	38 85       	ldd	r19, Y+8	; 0x08
    5840:	22 30       	cpi	r18, 0x02	; 2
    5842:	31 05       	cpc	r19, r1
    5844:	69 f0       	breq	.+26     	; 0x5860 <AVE_gpioUpperNibbleDirection+0xfa>
    5846:	8f 81       	ldd	r24, Y+7	; 0x07
    5848:	98 85       	ldd	r25, Y+8	; 0x08
    584a:	00 97       	sbiw	r24, 0x00	; 0
    584c:	09 f0       	breq	.+2      	; 0x5850 <AVE_gpioUpperNibbleDirection+0xea>
    584e:	83 c0       	rjmp	.+262    	; 0x5956 <AVE_gpioUpperNibbleDirection+0x1f0>
			{
			case INPUT:
				CLEAR_4_HIGH_NIPPLE(GPIOB_DDR);
    5850:	a7 e3       	ldi	r26, 0x37	; 55
    5852:	b0 e0       	ldi	r27, 0x00	; 0
    5854:	e7 e3       	ldi	r30, 0x37	; 55
    5856:	f0 e0       	ldi	r31, 0x00	; 0
    5858:	80 81       	ld	r24, Z
    585a:	8f 70       	andi	r24, 0x0F	; 15
    585c:	8c 93       	st	X, r24
    585e:	7b c0       	rjmp	.+246    	; 0x5956 <AVE_gpioUpperNibbleDirection+0x1f0>
				break;
			case OUTPUT:
				SET_4_HIGH_NIPPLE(GPIOB_DDR);
    5860:	a7 e3       	ldi	r26, 0x37	; 55
    5862:	b0 e0       	ldi	r27, 0x00	; 0
    5864:	e7 e3       	ldi	r30, 0x37	; 55
    5866:	f0 e0       	ldi	r31, 0x00	; 0
    5868:	80 81       	ld	r24, Z
    586a:	80 6f       	ori	r24, 0xF0	; 240
    586c:	8c 93       	st	X, r24
    586e:	73 c0       	rjmp	.+230    	; 0x5956 <AVE_gpioUpperNibbleDirection+0x1f0>
				break;
			case INPUT_PULLUP:
				CLEAR_4_HIGH_NIPPLE(GPIOB_DDR);
    5870:	a7 e3       	ldi	r26, 0x37	; 55
    5872:	b0 e0       	ldi	r27, 0x00	; 0
    5874:	e7 e3       	ldi	r30, 0x37	; 55
    5876:	f0 e0       	ldi	r31, 0x00	; 0
    5878:	80 81       	ld	r24, Z
    587a:	8f 70       	andi	r24, 0x0F	; 15
    587c:	8c 93       	st	X, r24
				SET_4_HIGH_NIPPLE(GPIOB_PORT);
    587e:	a8 e3       	ldi	r26, 0x38	; 56
    5880:	b0 e0       	ldi	r27, 0x00	; 0
    5882:	e8 e3       	ldi	r30, 0x38	; 56
    5884:	f0 e0       	ldi	r31, 0x00	; 0
    5886:	80 81       	ld	r24, Z
    5888:	80 6f       	ori	r24, 0xF0	; 240
    588a:	8c 93       	st	X, r24
    588c:	64 c0       	rjmp	.+200    	; 0x5956 <AVE_gpioUpperNibbleDirection+0x1f0>

			}
			break;

	case PORTC:
			switch(direction)
    588e:	8a 81       	ldd	r24, Y+2	; 0x02
    5890:	28 2f       	mov	r18, r24
    5892:	30 e0       	ldi	r19, 0x00	; 0
    5894:	3e 83       	std	Y+6, r19	; 0x06
    5896:	2d 83       	std	Y+5, r18	; 0x05
    5898:	8d 81       	ldd	r24, Y+5	; 0x05
    589a:	9e 81       	ldd	r25, Y+6	; 0x06
    589c:	81 30       	cpi	r24, 0x01	; 1
    589e:	91 05       	cpc	r25, r1
    58a0:	d1 f0       	breq	.+52     	; 0x58d6 <AVE_gpioUpperNibbleDirection+0x170>
    58a2:	2d 81       	ldd	r18, Y+5	; 0x05
    58a4:	3e 81       	ldd	r19, Y+6	; 0x06
    58a6:	22 30       	cpi	r18, 0x02	; 2
    58a8:	31 05       	cpc	r19, r1
    58aa:	69 f0       	breq	.+26     	; 0x58c6 <AVE_gpioUpperNibbleDirection+0x160>
    58ac:	8d 81       	ldd	r24, Y+5	; 0x05
    58ae:	9e 81       	ldd	r25, Y+6	; 0x06
    58b0:	00 97       	sbiw	r24, 0x00	; 0
    58b2:	09 f0       	breq	.+2      	; 0x58b6 <AVE_gpioUpperNibbleDirection+0x150>
    58b4:	50 c0       	rjmp	.+160    	; 0x5956 <AVE_gpioUpperNibbleDirection+0x1f0>
			{
			case INPUT:
				CLEAR_4_HIGH_NIPPLE(GPIOC_DDR);
    58b6:	a4 e3       	ldi	r26, 0x34	; 52
    58b8:	b0 e0       	ldi	r27, 0x00	; 0
    58ba:	e4 e3       	ldi	r30, 0x34	; 52
    58bc:	f0 e0       	ldi	r31, 0x00	; 0
    58be:	80 81       	ld	r24, Z
    58c0:	8f 70       	andi	r24, 0x0F	; 15
    58c2:	8c 93       	st	X, r24
    58c4:	48 c0       	rjmp	.+144    	; 0x5956 <AVE_gpioUpperNibbleDirection+0x1f0>
				break;
			case OUTPUT:
				SET_4_HIGH_NIPPLE(GPIOC_DDR);
    58c6:	a4 e3       	ldi	r26, 0x34	; 52
    58c8:	b0 e0       	ldi	r27, 0x00	; 0
    58ca:	e4 e3       	ldi	r30, 0x34	; 52
    58cc:	f0 e0       	ldi	r31, 0x00	; 0
    58ce:	80 81       	ld	r24, Z
    58d0:	80 6f       	ori	r24, 0xF0	; 240
    58d2:	8c 93       	st	X, r24
    58d4:	40 c0       	rjmp	.+128    	; 0x5956 <AVE_gpioUpperNibbleDirection+0x1f0>
				break;
			case INPUT_PULLUP:
				CLEAR_4_HIGH_NIPPLE(GPIOC_DDR);
    58d6:	a4 e3       	ldi	r26, 0x34	; 52
    58d8:	b0 e0       	ldi	r27, 0x00	; 0
    58da:	e4 e3       	ldi	r30, 0x34	; 52
    58dc:	f0 e0       	ldi	r31, 0x00	; 0
    58de:	80 81       	ld	r24, Z
    58e0:	8f 70       	andi	r24, 0x0F	; 15
    58e2:	8c 93       	st	X, r24
				SET_4_HIGH_NIPPLE(GPIOC_PORT);
    58e4:	a5 e3       	ldi	r26, 0x35	; 53
    58e6:	b0 e0       	ldi	r27, 0x00	; 0
    58e8:	e5 e3       	ldi	r30, 0x35	; 53
    58ea:	f0 e0       	ldi	r31, 0x00	; 0
    58ec:	80 81       	ld	r24, Z
    58ee:	80 6f       	ori	r24, 0xF0	; 240
    58f0:	8c 93       	st	X, r24
    58f2:	31 c0       	rjmp	.+98     	; 0x5956 <AVE_gpioUpperNibbleDirection+0x1f0>

			}
			break;

	case PORTD:
			switch(direction)
    58f4:	8a 81       	ldd	r24, Y+2	; 0x02
    58f6:	28 2f       	mov	r18, r24
    58f8:	30 e0       	ldi	r19, 0x00	; 0
    58fa:	3c 83       	std	Y+4, r19	; 0x04
    58fc:	2b 83       	std	Y+3, r18	; 0x03
    58fe:	8b 81       	ldd	r24, Y+3	; 0x03
    5900:	9c 81       	ldd	r25, Y+4	; 0x04
    5902:	81 30       	cpi	r24, 0x01	; 1
    5904:	91 05       	cpc	r25, r1
    5906:	c9 f0       	breq	.+50     	; 0x593a <AVE_gpioUpperNibbleDirection+0x1d4>
    5908:	2b 81       	ldd	r18, Y+3	; 0x03
    590a:	3c 81       	ldd	r19, Y+4	; 0x04
    590c:	22 30       	cpi	r18, 0x02	; 2
    590e:	31 05       	cpc	r19, r1
    5910:	61 f0       	breq	.+24     	; 0x592a <AVE_gpioUpperNibbleDirection+0x1c4>
    5912:	8b 81       	ldd	r24, Y+3	; 0x03
    5914:	9c 81       	ldd	r25, Y+4	; 0x04
    5916:	00 97       	sbiw	r24, 0x00	; 0
    5918:	f1 f4       	brne	.+60     	; 0x5956 <AVE_gpioUpperNibbleDirection+0x1f0>
			{
			case INPUT:
				CLEAR_4_HIGH_NIPPLE(GPIOD_DDR);
    591a:	a1 e3       	ldi	r26, 0x31	; 49
    591c:	b0 e0       	ldi	r27, 0x00	; 0
    591e:	e1 e3       	ldi	r30, 0x31	; 49
    5920:	f0 e0       	ldi	r31, 0x00	; 0
    5922:	80 81       	ld	r24, Z
    5924:	8f 70       	andi	r24, 0x0F	; 15
    5926:	8c 93       	st	X, r24
    5928:	16 c0       	rjmp	.+44     	; 0x5956 <AVE_gpioUpperNibbleDirection+0x1f0>
				break;
			case OUTPUT:
				SET_4_HIGH_NIPPLE(GPIOD_DDR);
    592a:	a1 e3       	ldi	r26, 0x31	; 49
    592c:	b0 e0       	ldi	r27, 0x00	; 0
    592e:	e1 e3       	ldi	r30, 0x31	; 49
    5930:	f0 e0       	ldi	r31, 0x00	; 0
    5932:	80 81       	ld	r24, Z
    5934:	80 6f       	ori	r24, 0xF0	; 240
    5936:	8c 93       	st	X, r24
    5938:	0e c0       	rjmp	.+28     	; 0x5956 <AVE_gpioUpperNibbleDirection+0x1f0>
				break;
			case INPUT_PULLUP:
				CLEAR_4_HIGH_NIPPLE(GPIOD_DDR);
    593a:	a1 e3       	ldi	r26, 0x31	; 49
    593c:	b0 e0       	ldi	r27, 0x00	; 0
    593e:	e1 e3       	ldi	r30, 0x31	; 49
    5940:	f0 e0       	ldi	r31, 0x00	; 0
    5942:	80 81       	ld	r24, Z
    5944:	8f 70       	andi	r24, 0x0F	; 15
    5946:	8c 93       	st	X, r24
				SET_4_HIGH_NIPPLE(GPIOD_PORT);
    5948:	a2 e3       	ldi	r26, 0x32	; 50
    594a:	b0 e0       	ldi	r27, 0x00	; 0
    594c:	e2 e3       	ldi	r30, 0x32	; 50
    594e:	f0 e0       	ldi	r31, 0x00	; 0
    5950:	80 81       	ld	r24, Z
    5952:	80 6f       	ori	r24, 0xF0	; 240
    5954:	8c 93       	st	X, r24
			break;



	}
}
    5956:	2c 96       	adiw	r28, 0x0c	; 12
    5958:	0f b6       	in	r0, 0x3f	; 63
    595a:	f8 94       	cli
    595c:	de bf       	out	0x3e, r29	; 62
    595e:	0f be       	out	0x3f, r0	; 63
    5960:	cd bf       	out	0x3d, r28	; 61
    5962:	cf 91       	pop	r28
    5964:	df 91       	pop	r29
    5966:	08 95       	ret

00005968 <AVE_gpioLowerNibbleDirection>:
 * the direction must be one of the following INPUT or OUTPUT or INPUT_PULLUP
 *
 */

void AVE_gpioLowerNibbleDirection(uint8 port, uint8 direction)
{
    5968:	df 93       	push	r29
    596a:	cf 93       	push	r28
    596c:	cd b7       	in	r28, 0x3d	; 61
    596e:	de b7       	in	r29, 0x3e	; 62
    5970:	2c 97       	sbiw	r28, 0x0c	; 12
    5972:	0f b6       	in	r0, 0x3f	; 63
    5974:	f8 94       	cli
    5976:	de bf       	out	0x3e, r29	; 62
    5978:	0f be       	out	0x3f, r0	; 63
    597a:	cd bf       	out	0x3d, r28	; 61
    597c:	89 83       	std	Y+1, r24	; 0x01
    597e:	6a 83       	std	Y+2, r22	; 0x02


	switch(port)
    5980:	89 81       	ldd	r24, Y+1	; 0x01
    5982:	28 2f       	mov	r18, r24
    5984:	30 e0       	ldi	r19, 0x00	; 0
    5986:	3c 87       	std	Y+12, r19	; 0x0c
    5988:	2b 87       	std	Y+11, r18	; 0x0b
    598a:	8b 85       	ldd	r24, Y+11	; 0x0b
    598c:	9c 85       	ldd	r25, Y+12	; 0x0c
    598e:	81 30       	cpi	r24, 0x01	; 1
    5990:	91 05       	cpc	r25, r1
    5992:	09 f4       	brne	.+2      	; 0x5996 <AVE_gpioLowerNibbleDirection+0x2e>
    5994:	4a c0       	rjmp	.+148    	; 0x5a2a <AVE_gpioLowerNibbleDirection+0xc2>
    5996:	2b 85       	ldd	r18, Y+11	; 0x0b
    5998:	3c 85       	ldd	r19, Y+12	; 0x0c
    599a:	22 30       	cpi	r18, 0x02	; 2
    599c:	31 05       	cpc	r19, r1
    599e:	2c f4       	brge	.+10     	; 0x59aa <AVE_gpioLowerNibbleDirection+0x42>
    59a0:	8b 85       	ldd	r24, Y+11	; 0x0b
    59a2:	9c 85       	ldd	r25, Y+12	; 0x0c
    59a4:	00 97       	sbiw	r24, 0x00	; 0
    59a6:	71 f0       	breq	.+28     	; 0x59c4 <AVE_gpioLowerNibbleDirection+0x5c>
    59a8:	d7 c0       	rjmp	.+430    	; 0x5b58 <AVE_gpioLowerNibbleDirection+0x1f0>
    59aa:	2b 85       	ldd	r18, Y+11	; 0x0b
    59ac:	3c 85       	ldd	r19, Y+12	; 0x0c
    59ae:	22 30       	cpi	r18, 0x02	; 2
    59b0:	31 05       	cpc	r19, r1
    59b2:	09 f4       	brne	.+2      	; 0x59b6 <AVE_gpioLowerNibbleDirection+0x4e>
    59b4:	6d c0       	rjmp	.+218    	; 0x5a90 <AVE_gpioLowerNibbleDirection+0x128>
    59b6:	8b 85       	ldd	r24, Y+11	; 0x0b
    59b8:	9c 85       	ldd	r25, Y+12	; 0x0c
    59ba:	83 30       	cpi	r24, 0x03	; 3
    59bc:	91 05       	cpc	r25, r1
    59be:	09 f4       	brne	.+2      	; 0x59c2 <AVE_gpioLowerNibbleDirection+0x5a>
    59c0:	9a c0       	rjmp	.+308    	; 0x5af6 <AVE_gpioLowerNibbleDirection+0x18e>
    59c2:	ca c0       	rjmp	.+404    	; 0x5b58 <AVE_gpioLowerNibbleDirection+0x1f0>
	{

	case PORTA:
		switch(direction)
    59c4:	8a 81       	ldd	r24, Y+2	; 0x02
    59c6:	28 2f       	mov	r18, r24
    59c8:	30 e0       	ldi	r19, 0x00	; 0
    59ca:	3a 87       	std	Y+10, r19	; 0x0a
    59cc:	29 87       	std	Y+9, r18	; 0x09
    59ce:	89 85       	ldd	r24, Y+9	; 0x09
    59d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    59d2:	81 30       	cpi	r24, 0x01	; 1
    59d4:	91 05       	cpc	r25, r1
    59d6:	d1 f0       	breq	.+52     	; 0x5a0c <AVE_gpioLowerNibbleDirection+0xa4>
    59d8:	29 85       	ldd	r18, Y+9	; 0x09
    59da:	3a 85       	ldd	r19, Y+10	; 0x0a
    59dc:	22 30       	cpi	r18, 0x02	; 2
    59de:	31 05       	cpc	r19, r1
    59e0:	69 f0       	breq	.+26     	; 0x59fc <AVE_gpioLowerNibbleDirection+0x94>
    59e2:	89 85       	ldd	r24, Y+9	; 0x09
    59e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    59e6:	00 97       	sbiw	r24, 0x00	; 0
    59e8:	09 f0       	breq	.+2      	; 0x59ec <AVE_gpioLowerNibbleDirection+0x84>
    59ea:	b6 c0       	rjmp	.+364    	; 0x5b58 <AVE_gpioLowerNibbleDirection+0x1f0>
		{
		case INPUT:
			CLEAR_4_LOW_NIPPLE(GPIOA_DDR);
    59ec:	aa e3       	ldi	r26, 0x3A	; 58
    59ee:	b0 e0       	ldi	r27, 0x00	; 0
    59f0:	ea e3       	ldi	r30, 0x3A	; 58
    59f2:	f0 e0       	ldi	r31, 0x00	; 0
    59f4:	80 81       	ld	r24, Z
    59f6:	80 7f       	andi	r24, 0xF0	; 240
    59f8:	8c 93       	st	X, r24
    59fa:	ae c0       	rjmp	.+348    	; 0x5b58 <AVE_gpioLowerNibbleDirection+0x1f0>
			break;
		case OUTPUT:
			SET_4_LOW_NIPPLE(GPIOA_DDR);
    59fc:	aa e3       	ldi	r26, 0x3A	; 58
    59fe:	b0 e0       	ldi	r27, 0x00	; 0
    5a00:	ea e3       	ldi	r30, 0x3A	; 58
    5a02:	f0 e0       	ldi	r31, 0x00	; 0
    5a04:	80 81       	ld	r24, Z
    5a06:	8f 60       	ori	r24, 0x0F	; 15
    5a08:	8c 93       	st	X, r24
    5a0a:	a6 c0       	rjmp	.+332    	; 0x5b58 <AVE_gpioLowerNibbleDirection+0x1f0>
			break;
		case INPUT_PULLUP:
			CLEAR_4_LOW_NIPPLE(GPIOA_DDR);
    5a0c:	aa e3       	ldi	r26, 0x3A	; 58
    5a0e:	b0 e0       	ldi	r27, 0x00	; 0
    5a10:	ea e3       	ldi	r30, 0x3A	; 58
    5a12:	f0 e0       	ldi	r31, 0x00	; 0
    5a14:	80 81       	ld	r24, Z
    5a16:	80 7f       	andi	r24, 0xF0	; 240
    5a18:	8c 93       	st	X, r24
			SET_4_LOW_NIPPLE(GPIOA_PORT);
    5a1a:	ab e3       	ldi	r26, 0x3B	; 59
    5a1c:	b0 e0       	ldi	r27, 0x00	; 0
    5a1e:	eb e3       	ldi	r30, 0x3B	; 59
    5a20:	f0 e0       	ldi	r31, 0x00	; 0
    5a22:	80 81       	ld	r24, Z
    5a24:	8f 60       	ori	r24, 0x0F	; 15
    5a26:	8c 93       	st	X, r24
    5a28:	97 c0       	rjmp	.+302    	; 0x5b58 <AVE_gpioLowerNibbleDirection+0x1f0>
			break;

		}
		break;
	case PORTB:
			switch(direction)
    5a2a:	8a 81       	ldd	r24, Y+2	; 0x02
    5a2c:	28 2f       	mov	r18, r24
    5a2e:	30 e0       	ldi	r19, 0x00	; 0
    5a30:	38 87       	std	Y+8, r19	; 0x08
    5a32:	2f 83       	std	Y+7, r18	; 0x07
    5a34:	8f 81       	ldd	r24, Y+7	; 0x07
    5a36:	98 85       	ldd	r25, Y+8	; 0x08
    5a38:	81 30       	cpi	r24, 0x01	; 1
    5a3a:	91 05       	cpc	r25, r1
    5a3c:	d1 f0       	breq	.+52     	; 0x5a72 <AVE_gpioLowerNibbleDirection+0x10a>
    5a3e:	2f 81       	ldd	r18, Y+7	; 0x07
    5a40:	38 85       	ldd	r19, Y+8	; 0x08
    5a42:	22 30       	cpi	r18, 0x02	; 2
    5a44:	31 05       	cpc	r19, r1
    5a46:	69 f0       	breq	.+26     	; 0x5a62 <AVE_gpioLowerNibbleDirection+0xfa>
    5a48:	8f 81       	ldd	r24, Y+7	; 0x07
    5a4a:	98 85       	ldd	r25, Y+8	; 0x08
    5a4c:	00 97       	sbiw	r24, 0x00	; 0
    5a4e:	09 f0       	breq	.+2      	; 0x5a52 <AVE_gpioLowerNibbleDirection+0xea>
    5a50:	83 c0       	rjmp	.+262    	; 0x5b58 <AVE_gpioLowerNibbleDirection+0x1f0>
			{
			case INPUT:
				CLEAR_4_LOW_NIPPLE(GPIOB_DDR);
    5a52:	a7 e3       	ldi	r26, 0x37	; 55
    5a54:	b0 e0       	ldi	r27, 0x00	; 0
    5a56:	e7 e3       	ldi	r30, 0x37	; 55
    5a58:	f0 e0       	ldi	r31, 0x00	; 0
    5a5a:	80 81       	ld	r24, Z
    5a5c:	80 7f       	andi	r24, 0xF0	; 240
    5a5e:	8c 93       	st	X, r24
    5a60:	7b c0       	rjmp	.+246    	; 0x5b58 <AVE_gpioLowerNibbleDirection+0x1f0>
				break;
			case OUTPUT:
				SET_4_LOW_NIPPLE(GPIOB_DDR);
    5a62:	a7 e3       	ldi	r26, 0x37	; 55
    5a64:	b0 e0       	ldi	r27, 0x00	; 0
    5a66:	e7 e3       	ldi	r30, 0x37	; 55
    5a68:	f0 e0       	ldi	r31, 0x00	; 0
    5a6a:	80 81       	ld	r24, Z
    5a6c:	8f 60       	ori	r24, 0x0F	; 15
    5a6e:	8c 93       	st	X, r24
    5a70:	73 c0       	rjmp	.+230    	; 0x5b58 <AVE_gpioLowerNibbleDirection+0x1f0>
				break;
			case INPUT_PULLUP:
				CLEAR_4_LOW_NIPPLE(GPIOB_DDR);
    5a72:	a7 e3       	ldi	r26, 0x37	; 55
    5a74:	b0 e0       	ldi	r27, 0x00	; 0
    5a76:	e7 e3       	ldi	r30, 0x37	; 55
    5a78:	f0 e0       	ldi	r31, 0x00	; 0
    5a7a:	80 81       	ld	r24, Z
    5a7c:	80 7f       	andi	r24, 0xF0	; 240
    5a7e:	8c 93       	st	X, r24
				SET_4_LOW_NIPPLE(GPIOB_PORT);
    5a80:	a8 e3       	ldi	r26, 0x38	; 56
    5a82:	b0 e0       	ldi	r27, 0x00	; 0
    5a84:	e8 e3       	ldi	r30, 0x38	; 56
    5a86:	f0 e0       	ldi	r31, 0x00	; 0
    5a88:	80 81       	ld	r24, Z
    5a8a:	8f 60       	ori	r24, 0x0F	; 15
    5a8c:	8c 93       	st	X, r24
    5a8e:	64 c0       	rjmp	.+200    	; 0x5b58 <AVE_gpioLowerNibbleDirection+0x1f0>

			}
			break;

	case PORTC:
			switch(direction)
    5a90:	8a 81       	ldd	r24, Y+2	; 0x02
    5a92:	28 2f       	mov	r18, r24
    5a94:	30 e0       	ldi	r19, 0x00	; 0
    5a96:	3e 83       	std	Y+6, r19	; 0x06
    5a98:	2d 83       	std	Y+5, r18	; 0x05
    5a9a:	8d 81       	ldd	r24, Y+5	; 0x05
    5a9c:	9e 81       	ldd	r25, Y+6	; 0x06
    5a9e:	81 30       	cpi	r24, 0x01	; 1
    5aa0:	91 05       	cpc	r25, r1
    5aa2:	d1 f0       	breq	.+52     	; 0x5ad8 <AVE_gpioLowerNibbleDirection+0x170>
    5aa4:	2d 81       	ldd	r18, Y+5	; 0x05
    5aa6:	3e 81       	ldd	r19, Y+6	; 0x06
    5aa8:	22 30       	cpi	r18, 0x02	; 2
    5aaa:	31 05       	cpc	r19, r1
    5aac:	69 f0       	breq	.+26     	; 0x5ac8 <AVE_gpioLowerNibbleDirection+0x160>
    5aae:	8d 81       	ldd	r24, Y+5	; 0x05
    5ab0:	9e 81       	ldd	r25, Y+6	; 0x06
    5ab2:	00 97       	sbiw	r24, 0x00	; 0
    5ab4:	09 f0       	breq	.+2      	; 0x5ab8 <AVE_gpioLowerNibbleDirection+0x150>
    5ab6:	50 c0       	rjmp	.+160    	; 0x5b58 <AVE_gpioLowerNibbleDirection+0x1f0>
			{
			case INPUT:
				CLEAR_4_LOW_NIPPLE(GPIOC_DDR);
    5ab8:	a4 e3       	ldi	r26, 0x34	; 52
    5aba:	b0 e0       	ldi	r27, 0x00	; 0
    5abc:	e4 e3       	ldi	r30, 0x34	; 52
    5abe:	f0 e0       	ldi	r31, 0x00	; 0
    5ac0:	80 81       	ld	r24, Z
    5ac2:	80 7f       	andi	r24, 0xF0	; 240
    5ac4:	8c 93       	st	X, r24
    5ac6:	48 c0       	rjmp	.+144    	; 0x5b58 <AVE_gpioLowerNibbleDirection+0x1f0>
				break;
			case OUTPUT:
				SET_4_LOW_NIPPLE(GPIOC_DDR);
    5ac8:	a4 e3       	ldi	r26, 0x34	; 52
    5aca:	b0 e0       	ldi	r27, 0x00	; 0
    5acc:	e4 e3       	ldi	r30, 0x34	; 52
    5ace:	f0 e0       	ldi	r31, 0x00	; 0
    5ad0:	80 81       	ld	r24, Z
    5ad2:	8f 60       	ori	r24, 0x0F	; 15
    5ad4:	8c 93       	st	X, r24
    5ad6:	40 c0       	rjmp	.+128    	; 0x5b58 <AVE_gpioLowerNibbleDirection+0x1f0>
				break;
			case INPUT_PULLUP:
				CLEAR_4_LOW_NIPPLE(GPIOC_DDR);
    5ad8:	a4 e3       	ldi	r26, 0x34	; 52
    5ada:	b0 e0       	ldi	r27, 0x00	; 0
    5adc:	e4 e3       	ldi	r30, 0x34	; 52
    5ade:	f0 e0       	ldi	r31, 0x00	; 0
    5ae0:	80 81       	ld	r24, Z
    5ae2:	80 7f       	andi	r24, 0xF0	; 240
    5ae4:	8c 93       	st	X, r24
				SET_4_LOW_NIPPLE(GPIOC_PORT);
    5ae6:	a5 e3       	ldi	r26, 0x35	; 53
    5ae8:	b0 e0       	ldi	r27, 0x00	; 0
    5aea:	e5 e3       	ldi	r30, 0x35	; 53
    5aec:	f0 e0       	ldi	r31, 0x00	; 0
    5aee:	80 81       	ld	r24, Z
    5af0:	8f 60       	ori	r24, 0x0F	; 15
    5af2:	8c 93       	st	X, r24
    5af4:	31 c0       	rjmp	.+98     	; 0x5b58 <AVE_gpioLowerNibbleDirection+0x1f0>

			}
			break;

	case PORTD:
			switch(direction)
    5af6:	8a 81       	ldd	r24, Y+2	; 0x02
    5af8:	28 2f       	mov	r18, r24
    5afa:	30 e0       	ldi	r19, 0x00	; 0
    5afc:	3c 83       	std	Y+4, r19	; 0x04
    5afe:	2b 83       	std	Y+3, r18	; 0x03
    5b00:	8b 81       	ldd	r24, Y+3	; 0x03
    5b02:	9c 81       	ldd	r25, Y+4	; 0x04
    5b04:	81 30       	cpi	r24, 0x01	; 1
    5b06:	91 05       	cpc	r25, r1
    5b08:	c9 f0       	breq	.+50     	; 0x5b3c <AVE_gpioLowerNibbleDirection+0x1d4>
    5b0a:	2b 81       	ldd	r18, Y+3	; 0x03
    5b0c:	3c 81       	ldd	r19, Y+4	; 0x04
    5b0e:	22 30       	cpi	r18, 0x02	; 2
    5b10:	31 05       	cpc	r19, r1
    5b12:	61 f0       	breq	.+24     	; 0x5b2c <AVE_gpioLowerNibbleDirection+0x1c4>
    5b14:	8b 81       	ldd	r24, Y+3	; 0x03
    5b16:	9c 81       	ldd	r25, Y+4	; 0x04
    5b18:	00 97       	sbiw	r24, 0x00	; 0
    5b1a:	f1 f4       	brne	.+60     	; 0x5b58 <AVE_gpioLowerNibbleDirection+0x1f0>
			{
			case INPUT:
				CLEAR_4_LOW_NIPPLE(GPIOD_DDR);
    5b1c:	a1 e3       	ldi	r26, 0x31	; 49
    5b1e:	b0 e0       	ldi	r27, 0x00	; 0
    5b20:	e1 e3       	ldi	r30, 0x31	; 49
    5b22:	f0 e0       	ldi	r31, 0x00	; 0
    5b24:	80 81       	ld	r24, Z
    5b26:	80 7f       	andi	r24, 0xF0	; 240
    5b28:	8c 93       	st	X, r24
    5b2a:	16 c0       	rjmp	.+44     	; 0x5b58 <AVE_gpioLowerNibbleDirection+0x1f0>
				break;
			case OUTPUT:
				SET_4_LOW_NIPPLE(GPIOD_DDR);
    5b2c:	a1 e3       	ldi	r26, 0x31	; 49
    5b2e:	b0 e0       	ldi	r27, 0x00	; 0
    5b30:	e1 e3       	ldi	r30, 0x31	; 49
    5b32:	f0 e0       	ldi	r31, 0x00	; 0
    5b34:	80 81       	ld	r24, Z
    5b36:	8f 60       	ori	r24, 0x0F	; 15
    5b38:	8c 93       	st	X, r24
    5b3a:	0e c0       	rjmp	.+28     	; 0x5b58 <AVE_gpioLowerNibbleDirection+0x1f0>
				break;
			case INPUT_PULLUP:
				CLEAR_4_LOW_NIPPLE(GPIOD_DDR);
    5b3c:	a1 e3       	ldi	r26, 0x31	; 49
    5b3e:	b0 e0       	ldi	r27, 0x00	; 0
    5b40:	e1 e3       	ldi	r30, 0x31	; 49
    5b42:	f0 e0       	ldi	r31, 0x00	; 0
    5b44:	80 81       	ld	r24, Z
    5b46:	80 7f       	andi	r24, 0xF0	; 240
    5b48:	8c 93       	st	X, r24
				SET_4_LOW_NIPPLE(GPIOD_PORT);
    5b4a:	a2 e3       	ldi	r26, 0x32	; 50
    5b4c:	b0 e0       	ldi	r27, 0x00	; 0
    5b4e:	e2 e3       	ldi	r30, 0x32	; 50
    5b50:	f0 e0       	ldi	r31, 0x00	; 0
    5b52:	80 81       	ld	r24, Z
    5b54:	8f 60       	ori	r24, 0x0F	; 15
    5b56:	8c 93       	st	X, r24


	}


}
    5b58:	2c 96       	adiw	r28, 0x0c	; 12
    5b5a:	0f b6       	in	r0, 0x3f	; 63
    5b5c:	f8 94       	cli
    5b5e:	de bf       	out	0x3e, r29	; 62
    5b60:	0f be       	out	0x3f, r0	; 63
    5b62:	cd bf       	out	0x3d, r28	; 61
    5b64:	cf 91       	pop	r28
    5b66:	df 91       	pop	r29
    5b68:	08 95       	ret

00005b6a <AVE_gpioUpperNibbleWrite>:
 * this function is used to write the value of an upper nibble of a register
 * value must be one of two HIGH or LOW .
 */

void AVE_gpioUpperNibbleWrite(uint8 port, uint8 value)
{
    5b6a:	df 93       	push	r29
    5b6c:	cf 93       	push	r28
    5b6e:	cd b7       	in	r28, 0x3d	; 61
    5b70:	de b7       	in	r29, 0x3e	; 62
    5b72:	2c 97       	sbiw	r28, 0x0c	; 12
    5b74:	0f b6       	in	r0, 0x3f	; 63
    5b76:	f8 94       	cli
    5b78:	de bf       	out	0x3e, r29	; 62
    5b7a:	0f be       	out	0x3f, r0	; 63
    5b7c:	cd bf       	out	0x3d, r28	; 61
    5b7e:	89 83       	std	Y+1, r24	; 0x01
    5b80:	6a 83       	std	Y+2, r22	; 0x02

	switch(port)
    5b82:	89 81       	ldd	r24, Y+1	; 0x01
    5b84:	28 2f       	mov	r18, r24
    5b86:	30 e0       	ldi	r19, 0x00	; 0
    5b88:	3c 87       	std	Y+12, r19	; 0x0c
    5b8a:	2b 87       	std	Y+11, r18	; 0x0b
    5b8c:	8b 85       	ldd	r24, Y+11	; 0x0b
    5b8e:	9c 85       	ldd	r25, Y+12	; 0x0c
    5b90:	81 30       	cpi	r24, 0x01	; 1
    5b92:	91 05       	cpc	r25, r1
    5b94:	b1 f1       	breq	.+108    	; 0x5c02 <AVE_gpioUpperNibbleWrite+0x98>
    5b96:	2b 85       	ldd	r18, Y+11	; 0x0b
    5b98:	3c 85       	ldd	r19, Y+12	; 0x0c
    5b9a:	22 30       	cpi	r18, 0x02	; 2
    5b9c:	31 05       	cpc	r19, r1
    5b9e:	2c f4       	brge	.+10     	; 0x5baa <AVE_gpioUpperNibbleWrite+0x40>
    5ba0:	8b 85       	ldd	r24, Y+11	; 0x0b
    5ba2:	9c 85       	ldd	r25, Y+12	; 0x0c
    5ba4:	00 97       	sbiw	r24, 0x00	; 0
    5ba6:	71 f0       	breq	.+28     	; 0x5bc4 <AVE_gpioUpperNibbleWrite+0x5a>
    5ba8:	86 c0       	rjmp	.+268    	; 0x5cb6 <AVE_gpioUpperNibbleWrite+0x14c>
    5baa:	2b 85       	ldd	r18, Y+11	; 0x0b
    5bac:	3c 85       	ldd	r19, Y+12	; 0x0c
    5bae:	22 30       	cpi	r18, 0x02	; 2
    5bb0:	31 05       	cpc	r19, r1
    5bb2:	09 f4       	brne	.+2      	; 0x5bb6 <AVE_gpioUpperNibbleWrite+0x4c>
    5bb4:	45 c0       	rjmp	.+138    	; 0x5c40 <AVE_gpioUpperNibbleWrite+0xd6>
    5bb6:	8b 85       	ldd	r24, Y+11	; 0x0b
    5bb8:	9c 85       	ldd	r25, Y+12	; 0x0c
    5bba:	83 30       	cpi	r24, 0x03	; 3
    5bbc:	91 05       	cpc	r25, r1
    5bbe:	09 f4       	brne	.+2      	; 0x5bc2 <AVE_gpioUpperNibbleWrite+0x58>
    5bc0:	5d c0       	rjmp	.+186    	; 0x5c7c <AVE_gpioUpperNibbleWrite+0x112>
    5bc2:	79 c0       	rjmp	.+242    	; 0x5cb6 <AVE_gpioUpperNibbleWrite+0x14c>
	{

	case PORTA:
		switch(value)
    5bc4:	8a 81       	ldd	r24, Y+2	; 0x02
    5bc6:	28 2f       	mov	r18, r24
    5bc8:	30 e0       	ldi	r19, 0x00	; 0
    5bca:	3a 87       	std	Y+10, r19	; 0x0a
    5bcc:	29 87       	std	Y+9, r18	; 0x09
    5bce:	89 85       	ldd	r24, Y+9	; 0x09
    5bd0:	9a 85       	ldd	r25, Y+10	; 0x0a
    5bd2:	00 97       	sbiw	r24, 0x00	; 0
    5bd4:	71 f0       	breq	.+28     	; 0x5bf2 <AVE_gpioUpperNibbleWrite+0x88>
    5bd6:	29 85       	ldd	r18, Y+9	; 0x09
    5bd8:	3a 85       	ldd	r19, Y+10	; 0x0a
    5bda:	21 30       	cpi	r18, 0x01	; 1
    5bdc:	31 05       	cpc	r19, r1
    5bde:	09 f0       	breq	.+2      	; 0x5be2 <AVE_gpioUpperNibbleWrite+0x78>
    5be0:	6a c0       	rjmp	.+212    	; 0x5cb6 <AVE_gpioUpperNibbleWrite+0x14c>
		{
		case HIGH:
			SET_4_HIGH_NIPPLE(GPIOA_PORT);
    5be2:	ab e3       	ldi	r26, 0x3B	; 59
    5be4:	b0 e0       	ldi	r27, 0x00	; 0
    5be6:	eb e3       	ldi	r30, 0x3B	; 59
    5be8:	f0 e0       	ldi	r31, 0x00	; 0
    5bea:	80 81       	ld	r24, Z
    5bec:	80 6f       	ori	r24, 0xF0	; 240
    5bee:	8c 93       	st	X, r24
    5bf0:	62 c0       	rjmp	.+196    	; 0x5cb6 <AVE_gpioUpperNibbleWrite+0x14c>
			break;
		case LOW:
			CLEAR_4_HIGH_NIPPLE(GPIOA_PORT);
    5bf2:	ab e3       	ldi	r26, 0x3B	; 59
    5bf4:	b0 e0       	ldi	r27, 0x00	; 0
    5bf6:	eb e3       	ldi	r30, 0x3B	; 59
    5bf8:	f0 e0       	ldi	r31, 0x00	; 0
    5bfa:	80 81       	ld	r24, Z
    5bfc:	8f 70       	andi	r24, 0x0F	; 15
    5bfe:	8c 93       	st	X, r24
    5c00:	5a c0       	rjmp	.+180    	; 0x5cb6 <AVE_gpioUpperNibbleWrite+0x14c>
			break;

		}
		break;
		case PORTB:
			switch(value)
    5c02:	8a 81       	ldd	r24, Y+2	; 0x02
    5c04:	28 2f       	mov	r18, r24
    5c06:	30 e0       	ldi	r19, 0x00	; 0
    5c08:	38 87       	std	Y+8, r19	; 0x08
    5c0a:	2f 83       	std	Y+7, r18	; 0x07
    5c0c:	8f 81       	ldd	r24, Y+7	; 0x07
    5c0e:	98 85       	ldd	r25, Y+8	; 0x08
    5c10:	00 97       	sbiw	r24, 0x00	; 0
    5c12:	71 f0       	breq	.+28     	; 0x5c30 <AVE_gpioUpperNibbleWrite+0xc6>
    5c14:	2f 81       	ldd	r18, Y+7	; 0x07
    5c16:	38 85       	ldd	r19, Y+8	; 0x08
    5c18:	21 30       	cpi	r18, 0x01	; 1
    5c1a:	31 05       	cpc	r19, r1
    5c1c:	09 f0       	breq	.+2      	; 0x5c20 <AVE_gpioUpperNibbleWrite+0xb6>
    5c1e:	4b c0       	rjmp	.+150    	; 0x5cb6 <AVE_gpioUpperNibbleWrite+0x14c>
			{
			case HIGH:
				SET_4_HIGH_NIPPLE(GPIOB_PORT);
    5c20:	a8 e3       	ldi	r26, 0x38	; 56
    5c22:	b0 e0       	ldi	r27, 0x00	; 0
    5c24:	e8 e3       	ldi	r30, 0x38	; 56
    5c26:	f0 e0       	ldi	r31, 0x00	; 0
    5c28:	80 81       	ld	r24, Z
    5c2a:	80 6f       	ori	r24, 0xF0	; 240
    5c2c:	8c 93       	st	X, r24
    5c2e:	43 c0       	rjmp	.+134    	; 0x5cb6 <AVE_gpioUpperNibbleWrite+0x14c>
				break;
			case LOW:
				CLEAR_4_HIGH_NIPPLE(GPIOB_PORT);
    5c30:	a8 e3       	ldi	r26, 0x38	; 56
    5c32:	b0 e0       	ldi	r27, 0x00	; 0
    5c34:	e8 e3       	ldi	r30, 0x38	; 56
    5c36:	f0 e0       	ldi	r31, 0x00	; 0
    5c38:	80 81       	ld	r24, Z
    5c3a:	8f 70       	andi	r24, 0x0F	; 15
    5c3c:	8c 93       	st	X, r24
    5c3e:	3b c0       	rjmp	.+118    	; 0x5cb6 <AVE_gpioUpperNibbleWrite+0x14c>
				break;

			}
			break;
		case PORTC:
			switch(value)
    5c40:	8a 81       	ldd	r24, Y+2	; 0x02
    5c42:	28 2f       	mov	r18, r24
    5c44:	30 e0       	ldi	r19, 0x00	; 0
    5c46:	3e 83       	std	Y+6, r19	; 0x06
    5c48:	2d 83       	std	Y+5, r18	; 0x05
    5c4a:	8d 81       	ldd	r24, Y+5	; 0x05
    5c4c:	9e 81       	ldd	r25, Y+6	; 0x06
    5c4e:	00 97       	sbiw	r24, 0x00	; 0
    5c50:	69 f0       	breq	.+26     	; 0x5c6c <AVE_gpioUpperNibbleWrite+0x102>
    5c52:	2d 81       	ldd	r18, Y+5	; 0x05
    5c54:	3e 81       	ldd	r19, Y+6	; 0x06
    5c56:	21 30       	cpi	r18, 0x01	; 1
    5c58:	31 05       	cpc	r19, r1
    5c5a:	69 f5       	brne	.+90     	; 0x5cb6 <AVE_gpioUpperNibbleWrite+0x14c>
			{
			case HIGH:
				SET_4_HIGH_NIPPLE(GPIOC_PORT);
    5c5c:	a5 e3       	ldi	r26, 0x35	; 53
    5c5e:	b0 e0       	ldi	r27, 0x00	; 0
    5c60:	e5 e3       	ldi	r30, 0x35	; 53
    5c62:	f0 e0       	ldi	r31, 0x00	; 0
    5c64:	80 81       	ld	r24, Z
    5c66:	80 6f       	ori	r24, 0xF0	; 240
    5c68:	8c 93       	st	X, r24
    5c6a:	25 c0       	rjmp	.+74     	; 0x5cb6 <AVE_gpioUpperNibbleWrite+0x14c>
				break;
			case LOW:
				CLEAR_4_HIGH_NIPPLE(GPIOC_PORT);
    5c6c:	a5 e3       	ldi	r26, 0x35	; 53
    5c6e:	b0 e0       	ldi	r27, 0x00	; 0
    5c70:	e5 e3       	ldi	r30, 0x35	; 53
    5c72:	f0 e0       	ldi	r31, 0x00	; 0
    5c74:	80 81       	ld	r24, Z
    5c76:	8f 70       	andi	r24, 0x0F	; 15
    5c78:	8c 93       	st	X, r24
    5c7a:	1d c0       	rjmp	.+58     	; 0x5cb6 <AVE_gpioUpperNibbleWrite+0x14c>
				break;
			}
			break;
		case PORTD:
			switch(value)
    5c7c:	8a 81       	ldd	r24, Y+2	; 0x02
    5c7e:	28 2f       	mov	r18, r24
    5c80:	30 e0       	ldi	r19, 0x00	; 0
    5c82:	3c 83       	std	Y+4, r19	; 0x04
    5c84:	2b 83       	std	Y+3, r18	; 0x03
    5c86:	8b 81       	ldd	r24, Y+3	; 0x03
    5c88:	9c 81       	ldd	r25, Y+4	; 0x04
    5c8a:	00 97       	sbiw	r24, 0x00	; 0
    5c8c:	69 f0       	breq	.+26     	; 0x5ca8 <AVE_gpioUpperNibbleWrite+0x13e>
    5c8e:	2b 81       	ldd	r18, Y+3	; 0x03
    5c90:	3c 81       	ldd	r19, Y+4	; 0x04
    5c92:	21 30       	cpi	r18, 0x01	; 1
    5c94:	31 05       	cpc	r19, r1
    5c96:	79 f4       	brne	.+30     	; 0x5cb6 <AVE_gpioUpperNibbleWrite+0x14c>
			{
			case HIGH:
				SET_4_HIGH_NIPPLE(GPIOD_PORT);
    5c98:	a2 e3       	ldi	r26, 0x32	; 50
    5c9a:	b0 e0       	ldi	r27, 0x00	; 0
    5c9c:	e2 e3       	ldi	r30, 0x32	; 50
    5c9e:	f0 e0       	ldi	r31, 0x00	; 0
    5ca0:	80 81       	ld	r24, Z
    5ca2:	80 6f       	ori	r24, 0xF0	; 240
    5ca4:	8c 93       	st	X, r24
    5ca6:	07 c0       	rjmp	.+14     	; 0x5cb6 <AVE_gpioUpperNibbleWrite+0x14c>
				break;
			case LOW:
				CLEAR_4_HIGH_NIPPLE(GPIOD_PORT);
    5ca8:	a2 e3       	ldi	r26, 0x32	; 50
    5caa:	b0 e0       	ldi	r27, 0x00	; 0
    5cac:	e2 e3       	ldi	r30, 0x32	; 50
    5cae:	f0 e0       	ldi	r31, 0x00	; 0
    5cb0:	80 81       	ld	r24, Z
    5cb2:	8f 70       	andi	r24, 0x0F	; 15
    5cb4:	8c 93       	st	X, r24
				break;
			}
			break;

	}
}
    5cb6:	2c 96       	adiw	r28, 0x0c	; 12
    5cb8:	0f b6       	in	r0, 0x3f	; 63
    5cba:	f8 94       	cli
    5cbc:	de bf       	out	0x3e, r29	; 62
    5cbe:	0f be       	out	0x3f, r0	; 63
    5cc0:	cd bf       	out	0x3d, r28	; 61
    5cc2:	cf 91       	pop	r28
    5cc4:	df 91       	pop	r29
    5cc6:	08 95       	ret

00005cc8 <AVE_gpioLowerNibbleWrite>:
 * this function is used to write the value of the lower nibble of a register
 * the value can be one of two High or low .
 */

void AVE_gpioLowerNibbleWrite(uint8 port, uint8 value)
{
    5cc8:	df 93       	push	r29
    5cca:	cf 93       	push	r28
    5ccc:	cd b7       	in	r28, 0x3d	; 61
    5cce:	de b7       	in	r29, 0x3e	; 62
    5cd0:	2a 97       	sbiw	r28, 0x0a	; 10
    5cd2:	0f b6       	in	r0, 0x3f	; 63
    5cd4:	f8 94       	cli
    5cd6:	de bf       	out	0x3e, r29	; 62
    5cd8:	0f be       	out	0x3f, r0	; 63
    5cda:	cd bf       	out	0x3d, r28	; 61
    5cdc:	89 83       	std	Y+1, r24	; 0x01
    5cde:	6a 83       	std	Y+2, r22	; 0x02

	switch(port)
    5ce0:	89 81       	ldd	r24, Y+1	; 0x01
    5ce2:	28 2f       	mov	r18, r24
    5ce4:	30 e0       	ldi	r19, 0x00	; 0
    5ce6:	3a 87       	std	Y+10, r19	; 0x0a
    5ce8:	29 87       	std	Y+9, r18	; 0x09
    5cea:	89 85       	ldd	r24, Y+9	; 0x09
    5cec:	9a 85       	ldd	r25, Y+10	; 0x0a
    5cee:	81 30       	cpi	r24, 0x01	; 1
    5cf0:	91 05       	cpc	r25, r1
    5cf2:	a9 f1       	breq	.+106    	; 0x5d5e <AVE_gpioLowerNibbleWrite+0x96>
    5cf4:	29 85       	ldd	r18, Y+9	; 0x09
    5cf6:	3a 85       	ldd	r19, Y+10	; 0x0a
    5cf8:	22 30       	cpi	r18, 0x02	; 2
    5cfa:	31 05       	cpc	r19, r1
    5cfc:	2c f4       	brge	.+10     	; 0x5d08 <AVE_gpioLowerNibbleWrite+0x40>
    5cfe:	89 85       	ldd	r24, Y+9	; 0x09
    5d00:	9a 85       	ldd	r25, Y+10	; 0x0a
    5d02:	00 97       	sbiw	r24, 0x00	; 0
    5d04:	69 f0       	breq	.+26     	; 0x5d20 <AVE_gpioLowerNibbleWrite+0x58>
    5d06:	76 c0       	rjmp	.+236    	; 0x5df4 <AVE_gpioLowerNibbleWrite+0x12c>
    5d08:	29 85       	ldd	r18, Y+9	; 0x09
    5d0a:	3a 85       	ldd	r19, Y+10	; 0x0a
    5d0c:	22 30       	cpi	r18, 0x02	; 2
    5d0e:	31 05       	cpc	r19, r1
    5d10:	b1 f1       	breq	.+108    	; 0x5d7e <AVE_gpioLowerNibbleWrite+0xb6>
    5d12:	89 85       	ldd	r24, Y+9	; 0x09
    5d14:	9a 85       	ldd	r25, Y+10	; 0x0a
    5d16:	83 30       	cpi	r24, 0x03	; 3
    5d18:	91 05       	cpc	r25, r1
    5d1a:	09 f4       	brne	.+2      	; 0x5d1e <AVE_gpioLowerNibbleWrite+0x56>
    5d1c:	4e c0       	rjmp	.+156    	; 0x5dba <AVE_gpioLowerNibbleWrite+0xf2>
    5d1e:	6a c0       	rjmp	.+212    	; 0x5df4 <AVE_gpioLowerNibbleWrite+0x12c>
	{

	case PORTA:
		switch(value)
    5d20:	8a 81       	ldd	r24, Y+2	; 0x02
    5d22:	28 2f       	mov	r18, r24
    5d24:	30 e0       	ldi	r19, 0x00	; 0
    5d26:	38 87       	std	Y+8, r19	; 0x08
    5d28:	2f 83       	std	Y+7, r18	; 0x07
    5d2a:	8f 81       	ldd	r24, Y+7	; 0x07
    5d2c:	98 85       	ldd	r25, Y+8	; 0x08
    5d2e:	00 97       	sbiw	r24, 0x00	; 0
    5d30:	71 f0       	breq	.+28     	; 0x5d4e <AVE_gpioLowerNibbleWrite+0x86>
    5d32:	2f 81       	ldd	r18, Y+7	; 0x07
    5d34:	38 85       	ldd	r19, Y+8	; 0x08
    5d36:	21 30       	cpi	r18, 0x01	; 1
    5d38:	31 05       	cpc	r19, r1
    5d3a:	09 f0       	breq	.+2      	; 0x5d3e <AVE_gpioLowerNibbleWrite+0x76>
    5d3c:	5b c0       	rjmp	.+182    	; 0x5df4 <AVE_gpioLowerNibbleWrite+0x12c>
		{
		case HIGH:
			SET_4_LOW_NIPPLE(GPIOA_PORT);
    5d3e:	ab e3       	ldi	r26, 0x3B	; 59
    5d40:	b0 e0       	ldi	r27, 0x00	; 0
    5d42:	eb e3       	ldi	r30, 0x3B	; 59
    5d44:	f0 e0       	ldi	r31, 0x00	; 0
    5d46:	80 81       	ld	r24, Z
    5d48:	8f 60       	ori	r24, 0x0F	; 15
    5d4a:	8c 93       	st	X, r24
    5d4c:	53 c0       	rjmp	.+166    	; 0x5df4 <AVE_gpioLowerNibbleWrite+0x12c>
			break;
		case LOW:
			CLEAR_4_LOW_NIPPLE(GPIOA_PORT);
    5d4e:	ab e3       	ldi	r26, 0x3B	; 59
    5d50:	b0 e0       	ldi	r27, 0x00	; 0
    5d52:	eb e3       	ldi	r30, 0x3B	; 59
    5d54:	f0 e0       	ldi	r31, 0x00	; 0
    5d56:	80 81       	ld	r24, Z
    5d58:	80 7f       	andi	r24, 0xF0	; 240
    5d5a:	8c 93       	st	X, r24
    5d5c:	4b c0       	rjmp	.+150    	; 0x5df4 <AVE_gpioLowerNibbleWrite+0x12c>
//			case LOW:
//				CLEAR_4_LOW_NIPPLE(GPIOB_PORT);
//				break;
//
//			}
			GPIOB_PORT&=(0xF0);
    5d5e:	a8 e3       	ldi	r26, 0x38	; 56
    5d60:	b0 e0       	ldi	r27, 0x00	; 0
    5d62:	e8 e3       	ldi	r30, 0x38	; 56
    5d64:	f0 e0       	ldi	r31, 0x00	; 0
    5d66:	80 81       	ld	r24, Z
    5d68:	80 7f       	andi	r24, 0xF0	; 240
    5d6a:	8c 93       	st	X, r24
			GPIOB_PORT|=value;
    5d6c:	a8 e3       	ldi	r26, 0x38	; 56
    5d6e:	b0 e0       	ldi	r27, 0x00	; 0
    5d70:	e8 e3       	ldi	r30, 0x38	; 56
    5d72:	f0 e0       	ldi	r31, 0x00	; 0
    5d74:	90 81       	ld	r25, Z
    5d76:	8a 81       	ldd	r24, Y+2	; 0x02
    5d78:	89 2b       	or	r24, r25
    5d7a:	8c 93       	st	X, r24
    5d7c:	3b c0       	rjmp	.+118    	; 0x5df4 <AVE_gpioLowerNibbleWrite+0x12c>
			break;
		case PORTC:
			switch(value)
    5d7e:	8a 81       	ldd	r24, Y+2	; 0x02
    5d80:	28 2f       	mov	r18, r24
    5d82:	30 e0       	ldi	r19, 0x00	; 0
    5d84:	3e 83       	std	Y+6, r19	; 0x06
    5d86:	2d 83       	std	Y+5, r18	; 0x05
    5d88:	8d 81       	ldd	r24, Y+5	; 0x05
    5d8a:	9e 81       	ldd	r25, Y+6	; 0x06
    5d8c:	00 97       	sbiw	r24, 0x00	; 0
    5d8e:	69 f0       	breq	.+26     	; 0x5daa <AVE_gpioLowerNibbleWrite+0xe2>
    5d90:	2d 81       	ldd	r18, Y+5	; 0x05
    5d92:	3e 81       	ldd	r19, Y+6	; 0x06
    5d94:	21 30       	cpi	r18, 0x01	; 1
    5d96:	31 05       	cpc	r19, r1
    5d98:	69 f5       	brne	.+90     	; 0x5df4 <AVE_gpioLowerNibbleWrite+0x12c>
			{
			case HIGH:
				SET_4_LOW_NIPPLE(GPIOC_PORT);
    5d9a:	a5 e3       	ldi	r26, 0x35	; 53
    5d9c:	b0 e0       	ldi	r27, 0x00	; 0
    5d9e:	e5 e3       	ldi	r30, 0x35	; 53
    5da0:	f0 e0       	ldi	r31, 0x00	; 0
    5da2:	80 81       	ld	r24, Z
    5da4:	8f 60       	ori	r24, 0x0F	; 15
    5da6:	8c 93       	st	X, r24
    5da8:	25 c0       	rjmp	.+74     	; 0x5df4 <AVE_gpioLowerNibbleWrite+0x12c>
				break;
			case LOW:
				CLEAR_4_LOW_NIPPLE(GPIOC_PORT);
    5daa:	a5 e3       	ldi	r26, 0x35	; 53
    5dac:	b0 e0       	ldi	r27, 0x00	; 0
    5dae:	e5 e3       	ldi	r30, 0x35	; 53
    5db0:	f0 e0       	ldi	r31, 0x00	; 0
    5db2:	80 81       	ld	r24, Z
    5db4:	80 7f       	andi	r24, 0xF0	; 240
    5db6:	8c 93       	st	X, r24
    5db8:	1d c0       	rjmp	.+58     	; 0x5df4 <AVE_gpioLowerNibbleWrite+0x12c>
				break;
			}
			break;
		case PORTD:
			switch(value)
    5dba:	8a 81       	ldd	r24, Y+2	; 0x02
    5dbc:	28 2f       	mov	r18, r24
    5dbe:	30 e0       	ldi	r19, 0x00	; 0
    5dc0:	3c 83       	std	Y+4, r19	; 0x04
    5dc2:	2b 83       	std	Y+3, r18	; 0x03
    5dc4:	8b 81       	ldd	r24, Y+3	; 0x03
    5dc6:	9c 81       	ldd	r25, Y+4	; 0x04
    5dc8:	00 97       	sbiw	r24, 0x00	; 0
    5dca:	69 f0       	breq	.+26     	; 0x5de6 <AVE_gpioLowerNibbleWrite+0x11e>
    5dcc:	2b 81       	ldd	r18, Y+3	; 0x03
    5dce:	3c 81       	ldd	r19, Y+4	; 0x04
    5dd0:	21 30       	cpi	r18, 0x01	; 1
    5dd2:	31 05       	cpc	r19, r1
    5dd4:	79 f4       	brne	.+30     	; 0x5df4 <AVE_gpioLowerNibbleWrite+0x12c>
			{
			case HIGH:
				SET_4_LOW_NIPPLE(GPIOD_PORT);
    5dd6:	a2 e3       	ldi	r26, 0x32	; 50
    5dd8:	b0 e0       	ldi	r27, 0x00	; 0
    5dda:	e2 e3       	ldi	r30, 0x32	; 50
    5ddc:	f0 e0       	ldi	r31, 0x00	; 0
    5dde:	80 81       	ld	r24, Z
    5de0:	8f 60       	ori	r24, 0x0F	; 15
    5de2:	8c 93       	st	X, r24
    5de4:	07 c0       	rjmp	.+14     	; 0x5df4 <AVE_gpioLowerNibbleWrite+0x12c>
				break;
			case LOW:
				CLEAR_4_LOW_NIPPLE(GPIOD_PORT);
    5de6:	a2 e3       	ldi	r26, 0x32	; 50
    5de8:	b0 e0       	ldi	r27, 0x00	; 0
    5dea:	e2 e3       	ldi	r30, 0x32	; 50
    5dec:	f0 e0       	ldi	r31, 0x00	; 0
    5dee:	80 81       	ld	r24, Z
    5df0:	80 7f       	andi	r24, 0xF0	; 240
    5df2:	8c 93       	st	X, r24
				break;
			}
			break;

	}
}
    5df4:	2a 96       	adiw	r28, 0x0a	; 10
    5df6:	0f b6       	in	r0, 0x3f	; 63
    5df8:	f8 94       	cli
    5dfa:	de bf       	out	0x3e, r29	; 62
    5dfc:	0f be       	out	0x3f, r0	; 63
    5dfe:	cd bf       	out	0x3d, r28	; 61
    5e00:	cf 91       	pop	r28
    5e02:	df 91       	pop	r29
    5e04:	08 95       	ret

00005e06 <AVE_gpioUpperNibbleToggle>:
 *
 * this function is used to toggle the value of the upper nibble of the specified port
 * this nibble must be previously intialized as an output nibble.
 */
void AVE_gpioUpperNibbleToggle(uint8 port)
{
    5e06:	df 93       	push	r29
    5e08:	cf 93       	push	r28
    5e0a:	00 d0       	rcall	.+0      	; 0x5e0c <AVE_gpioUpperNibbleToggle+0x6>
    5e0c:	0f 92       	push	r0
    5e0e:	cd b7       	in	r28, 0x3d	; 61
    5e10:	de b7       	in	r29, 0x3e	; 62
    5e12:	89 83       	std	Y+1, r24	; 0x01
	switch(port)
    5e14:	89 81       	ldd	r24, Y+1	; 0x01
    5e16:	28 2f       	mov	r18, r24
    5e18:	30 e0       	ldi	r19, 0x00	; 0
    5e1a:	3b 83       	std	Y+3, r19	; 0x03
    5e1c:	2a 83       	std	Y+2, r18	; 0x02
    5e1e:	8a 81       	ldd	r24, Y+2	; 0x02
    5e20:	9b 81       	ldd	r25, Y+3	; 0x03
    5e22:	81 30       	cpi	r24, 0x01	; 1
    5e24:	91 05       	cpc	r25, r1
    5e26:	f1 f0       	breq	.+60     	; 0x5e64 <AVE_gpioUpperNibbleToggle+0x5e>
    5e28:	2a 81       	ldd	r18, Y+2	; 0x02
    5e2a:	3b 81       	ldd	r19, Y+3	; 0x03
    5e2c:	22 30       	cpi	r18, 0x02	; 2
    5e2e:	31 05       	cpc	r19, r1
    5e30:	2c f4       	brge	.+10     	; 0x5e3c <AVE_gpioUpperNibbleToggle+0x36>
    5e32:	8a 81       	ldd	r24, Y+2	; 0x02
    5e34:	9b 81       	ldd	r25, Y+3	; 0x03
    5e36:	00 97       	sbiw	r24, 0x00	; 0
    5e38:	61 f0       	breq	.+24     	; 0x5e52 <AVE_gpioUpperNibbleToggle+0x4c>
    5e3a:	2e c0       	rjmp	.+92     	; 0x5e98 <AVE_gpioUpperNibbleToggle+0x92>
    5e3c:	2a 81       	ldd	r18, Y+2	; 0x02
    5e3e:	3b 81       	ldd	r19, Y+3	; 0x03
    5e40:	22 30       	cpi	r18, 0x02	; 2
    5e42:	31 05       	cpc	r19, r1
    5e44:	c1 f0       	breq	.+48     	; 0x5e76 <AVE_gpioUpperNibbleToggle+0x70>
    5e46:	8a 81       	ldd	r24, Y+2	; 0x02
    5e48:	9b 81       	ldd	r25, Y+3	; 0x03
    5e4a:	83 30       	cpi	r24, 0x03	; 3
    5e4c:	91 05       	cpc	r25, r1
    5e4e:	e1 f0       	breq	.+56     	; 0x5e88 <AVE_gpioUpperNibbleToggle+0x82>
    5e50:	23 c0       	rjmp	.+70     	; 0x5e98 <AVE_gpioUpperNibbleToggle+0x92>
	{
	case PORTA:
		TOGGLE_HIGH_NIBBLE(GPIOA_PORT);
    5e52:	ab e3       	ldi	r26, 0x3B	; 59
    5e54:	b0 e0       	ldi	r27, 0x00	; 0
    5e56:	eb e3       	ldi	r30, 0x3B	; 59
    5e58:	f0 e0       	ldi	r31, 0x00	; 0
    5e5a:	90 81       	ld	r25, Z
    5e5c:	8f e0       	ldi	r24, 0x0F	; 15
    5e5e:	89 27       	eor	r24, r25
    5e60:	8c 93       	st	X, r24
    5e62:	1a c0       	rjmp	.+52     	; 0x5e98 <AVE_gpioUpperNibbleToggle+0x92>
		break;
	case PORTB:
		TOGGLE_HIGH_NIBBLE(GPIOB_PORT);
    5e64:	a8 e3       	ldi	r26, 0x38	; 56
    5e66:	b0 e0       	ldi	r27, 0x00	; 0
    5e68:	e8 e3       	ldi	r30, 0x38	; 56
    5e6a:	f0 e0       	ldi	r31, 0x00	; 0
    5e6c:	90 81       	ld	r25, Z
    5e6e:	8f e0       	ldi	r24, 0x0F	; 15
    5e70:	89 27       	eor	r24, r25
    5e72:	8c 93       	st	X, r24
    5e74:	11 c0       	rjmp	.+34     	; 0x5e98 <AVE_gpioUpperNibbleToggle+0x92>
		break;
	case PORTC:
		TOGGLE_HIGH_NIBBLE(GPIOC_PORT);
    5e76:	a5 e3       	ldi	r26, 0x35	; 53
    5e78:	b0 e0       	ldi	r27, 0x00	; 0
    5e7a:	e5 e3       	ldi	r30, 0x35	; 53
    5e7c:	f0 e0       	ldi	r31, 0x00	; 0
    5e7e:	90 81       	ld	r25, Z
    5e80:	8f e0       	ldi	r24, 0x0F	; 15
    5e82:	89 27       	eor	r24, r25
    5e84:	8c 93       	st	X, r24
    5e86:	08 c0       	rjmp	.+16     	; 0x5e98 <AVE_gpioUpperNibbleToggle+0x92>
		break;
	case PORTD:
		TOGGLE_HIGH_NIBBLE(GPIOD_PORT);
    5e88:	a2 e3       	ldi	r26, 0x32	; 50
    5e8a:	b0 e0       	ldi	r27, 0x00	; 0
    5e8c:	e2 e3       	ldi	r30, 0x32	; 50
    5e8e:	f0 e0       	ldi	r31, 0x00	; 0
    5e90:	90 81       	ld	r25, Z
    5e92:	8f e0       	ldi	r24, 0x0F	; 15
    5e94:	89 27       	eor	r24, r25
    5e96:	8c 93       	st	X, r24
		break;


	}
}
    5e98:	0f 90       	pop	r0
    5e9a:	0f 90       	pop	r0
    5e9c:	0f 90       	pop	r0
    5e9e:	cf 91       	pop	r28
    5ea0:	df 91       	pop	r29
    5ea2:	08 95       	ret

00005ea4 <AVE_gpioLowerNibbleToggle>:
 *
 * this function is for toggling the value of the lower nibble of a register
 * the lower nibble direction must previously be set as output .
 */
void AVE_gpioLowerNibbleToggle(uint8 port)
{
    5ea4:	df 93       	push	r29
    5ea6:	cf 93       	push	r28
    5ea8:	00 d0       	rcall	.+0      	; 0x5eaa <AVE_gpioLowerNibbleToggle+0x6>
    5eaa:	0f 92       	push	r0
    5eac:	cd b7       	in	r28, 0x3d	; 61
    5eae:	de b7       	in	r29, 0x3e	; 62
    5eb0:	89 83       	std	Y+1, r24	; 0x01

	switch(port)
    5eb2:	89 81       	ldd	r24, Y+1	; 0x01
    5eb4:	28 2f       	mov	r18, r24
    5eb6:	30 e0       	ldi	r19, 0x00	; 0
    5eb8:	3b 83       	std	Y+3, r19	; 0x03
    5eba:	2a 83       	std	Y+2, r18	; 0x02
    5ebc:	8a 81       	ldd	r24, Y+2	; 0x02
    5ebe:	9b 81       	ldd	r25, Y+3	; 0x03
    5ec0:	81 30       	cpi	r24, 0x01	; 1
    5ec2:	91 05       	cpc	r25, r1
    5ec4:	f1 f0       	breq	.+60     	; 0x5f02 <AVE_gpioLowerNibbleToggle+0x5e>
    5ec6:	2a 81       	ldd	r18, Y+2	; 0x02
    5ec8:	3b 81       	ldd	r19, Y+3	; 0x03
    5eca:	22 30       	cpi	r18, 0x02	; 2
    5ecc:	31 05       	cpc	r19, r1
    5ece:	2c f4       	brge	.+10     	; 0x5eda <AVE_gpioLowerNibbleToggle+0x36>
    5ed0:	8a 81       	ldd	r24, Y+2	; 0x02
    5ed2:	9b 81       	ldd	r25, Y+3	; 0x03
    5ed4:	00 97       	sbiw	r24, 0x00	; 0
    5ed6:	61 f0       	breq	.+24     	; 0x5ef0 <AVE_gpioLowerNibbleToggle+0x4c>
    5ed8:	2e c0       	rjmp	.+92     	; 0x5f36 <AVE_gpioLowerNibbleToggle+0x92>
    5eda:	2a 81       	ldd	r18, Y+2	; 0x02
    5edc:	3b 81       	ldd	r19, Y+3	; 0x03
    5ede:	22 30       	cpi	r18, 0x02	; 2
    5ee0:	31 05       	cpc	r19, r1
    5ee2:	c1 f0       	breq	.+48     	; 0x5f14 <AVE_gpioLowerNibbleToggle+0x70>
    5ee4:	8a 81       	ldd	r24, Y+2	; 0x02
    5ee6:	9b 81       	ldd	r25, Y+3	; 0x03
    5ee8:	83 30       	cpi	r24, 0x03	; 3
    5eea:	91 05       	cpc	r25, r1
    5eec:	e1 f0       	breq	.+56     	; 0x5f26 <AVE_gpioLowerNibbleToggle+0x82>
    5eee:	23 c0       	rjmp	.+70     	; 0x5f36 <AVE_gpioLowerNibbleToggle+0x92>
	{
	case PORTA:
		TOGGLE_LOWER_NIBBLE(GPIOA_PORT);
    5ef0:	ab e3       	ldi	r26, 0x3B	; 59
    5ef2:	b0 e0       	ldi	r27, 0x00	; 0
    5ef4:	eb e3       	ldi	r30, 0x3B	; 59
    5ef6:	f0 e0       	ldi	r31, 0x00	; 0
    5ef8:	90 81       	ld	r25, Z
    5efa:	80 ef       	ldi	r24, 0xF0	; 240
    5efc:	89 27       	eor	r24, r25
    5efe:	8c 93       	st	X, r24
    5f00:	1a c0       	rjmp	.+52     	; 0x5f36 <AVE_gpioLowerNibbleToggle+0x92>
		break;
	case PORTB:
		TOGGLE_LOWER_NIBBLE(GPIOB_PORT);
    5f02:	a8 e3       	ldi	r26, 0x38	; 56
    5f04:	b0 e0       	ldi	r27, 0x00	; 0
    5f06:	e8 e3       	ldi	r30, 0x38	; 56
    5f08:	f0 e0       	ldi	r31, 0x00	; 0
    5f0a:	90 81       	ld	r25, Z
    5f0c:	80 ef       	ldi	r24, 0xF0	; 240
    5f0e:	89 27       	eor	r24, r25
    5f10:	8c 93       	st	X, r24
    5f12:	11 c0       	rjmp	.+34     	; 0x5f36 <AVE_gpioLowerNibbleToggle+0x92>
		break;
	case PORTC:
		TOGGLE_LOWER_NIBBLE(GPIOC_PORT);
    5f14:	a5 e3       	ldi	r26, 0x35	; 53
    5f16:	b0 e0       	ldi	r27, 0x00	; 0
    5f18:	e5 e3       	ldi	r30, 0x35	; 53
    5f1a:	f0 e0       	ldi	r31, 0x00	; 0
    5f1c:	90 81       	ld	r25, Z
    5f1e:	80 ef       	ldi	r24, 0xF0	; 240
    5f20:	89 27       	eor	r24, r25
    5f22:	8c 93       	st	X, r24
    5f24:	08 c0       	rjmp	.+16     	; 0x5f36 <AVE_gpioLowerNibbleToggle+0x92>
		break;
	case PORTD:
		TOGGLE_LOWER_NIBBLE(GPIOD_PORT);
    5f26:	a2 e3       	ldi	r26, 0x32	; 50
    5f28:	b0 e0       	ldi	r27, 0x00	; 0
    5f2a:	e2 e3       	ldi	r30, 0x32	; 50
    5f2c:	f0 e0       	ldi	r31, 0x00	; 0
    5f2e:	90 81       	ld	r25, Z
    5f30:	80 ef       	ldi	r24, 0xF0	; 240
    5f32:	89 27       	eor	r24, r25
    5f34:	8c 93       	st	X, r24
		break;


	}

}
    5f36:	0f 90       	pop	r0
    5f38:	0f 90       	pop	r0
    5f3a:	0f 90       	pop	r0
    5f3c:	cf 91       	pop	r28
    5f3e:	df 91       	pop	r29
    5f40:	08 95       	ret

00005f42 <AVE_gpioUpperNibbleRead>:
 * is previously set as input
 * note you pass in a pointer to variable in order to populate it with
 * the upper nibble of a register .
 */
void AVE_gpioUpperNibbleRead(uint8 port,uint8*returnedValue)
{
    5f42:	df 93       	push	r29
    5f44:	cf 93       	push	r28
    5f46:	00 d0       	rcall	.+0      	; 0x5f48 <AVE_gpioUpperNibbleRead+0x6>
    5f48:	00 d0       	rcall	.+0      	; 0x5f4a <AVE_gpioUpperNibbleRead+0x8>
    5f4a:	0f 92       	push	r0
    5f4c:	cd b7       	in	r28, 0x3d	; 61
    5f4e:	de b7       	in	r29, 0x3e	; 62
    5f50:	89 83       	std	Y+1, r24	; 0x01
    5f52:	7b 83       	std	Y+3, r23	; 0x03
    5f54:	6a 83       	std	Y+2, r22	; 0x02

	switch(port)
    5f56:	89 81       	ldd	r24, Y+1	; 0x01
    5f58:	28 2f       	mov	r18, r24
    5f5a:	30 e0       	ldi	r19, 0x00	; 0
    5f5c:	3d 83       	std	Y+5, r19	; 0x05
    5f5e:	2c 83       	std	Y+4, r18	; 0x04
    5f60:	8c 81       	ldd	r24, Y+4	; 0x04
    5f62:	9d 81       	ldd	r25, Y+5	; 0x05
    5f64:	81 30       	cpi	r24, 0x01	; 1
    5f66:	91 05       	cpc	r25, r1
    5f68:	e9 f0       	breq	.+58     	; 0x5fa4 <AVE_gpioUpperNibbleRead+0x62>
    5f6a:	2c 81       	ldd	r18, Y+4	; 0x04
    5f6c:	3d 81       	ldd	r19, Y+5	; 0x05
    5f6e:	22 30       	cpi	r18, 0x02	; 2
    5f70:	31 05       	cpc	r19, r1
    5f72:	2c f4       	brge	.+10     	; 0x5f7e <AVE_gpioUpperNibbleRead+0x3c>
    5f74:	8c 81       	ldd	r24, Y+4	; 0x04
    5f76:	9d 81       	ldd	r25, Y+5	; 0x05
    5f78:	00 97       	sbiw	r24, 0x00	; 0
    5f7a:	61 f0       	breq	.+24     	; 0x5f94 <AVE_gpioUpperNibbleRead+0x52>
    5f7c:	2a c0       	rjmp	.+84     	; 0x5fd2 <AVE_gpioUpperNibbleRead+0x90>
    5f7e:	2c 81       	ldd	r18, Y+4	; 0x04
    5f80:	3d 81       	ldd	r19, Y+5	; 0x05
    5f82:	22 30       	cpi	r18, 0x02	; 2
    5f84:	31 05       	cpc	r19, r1
    5f86:	b1 f0       	breq	.+44     	; 0x5fb4 <AVE_gpioUpperNibbleRead+0x72>
    5f88:	8c 81       	ldd	r24, Y+4	; 0x04
    5f8a:	9d 81       	ldd	r25, Y+5	; 0x05
    5f8c:	83 30       	cpi	r24, 0x03	; 3
    5f8e:	91 05       	cpc	r25, r1
    5f90:	c9 f0       	breq	.+50     	; 0x5fc4 <AVE_gpioUpperNibbleRead+0x82>
    5f92:	1f c0       	rjmp	.+62     	; 0x5fd2 <AVE_gpioUpperNibbleRead+0x90>
	{
	case PORTA:
		*returnedValue = Get_4_HIGH_NIBBLE(GPIOA_PORT);
    5f94:	eb e3       	ldi	r30, 0x3B	; 59
    5f96:	f0 e0       	ldi	r31, 0x00	; 0
    5f98:	80 81       	ld	r24, Z
    5f9a:	80 7f       	andi	r24, 0xF0	; 240
    5f9c:	ea 81       	ldd	r30, Y+2	; 0x02
    5f9e:	fb 81       	ldd	r31, Y+3	; 0x03
    5fa0:	80 83       	st	Z, r24
    5fa2:	17 c0       	rjmp	.+46     	; 0x5fd2 <AVE_gpioUpperNibbleRead+0x90>
		break;
	case PORTB:
		*returnedValue = Get_4_HIGH_NIBBLE(GPIOB_PORT);
    5fa4:	e8 e3       	ldi	r30, 0x38	; 56
    5fa6:	f0 e0       	ldi	r31, 0x00	; 0
    5fa8:	80 81       	ld	r24, Z
    5faa:	80 7f       	andi	r24, 0xF0	; 240
    5fac:	ea 81       	ldd	r30, Y+2	; 0x02
    5fae:	fb 81       	ldd	r31, Y+3	; 0x03
    5fb0:	80 83       	st	Z, r24
    5fb2:	0f c0       	rjmp	.+30     	; 0x5fd2 <AVE_gpioUpperNibbleRead+0x90>
		break;
	case PORTC:
		*returnedValue = Get_4_HIGH_NIBBLE(GPIOC_PORT);
    5fb4:	e5 e3       	ldi	r30, 0x35	; 53
    5fb6:	f0 e0       	ldi	r31, 0x00	; 0
    5fb8:	80 81       	ld	r24, Z
    5fba:	80 7f       	andi	r24, 0xF0	; 240
    5fbc:	ea 81       	ldd	r30, Y+2	; 0x02
    5fbe:	fb 81       	ldd	r31, Y+3	; 0x03
    5fc0:	80 83       	st	Z, r24
    5fc2:	07 c0       	rjmp	.+14     	; 0x5fd2 <AVE_gpioUpperNibbleRead+0x90>
		break;
	case PORTD:
		*returnedValue = Get_4_HIGH_NIBBLE(GPIOD_PORT);
    5fc4:	e2 e3       	ldi	r30, 0x32	; 50
    5fc6:	f0 e0       	ldi	r31, 0x00	; 0
    5fc8:	80 81       	ld	r24, Z
    5fca:	80 7f       	andi	r24, 0xF0	; 240
    5fcc:	ea 81       	ldd	r30, Y+2	; 0x02
    5fce:	fb 81       	ldd	r31, Y+3	; 0x03
    5fd0:	80 83       	st	Z, r24
		break;

	}


}
    5fd2:	0f 90       	pop	r0
    5fd4:	0f 90       	pop	r0
    5fd6:	0f 90       	pop	r0
    5fd8:	0f 90       	pop	r0
    5fda:	0f 90       	pop	r0
    5fdc:	cf 91       	pop	r28
    5fde:	df 91       	pop	r29
    5fe0:	08 95       	ret

00005fe2 <AVE_GpioLowerNibbleRead>:
 * previously intialized as input
 * and the returned value is passed as a parameter to the function .
 *
 */
void AVE_GpioLowerNibbleRead(uint8 port,uint8*returnedValue)
{
    5fe2:	df 93       	push	r29
    5fe4:	cf 93       	push	r28
    5fe6:	00 d0       	rcall	.+0      	; 0x5fe8 <AVE_GpioLowerNibbleRead+0x6>
    5fe8:	00 d0       	rcall	.+0      	; 0x5fea <AVE_GpioLowerNibbleRead+0x8>
    5fea:	0f 92       	push	r0
    5fec:	cd b7       	in	r28, 0x3d	; 61
    5fee:	de b7       	in	r29, 0x3e	; 62
    5ff0:	89 83       	std	Y+1, r24	; 0x01
    5ff2:	7b 83       	std	Y+3, r23	; 0x03
    5ff4:	6a 83       	std	Y+2, r22	; 0x02
	switch(port)
    5ff6:	89 81       	ldd	r24, Y+1	; 0x01
    5ff8:	28 2f       	mov	r18, r24
    5ffa:	30 e0       	ldi	r19, 0x00	; 0
    5ffc:	3d 83       	std	Y+5, r19	; 0x05
    5ffe:	2c 83       	std	Y+4, r18	; 0x04
    6000:	8c 81       	ldd	r24, Y+4	; 0x04
    6002:	9d 81       	ldd	r25, Y+5	; 0x05
    6004:	81 30       	cpi	r24, 0x01	; 1
    6006:	91 05       	cpc	r25, r1
    6008:	e9 f0       	breq	.+58     	; 0x6044 <AVE_GpioLowerNibbleRead+0x62>
    600a:	2c 81       	ldd	r18, Y+4	; 0x04
    600c:	3d 81       	ldd	r19, Y+5	; 0x05
    600e:	22 30       	cpi	r18, 0x02	; 2
    6010:	31 05       	cpc	r19, r1
    6012:	2c f4       	brge	.+10     	; 0x601e <AVE_GpioLowerNibbleRead+0x3c>
    6014:	8c 81       	ldd	r24, Y+4	; 0x04
    6016:	9d 81       	ldd	r25, Y+5	; 0x05
    6018:	00 97       	sbiw	r24, 0x00	; 0
    601a:	61 f0       	breq	.+24     	; 0x6034 <AVE_GpioLowerNibbleRead+0x52>
    601c:	2a c0       	rjmp	.+84     	; 0x6072 <AVE_GpioLowerNibbleRead+0x90>
    601e:	2c 81       	ldd	r18, Y+4	; 0x04
    6020:	3d 81       	ldd	r19, Y+5	; 0x05
    6022:	22 30       	cpi	r18, 0x02	; 2
    6024:	31 05       	cpc	r19, r1
    6026:	b1 f0       	breq	.+44     	; 0x6054 <AVE_GpioLowerNibbleRead+0x72>
    6028:	8c 81       	ldd	r24, Y+4	; 0x04
    602a:	9d 81       	ldd	r25, Y+5	; 0x05
    602c:	83 30       	cpi	r24, 0x03	; 3
    602e:	91 05       	cpc	r25, r1
    6030:	c9 f0       	breq	.+50     	; 0x6064 <AVE_GpioLowerNibbleRead+0x82>
    6032:	1f c0       	rjmp	.+62     	; 0x6072 <AVE_GpioLowerNibbleRead+0x90>
	{
	case PORTA:
		*returnedValue = Get_4_LOW_NIBBLE(GPIOA_PORT);
    6034:	eb e3       	ldi	r30, 0x3B	; 59
    6036:	f0 e0       	ldi	r31, 0x00	; 0
    6038:	80 81       	ld	r24, Z
    603a:	8f 70       	andi	r24, 0x0F	; 15
    603c:	ea 81       	ldd	r30, Y+2	; 0x02
    603e:	fb 81       	ldd	r31, Y+3	; 0x03
    6040:	80 83       	st	Z, r24
    6042:	17 c0       	rjmp	.+46     	; 0x6072 <AVE_GpioLowerNibbleRead+0x90>
		break;
	case PORTB:
		*returnedValue = Get_4_LOW_NIBBLE(GPIOB_PORT);
    6044:	e8 e3       	ldi	r30, 0x38	; 56
    6046:	f0 e0       	ldi	r31, 0x00	; 0
    6048:	80 81       	ld	r24, Z
    604a:	8f 70       	andi	r24, 0x0F	; 15
    604c:	ea 81       	ldd	r30, Y+2	; 0x02
    604e:	fb 81       	ldd	r31, Y+3	; 0x03
    6050:	80 83       	st	Z, r24
    6052:	0f c0       	rjmp	.+30     	; 0x6072 <AVE_GpioLowerNibbleRead+0x90>
		break;
	case PORTC:
		*returnedValue = Get_4_LOW_NIBBLE(GPIOC_PORT);
    6054:	e5 e3       	ldi	r30, 0x35	; 53
    6056:	f0 e0       	ldi	r31, 0x00	; 0
    6058:	80 81       	ld	r24, Z
    605a:	8f 70       	andi	r24, 0x0F	; 15
    605c:	ea 81       	ldd	r30, Y+2	; 0x02
    605e:	fb 81       	ldd	r31, Y+3	; 0x03
    6060:	80 83       	st	Z, r24
    6062:	07 c0       	rjmp	.+14     	; 0x6072 <AVE_GpioLowerNibbleRead+0x90>
		break;
	case PORTD:
		*returnedValue = Get_4_LOW_NIBBLE(GPIOD_PORT);
    6064:	e2 e3       	ldi	r30, 0x32	; 50
    6066:	f0 e0       	ldi	r31, 0x00	; 0
    6068:	80 81       	ld	r24, Z
    606a:	8f 70       	andi	r24, 0x0F	; 15
    606c:	ea 81       	ldd	r30, Y+2	; 0x02
    606e:	fb 81       	ldd	r31, Y+3	; 0x03
    6070:	80 83       	st	Z, r24
		break;
	}
	return;
}
    6072:	0f 90       	pop	r0
    6074:	0f 90       	pop	r0
    6076:	0f 90       	pop	r0
    6078:	0f 90       	pop	r0
    607a:	0f 90       	pop	r0
    607c:	cf 91       	pop	r28
    607e:	df 91       	pop	r29
    6080:	08 95       	ret

00006082 <SW_Delay_ms>:
#include "../LIBRARIES_INCLUDES/SW_Delay.h"



void SW_Delay_ms(uint32 delayValue)
{
    6082:	df 93       	push	r29
    6084:	cf 93       	push	r28
    6086:	cd b7       	in	r28, 0x3d	; 61
    6088:	de b7       	in	r29, 0x3e	; 62
    608a:	2c 97       	sbiw	r28, 0x0c	; 12
    608c:	0f b6       	in	r0, 0x3f	; 63
    608e:	f8 94       	cli
    6090:	de bf       	out	0x3e, r29	; 62
    6092:	0f be       	out	0x3f, r0	; 63
    6094:	cd bf       	out	0x3d, r28	; 61
    6096:	69 87       	std	Y+9, r22	; 0x09
    6098:	7a 87       	std	Y+10, r23	; 0x0a
    609a:	8b 87       	std	Y+11, r24	; 0x0b
    609c:	9c 87       	std	Y+12, r25	; 0x0c


	volatile uint32 numberOfIterations = (delayValue*1000*16)/(40);
    609e:	89 85       	ldd	r24, Y+9	; 0x09
    60a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    60a2:	ab 85       	ldd	r26, Y+11	; 0x0b
    60a4:	bc 85       	ldd	r27, Y+12	; 0x0c
    60a6:	20 e8       	ldi	r18, 0x80	; 128
    60a8:	3e e3       	ldi	r19, 0x3E	; 62
    60aa:	40 e0       	ldi	r20, 0x00	; 0
    60ac:	50 e0       	ldi	r21, 0x00	; 0
    60ae:	bc 01       	movw	r22, r24
    60b0:	cd 01       	movw	r24, r26
    60b2:	0e 94 34 3b 	call	0x7668	; 0x7668 <__mulsi3>
    60b6:	dc 01       	movw	r26, r24
    60b8:	cb 01       	movw	r24, r22
    60ba:	28 e2       	ldi	r18, 0x28	; 40
    60bc:	30 e0       	ldi	r19, 0x00	; 0
    60be:	40 e0       	ldi	r20, 0x00	; 0
    60c0:	50 e0       	ldi	r21, 0x00	; 0
    60c2:	bc 01       	movw	r22, r24
    60c4:	cd 01       	movw	r24, r26
    60c6:	0e 94 67 3b 	call	0x76ce	; 0x76ce <__udivmodsi4>
    60ca:	da 01       	movw	r26, r20
    60cc:	c9 01       	movw	r24, r18
    60ce:	8d 83       	std	Y+5, r24	; 0x05
    60d0:	9e 83       	std	Y+6, r25	; 0x06
    60d2:	af 83       	std	Y+7, r26	; 0x07
    60d4:	b8 87       	std	Y+8, r27	; 0x08


	for(uint32 i =0;i<numberOfIterations;i++);
    60d6:	19 82       	std	Y+1, r1	; 0x01
    60d8:	1a 82       	std	Y+2, r1	; 0x02
    60da:	1b 82       	std	Y+3, r1	; 0x03
    60dc:	1c 82       	std	Y+4, r1	; 0x04
    60de:	0b c0       	rjmp	.+22     	; 0x60f6 <SW_Delay_ms+0x74>
    60e0:	89 81       	ldd	r24, Y+1	; 0x01
    60e2:	9a 81       	ldd	r25, Y+2	; 0x02
    60e4:	ab 81       	ldd	r26, Y+3	; 0x03
    60e6:	bc 81       	ldd	r27, Y+4	; 0x04
    60e8:	01 96       	adiw	r24, 0x01	; 1
    60ea:	a1 1d       	adc	r26, r1
    60ec:	b1 1d       	adc	r27, r1
    60ee:	89 83       	std	Y+1, r24	; 0x01
    60f0:	9a 83       	std	Y+2, r25	; 0x02
    60f2:	ab 83       	std	Y+3, r26	; 0x03
    60f4:	bc 83       	std	Y+4, r27	; 0x04
    60f6:	2d 81       	ldd	r18, Y+5	; 0x05
    60f8:	3e 81       	ldd	r19, Y+6	; 0x06
    60fa:	4f 81       	ldd	r20, Y+7	; 0x07
    60fc:	58 85       	ldd	r21, Y+8	; 0x08
    60fe:	89 81       	ldd	r24, Y+1	; 0x01
    6100:	9a 81       	ldd	r25, Y+2	; 0x02
    6102:	ab 81       	ldd	r26, Y+3	; 0x03
    6104:	bc 81       	ldd	r27, Y+4	; 0x04
    6106:	82 17       	cp	r24, r18
    6108:	93 07       	cpc	r25, r19
    610a:	a4 07       	cpc	r26, r20
    610c:	b5 07       	cpc	r27, r21
    610e:	40 f3       	brcs	.-48     	; 0x60e0 <SW_Delay_ms+0x5e>

	return;



}
    6110:	2c 96       	adiw	r28, 0x0c	; 12
    6112:	0f b6       	in	r0, 0x3f	; 63
    6114:	f8 94       	cli
    6116:	de bf       	out	0x3e, r29	; 62
    6118:	0f be       	out	0x3f, r0	; 63
    611a:	cd bf       	out	0x3d, r28	; 61
    611c:	cf 91       	pop	r28
    611e:	df 91       	pop	r29
    6120:	08 95       	ret

00006122 <initializeUltraSonic>:
#include "Icu.h"
#include "UltrasonicCfg.h"
#include "Ultrasonic.h"

void initializeUltraSonic(void)
{
    6122:	df 93       	push	r29
    6124:	cf 93       	push	r28
    6126:	cd b7       	in	r28, 0x3d	; 61
    6128:	de b7       	in	r29, 0x3e	; 62

	AVE_gpioPinDirection(PORTA,BIT4,OUTPUT);
    612a:	80 e0       	ldi	r24, 0x00	; 0
    612c:	60 e1       	ldi	r22, 0x10	; 16
    612e:	42 e0       	ldi	r20, 0x02	; 2
    6130:	0e 94 76 28 	call	0x50ec	; 0x50ec <AVE_gpioPinDirection>
	AVE_gpioPinWrite(PORTA,BIT4,HIGH);
    6134:	80 e0       	ldi	r24, 0x00	; 0
    6136:	60 e1       	ldi	r22, 0x10	; 16
    6138:	41 e0       	ldi	r20, 0x01	; 1
    613a:	0e 94 b7 29 	call	0x536e	; 0x536e <AVE_gpioPinWrite>
	AVE_gpioPinDirection(PORTA,BIT5,OUTPUT);
    613e:	80 e0       	ldi	r24, 0x00	; 0
    6140:	60 e2       	ldi	r22, 0x20	; 32
    6142:	42 e0       	ldi	r20, 0x02	; 2
    6144:	0e 94 76 28 	call	0x50ec	; 0x50ec <AVE_gpioPinDirection>
	AVE_gpioPinWrite(PORTA,BIT5,LOW);
    6148:	80 e0       	ldi	r24, 0x00	; 0
    614a:	60 e2       	ldi	r22, 0x20	; 32
    614c:	40 e0       	ldi	r20, 0x00	; 0
    614e:	0e 94 b7 29 	call	0x536e	; 0x536e <AVE_gpioPinWrite>
	AVE_gpioPinDirection(ULTRASONIC_TRIGGER_PORT,ULTRASONIC_TRIGGER_PIN,OUTPUT);
    6152:	80 e0       	ldi	r24, 0x00	; 0
    6154:	60 e4       	ldi	r22, 0x40	; 64
    6156:	42 e0       	ldi	r20, 0x02	; 2
    6158:	0e 94 76 28 	call	0x50ec	; 0x50ec <AVE_gpioPinDirection>
	SwICU_Init(ICU_TIMER0);
    615c:	80 e0       	ldi	r24, 0x00	; 0
    615e:	0e 94 70 35 	call	0x6ae0	; 0x6ae0 <SwICU_Init>

}
    6162:	cf 91       	pop	r28
    6164:	df 91       	pop	r29
    6166:	08 95       	ret

00006168 <triggerUltrasonic>:


void triggerUltrasonic(void)
{
    6168:	df 93       	push	r29
    616a:	cf 93       	push	r28
    616c:	cd b7       	in	r28, 0x3d	; 61
    616e:	de b7       	in	r29, 0x3e	; 62
    6170:	68 97       	sbiw	r28, 0x18	; 24
    6172:	0f b6       	in	r0, 0x3f	; 63
    6174:	f8 94       	cli
    6176:	de bf       	out	0x3e, r29	; 62
    6178:	0f be       	out	0x3f, r0	; 63
    617a:	cd bf       	out	0x3d, r28	; 61

	AVE_gpioPinWrite(PORTA,BIT6,HIGH);
    617c:	80 e0       	ldi	r24, 0x00	; 0
    617e:	60 e4       	ldi	r22, 0x40	; 64
    6180:	41 e0       	ldi	r20, 0x01	; 1
    6182:	0e 94 b7 29 	call	0x536e	; 0x536e <AVE_gpioPinWrite>
    6186:	80 e0       	ldi	r24, 0x00	; 0
    6188:	90 e0       	ldi	r25, 0x00	; 0
    618a:	a0 e7       	ldi	r26, 0x70	; 112
    618c:	b1 e4       	ldi	r27, 0x41	; 65
    618e:	8d 8b       	std	Y+21, r24	; 0x15
    6190:	9e 8b       	std	Y+22, r25	; 0x16
    6192:	af 8b       	std	Y+23, r26	; 0x17
    6194:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    6196:	6d 89       	ldd	r22, Y+21	; 0x15
    6198:	7e 89       	ldd	r23, Y+22	; 0x16
    619a:	8f 89       	ldd	r24, Y+23	; 0x17
    619c:	98 8d       	ldd	r25, Y+24	; 0x18
    619e:	2b ea       	ldi	r18, 0xAB	; 171
    61a0:	3a ea       	ldi	r19, 0xAA	; 170
    61a2:	4a e2       	ldi	r20, 0x2A	; 42
    61a4:	50 e4       	ldi	r21, 0x40	; 64
    61a6:	0e 94 42 0b 	call	0x1684	; 0x1684 <__mulsf3>
    61aa:	dc 01       	movw	r26, r24
    61ac:	cb 01       	movw	r24, r22
    61ae:	89 8b       	std	Y+17, r24	; 0x11
    61b0:	9a 8b       	std	Y+18, r25	; 0x12
    61b2:	ab 8b       	std	Y+19, r26	; 0x13
    61b4:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    61b6:	69 89       	ldd	r22, Y+17	; 0x11
    61b8:	7a 89       	ldd	r23, Y+18	; 0x12
    61ba:	8b 89       	ldd	r24, Y+19	; 0x13
    61bc:	9c 89       	ldd	r25, Y+20	; 0x14
    61be:	20 e0       	ldi	r18, 0x00	; 0
    61c0:	30 e0       	ldi	r19, 0x00	; 0
    61c2:	40 e8       	ldi	r20, 0x80	; 128
    61c4:	5f e3       	ldi	r21, 0x3F	; 63
    61c6:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <__ltsf2>
    61ca:	88 23       	and	r24, r24
    61cc:	1c f4       	brge	.+6      	; 0x61d4 <triggerUltrasonic+0x6c>
		__ticks = 1;
    61ce:	81 e0       	ldi	r24, 0x01	; 1
    61d0:	88 8b       	std	Y+16, r24	; 0x10
    61d2:	91 c0       	rjmp	.+290    	; 0x62f6 <triggerUltrasonic+0x18e>
	else if (__tmp > 255)
    61d4:	69 89       	ldd	r22, Y+17	; 0x11
    61d6:	7a 89       	ldd	r23, Y+18	; 0x12
    61d8:	8b 89       	ldd	r24, Y+19	; 0x13
    61da:	9c 89       	ldd	r25, Y+20	; 0x14
    61dc:	20 e0       	ldi	r18, 0x00	; 0
    61de:	30 e0       	ldi	r19, 0x00	; 0
    61e0:	4f e7       	ldi	r20, 0x7F	; 127
    61e2:	53 e4       	ldi	r21, 0x43	; 67
    61e4:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <__gtsf2>
    61e8:	18 16       	cp	r1, r24
    61ea:	0c f0       	brlt	.+2      	; 0x61ee <triggerUltrasonic+0x86>
    61ec:	7b c0       	rjmp	.+246    	; 0x62e4 <triggerUltrasonic+0x17c>
	{
		_delay_ms(__us / 1000.0);
    61ee:	6d 89       	ldd	r22, Y+21	; 0x15
    61f0:	7e 89       	ldd	r23, Y+22	; 0x16
    61f2:	8f 89       	ldd	r24, Y+23	; 0x17
    61f4:	98 8d       	ldd	r25, Y+24	; 0x18
    61f6:	20 e0       	ldi	r18, 0x00	; 0
    61f8:	30 e0       	ldi	r19, 0x00	; 0
    61fa:	4a e7       	ldi	r20, 0x7A	; 122
    61fc:	54 e4       	ldi	r21, 0x44	; 68
    61fe:	0e 94 3c 0c 	call	0x1878	; 0x1878 <__divsf3>
    6202:	dc 01       	movw	r26, r24
    6204:	cb 01       	movw	r24, r22
    6206:	8c 87       	std	Y+12, r24	; 0x0c
    6208:	9d 87       	std	Y+13, r25	; 0x0d
    620a:	ae 87       	std	Y+14, r26	; 0x0e
    620c:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    620e:	6c 85       	ldd	r22, Y+12	; 0x0c
    6210:	7d 85       	ldd	r23, Y+13	; 0x0d
    6212:	8e 85       	ldd	r24, Y+14	; 0x0e
    6214:	9f 85       	ldd	r25, Y+15	; 0x0f
    6216:	20 e0       	ldi	r18, 0x00	; 0
    6218:	30 e0       	ldi	r19, 0x00	; 0
    621a:	4a ef       	ldi	r20, 0xFA	; 250
    621c:	54 e4       	ldi	r21, 0x44	; 68
    621e:	0e 94 42 0b 	call	0x1684	; 0x1684 <__mulsf3>
    6222:	dc 01       	movw	r26, r24
    6224:	cb 01       	movw	r24, r22
    6226:	88 87       	std	Y+8, r24	; 0x08
    6228:	99 87       	std	Y+9, r25	; 0x09
    622a:	aa 87       	std	Y+10, r26	; 0x0a
    622c:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    622e:	68 85       	ldd	r22, Y+8	; 0x08
    6230:	79 85       	ldd	r23, Y+9	; 0x09
    6232:	8a 85       	ldd	r24, Y+10	; 0x0a
    6234:	9b 85       	ldd	r25, Y+11	; 0x0b
    6236:	20 e0       	ldi	r18, 0x00	; 0
    6238:	30 e0       	ldi	r19, 0x00	; 0
    623a:	40 e8       	ldi	r20, 0x80	; 128
    623c:	5f e3       	ldi	r21, 0x3F	; 63
    623e:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <__ltsf2>
    6242:	88 23       	and	r24, r24
    6244:	2c f4       	brge	.+10     	; 0x6250 <triggerUltrasonic+0xe8>
		__ticks = 1;
    6246:	81 e0       	ldi	r24, 0x01	; 1
    6248:	90 e0       	ldi	r25, 0x00	; 0
    624a:	9f 83       	std	Y+7, r25	; 0x07
    624c:	8e 83       	std	Y+6, r24	; 0x06
    624e:	3f c0       	rjmp	.+126    	; 0x62ce <triggerUltrasonic+0x166>
	else if (__tmp > 65535)
    6250:	68 85       	ldd	r22, Y+8	; 0x08
    6252:	79 85       	ldd	r23, Y+9	; 0x09
    6254:	8a 85       	ldd	r24, Y+10	; 0x0a
    6256:	9b 85       	ldd	r25, Y+11	; 0x0b
    6258:	20 e0       	ldi	r18, 0x00	; 0
    625a:	3f ef       	ldi	r19, 0xFF	; 255
    625c:	4f e7       	ldi	r20, 0x7F	; 127
    625e:	57 e4       	ldi	r21, 0x47	; 71
    6260:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <__gtsf2>
    6264:	18 16       	cp	r1, r24
    6266:	4c f5       	brge	.+82     	; 0x62ba <triggerUltrasonic+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6268:	6c 85       	ldd	r22, Y+12	; 0x0c
    626a:	7d 85       	ldd	r23, Y+13	; 0x0d
    626c:	8e 85       	ldd	r24, Y+14	; 0x0e
    626e:	9f 85       	ldd	r25, Y+15	; 0x0f
    6270:	20 e0       	ldi	r18, 0x00	; 0
    6272:	30 e0       	ldi	r19, 0x00	; 0
    6274:	40 e2       	ldi	r20, 0x20	; 32
    6276:	51 e4       	ldi	r21, 0x41	; 65
    6278:	0e 94 42 0b 	call	0x1684	; 0x1684 <__mulsf3>
    627c:	dc 01       	movw	r26, r24
    627e:	cb 01       	movw	r24, r22
    6280:	bc 01       	movw	r22, r24
    6282:	cd 01       	movw	r24, r26
    6284:	0e 94 44 01 	call	0x288	; 0x288 <__fixunssfsi>
    6288:	dc 01       	movw	r26, r24
    628a:	cb 01       	movw	r24, r22
    628c:	9f 83       	std	Y+7, r25	; 0x07
    628e:	8e 83       	std	Y+6, r24	; 0x06
    6290:	0f c0       	rjmp	.+30     	; 0x62b0 <triggerUltrasonic+0x148>
    6292:	88 ec       	ldi	r24, 0xC8	; 200
    6294:	90 e0       	ldi	r25, 0x00	; 0
    6296:	9d 83       	std	Y+5, r25	; 0x05
    6298:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    629a:	8c 81       	ldd	r24, Y+4	; 0x04
    629c:	9d 81       	ldd	r25, Y+5	; 0x05
    629e:	01 97       	sbiw	r24, 0x01	; 1
    62a0:	f1 f7       	brne	.-4      	; 0x629e <triggerUltrasonic+0x136>
    62a2:	9d 83       	std	Y+5, r25	; 0x05
    62a4:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    62a6:	8e 81       	ldd	r24, Y+6	; 0x06
    62a8:	9f 81       	ldd	r25, Y+7	; 0x07
    62aa:	01 97       	sbiw	r24, 0x01	; 1
    62ac:	9f 83       	std	Y+7, r25	; 0x07
    62ae:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    62b0:	8e 81       	ldd	r24, Y+6	; 0x06
    62b2:	9f 81       	ldd	r25, Y+7	; 0x07
    62b4:	00 97       	sbiw	r24, 0x00	; 0
    62b6:	69 f7       	brne	.-38     	; 0x6292 <triggerUltrasonic+0x12a>
    62b8:	24 c0       	rjmp	.+72     	; 0x6302 <triggerUltrasonic+0x19a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    62ba:	68 85       	ldd	r22, Y+8	; 0x08
    62bc:	79 85       	ldd	r23, Y+9	; 0x09
    62be:	8a 85       	ldd	r24, Y+10	; 0x0a
    62c0:	9b 85       	ldd	r25, Y+11	; 0x0b
    62c2:	0e 94 44 01 	call	0x288	; 0x288 <__fixunssfsi>
    62c6:	dc 01       	movw	r26, r24
    62c8:	cb 01       	movw	r24, r22
    62ca:	9f 83       	std	Y+7, r25	; 0x07
    62cc:	8e 83       	std	Y+6, r24	; 0x06
    62ce:	8e 81       	ldd	r24, Y+6	; 0x06
    62d0:	9f 81       	ldd	r25, Y+7	; 0x07
    62d2:	9b 83       	std	Y+3, r25	; 0x03
    62d4:	8a 83       	std	Y+2, r24	; 0x02
    62d6:	8a 81       	ldd	r24, Y+2	; 0x02
    62d8:	9b 81       	ldd	r25, Y+3	; 0x03
    62da:	01 97       	sbiw	r24, 0x01	; 1
    62dc:	f1 f7       	brne	.-4      	; 0x62da <triggerUltrasonic+0x172>
    62de:	9b 83       	std	Y+3, r25	; 0x03
    62e0:	8a 83       	std	Y+2, r24	; 0x02
    62e2:	0f c0       	rjmp	.+30     	; 0x6302 <triggerUltrasonic+0x19a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    62e4:	69 89       	ldd	r22, Y+17	; 0x11
    62e6:	7a 89       	ldd	r23, Y+18	; 0x12
    62e8:	8b 89       	ldd	r24, Y+19	; 0x13
    62ea:	9c 89       	ldd	r25, Y+20	; 0x14
    62ec:	0e 94 44 01 	call	0x288	; 0x288 <__fixunssfsi>
    62f0:	dc 01       	movw	r26, r24
    62f2:	cb 01       	movw	r24, r22
    62f4:	88 8b       	std	Y+16, r24	; 0x10
    62f6:	88 89       	ldd	r24, Y+16	; 0x10
    62f8:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    62fa:	89 81       	ldd	r24, Y+1	; 0x01
    62fc:	8a 95       	dec	r24
    62fe:	f1 f7       	brne	.-4      	; 0x62fc <triggerUltrasonic+0x194>
    6300:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(15);
	AVE_gpioPinWrite(PORTA,BIT6,LOW);
    6302:	80 e0       	ldi	r24, 0x00	; 0
    6304:	60 e4       	ldi	r22, 0x40	; 64
    6306:	40 e0       	ldi	r20, 0x00	; 0
    6308:	0e 94 b7 29 	call	0x536e	; 0x536e <AVE_gpioPinWrite>

}
    630c:	68 96       	adiw	r28, 0x18	; 24
    630e:	0f b6       	in	r0, 0x3f	; 63
    6310:	f8 94       	cli
    6312:	de bf       	out	0x3e, r29	; 62
    6314:	0f be       	out	0x3f, r0	; 63
    6316:	cd bf       	out	0x3d, r28	; 61
    6318:	cf 91       	pop	r28
    631a:	df 91       	pop	r29
    631c:	08 95       	ret

0000631e <calculateDistance>:


uint32 calculateDistance(void)
{
    631e:	2f 92       	push	r2
    6320:	3f 92       	push	r3
    6322:	4f 92       	push	r4
    6324:	5f 92       	push	r5
    6326:	6f 92       	push	r6
    6328:	7f 92       	push	r7
    632a:	8f 92       	push	r8
    632c:	9f 92       	push	r9
    632e:	af 92       	push	r10
    6330:	bf 92       	push	r11
    6332:	cf 92       	push	r12
    6334:	df 92       	push	r13
    6336:	ef 92       	push	r14
    6338:	ff 92       	push	r15
    633a:	0f 93       	push	r16
    633c:	1f 93       	push	r17
    633e:	df 93       	push	r29
    6340:	cf 93       	push	r28
    6342:	cd b7       	in	r28, 0x3d	; 61
    6344:	de b7       	in	r29, 0x3e	; 62
    6346:	64 97       	sbiw	r28, 0x14	; 20
    6348:	0f b6       	in	r0, 0x3f	; 63
    634a:	f8 94       	cli
    634c:	de bf       	out	0x3e, r29	; 62
    634e:	0f be       	out	0x3f, r0	; 63
    6350:	cd bf       	out	0x3d, r28	; 61

	uint32 onTicks;
	SwICU_Read(&onTicks);
    6352:	ce 01       	movw	r24, r28
    6354:	41 96       	adiw	r24, 0x11	; 17
    6356:	0e 94 98 35 	call	0x6b30	; 0x6b30 <SwICU_Read>

	long long int ontTime = onTicks*128;//in micro seconds
    635a:	89 89       	ldd	r24, Y+17	; 0x11
    635c:	9a 89       	ldd	r25, Y+18	; 0x12
    635e:	ab 89       	ldd	r26, Y+19	; 0x13
    6360:	bc 89       	ldd	r27, Y+20	; 0x14
    6362:	88 0f       	add	r24, r24
    6364:	99 1f       	adc	r25, r25
    6366:	aa 1f       	adc	r26, r26
    6368:	bb 1f       	adc	r27, r27
    636a:	88 0f       	add	r24, r24
    636c:	99 1f       	adc	r25, r25
    636e:	aa 1f       	adc	r26, r26
    6370:	bb 1f       	adc	r27, r27
    6372:	88 0f       	add	r24, r24
    6374:	99 1f       	adc	r25, r25
    6376:	aa 1f       	adc	r26, r26
    6378:	bb 1f       	adc	r27, r27
    637a:	88 0f       	add	r24, r24
    637c:	99 1f       	adc	r25, r25
    637e:	aa 1f       	adc	r26, r26
    6380:	bb 1f       	adc	r27, r27
    6382:	88 0f       	add	r24, r24
    6384:	99 1f       	adc	r25, r25
    6386:	aa 1f       	adc	r26, r26
    6388:	bb 1f       	adc	r27, r27
    638a:	88 0f       	add	r24, r24
    638c:	99 1f       	adc	r25, r25
    638e:	aa 1f       	adc	r26, r26
    6390:	bb 1f       	adc	r27, r27
    6392:	88 0f       	add	r24, r24
    6394:	99 1f       	adc	r25, r25
    6396:	aa 1f       	adc	r26, r26
    6398:	bb 1f       	adc	r27, r27
    639a:	9c 01       	movw	r18, r24
    639c:	ad 01       	movw	r20, r26
    639e:	60 e0       	ldi	r22, 0x00	; 0
    63a0:	70 e0       	ldi	r23, 0x00	; 0
    63a2:	80 e0       	ldi	r24, 0x00	; 0
    63a4:	90 e0       	ldi	r25, 0x00	; 0
    63a6:	29 87       	std	Y+9, r18	; 0x09
    63a8:	3a 87       	std	Y+10, r19	; 0x0a
    63aa:	4b 87       	std	Y+11, r20	; 0x0b
    63ac:	5c 87       	std	Y+12, r21	; 0x0c
    63ae:	6d 87       	std	Y+13, r22	; 0x0d
    63b0:	7e 87       	std	Y+14, r23	; 0x0e
    63b2:	8f 87       	std	Y+15, r24	; 0x0f
    63b4:	98 8b       	std	Y+16, r25	; 0x10

	uint32 velocity = 34000; //in cm
    63b6:	80 ed       	ldi	r24, 0xD0	; 208
    63b8:	94 e8       	ldi	r25, 0x84	; 132
    63ba:	a0 e0       	ldi	r26, 0x00	; 0
    63bc:	b0 e0       	ldi	r27, 0x00	; 0
    63be:	8d 83       	std	Y+5, r24	; 0x05
    63c0:	9e 83       	std	Y+6, r25	; 0x06
    63c2:	af 83       	std	Y+7, r26	; 0x07
    63c4:	b8 87       	std	Y+8, r27	; 0x08

	uint32 distance = (((long long)ontTime*velocity/1000000UL))/2;
    63c6:	8d 81       	ldd	r24, Y+5	; 0x05
    63c8:	9e 81       	ldd	r25, Y+6	; 0x06
    63ca:	af 81       	ldd	r26, Y+7	; 0x07
    63cc:	b8 85       	ldd	r27, Y+8	; 0x08
    63ce:	5c 01       	movw	r10, r24
    63d0:	6d 01       	movw	r12, r26
    63d2:	ee 24       	eor	r14, r14
    63d4:	ff 24       	eor	r15, r15
    63d6:	87 01       	movw	r16, r14
    63d8:	2a 2d       	mov	r18, r10
    63da:	3b 2d       	mov	r19, r11
    63dc:	4c 2d       	mov	r20, r12
    63de:	5d 2d       	mov	r21, r13
    63e0:	6e 2d       	mov	r22, r14
    63e2:	7f 2d       	mov	r23, r15
    63e4:	80 2f       	mov	r24, r16
    63e6:	91 2f       	mov	r25, r17
    63e8:	a9 84       	ldd	r10, Y+9	; 0x09
    63ea:	ba 84       	ldd	r11, Y+10	; 0x0a
    63ec:	cb 84       	ldd	r12, Y+11	; 0x0b
    63ee:	dc 84       	ldd	r13, Y+12	; 0x0c
    63f0:	ed 84       	ldd	r14, Y+13	; 0x0d
    63f2:	fe 84       	ldd	r15, Y+14	; 0x0e
    63f4:	0f 85       	ldd	r16, Y+15	; 0x0f
    63f6:	18 89       	ldd	r17, Y+16	; 0x10
    63f8:	0e 94 49 00 	call	0x92	; 0x92 <__muldi3>
    63fc:	22 2e       	mov	r2, r18
    63fe:	33 2e       	mov	r3, r19
    6400:	44 2e       	mov	r4, r20
    6402:	55 2e       	mov	r5, r21
    6404:	66 2e       	mov	r6, r22
    6406:	77 2e       	mov	r7, r23
    6408:	88 2e       	mov	r8, r24
    640a:	99 2e       	mov	r9, r25
    640c:	a2 2c       	mov	r10, r2
    640e:	b3 2c       	mov	r11, r3
    6410:	c4 2c       	mov	r12, r4
    6412:	d5 2c       	mov	r13, r5
    6414:	e6 2c       	mov	r14, r6
    6416:	f7 2c       	mov	r15, r7
    6418:	08 2d       	mov	r16, r8
    641a:	19 2d       	mov	r17, r9
    641c:	2a 2d       	mov	r18, r10
    641e:	3b 2d       	mov	r19, r11
    6420:	4c 2d       	mov	r20, r12
    6422:	5d 2d       	mov	r21, r13
    6424:	6e 2d       	mov	r22, r14
    6426:	7f 2d       	mov	r23, r15
    6428:	80 2f       	mov	r24, r16
    642a:	91 2f       	mov	r25, r17
    642c:	0f 2e       	mov	r0, r31
    642e:	f0 e8       	ldi	r31, 0x80	; 128
    6430:	af 2e       	mov	r10, r31
    6432:	f0 2d       	mov	r31, r0
    6434:	0f 2e       	mov	r0, r31
    6436:	f4 e8       	ldi	r31, 0x84	; 132
    6438:	bf 2e       	mov	r11, r31
    643a:	f0 2d       	mov	r31, r0
    643c:	0f 2e       	mov	r0, r31
    643e:	fe e1       	ldi	r31, 0x1E	; 30
    6440:	cf 2e       	mov	r12, r31
    6442:	f0 2d       	mov	r31, r0
    6444:	dd 24       	eor	r13, r13
    6446:	ee 24       	eor	r14, r14
    6448:	ff 24       	eor	r15, r15
    644a:	00 e0       	ldi	r16, 0x00	; 0
    644c:	10 e0       	ldi	r17, 0x00	; 0
    644e:	0e 94 70 01 	call	0x2e0	; 0x2e0 <__divdi3>
    6452:	a2 2e       	mov	r10, r18
    6454:	b3 2e       	mov	r11, r19
    6456:	c4 2e       	mov	r12, r20
    6458:	d5 2e       	mov	r13, r21
    645a:	e6 2e       	mov	r14, r22
    645c:	f7 2e       	mov	r15, r23
    645e:	08 2f       	mov	r16, r24
    6460:	19 2f       	mov	r17, r25
    6462:	2a 2d       	mov	r18, r10
    6464:	3b 2d       	mov	r19, r11
    6466:	4c 2d       	mov	r20, r12
    6468:	5d 2d       	mov	r21, r13
    646a:	6e 2d       	mov	r22, r14
    646c:	7f 2d       	mov	r23, r15
    646e:	80 2f       	mov	r24, r16
    6470:	91 2f       	mov	r25, r17
    6472:	29 83       	std	Y+1, r18	; 0x01
    6474:	3a 83       	std	Y+2, r19	; 0x02
    6476:	4b 83       	std	Y+3, r20	; 0x03
    6478:	5c 83       	std	Y+4, r21	; 0x04

	triggerUltrasonic();
    647a:	0e 94 b4 30 	call	0x6168	; 0x6168 <triggerUltrasonic>
	return distance;
    647e:	89 81       	ldd	r24, Y+1	; 0x01
    6480:	9a 81       	ldd	r25, Y+2	; 0x02
    6482:	ab 81       	ldd	r26, Y+3	; 0x03
    6484:	bc 81       	ldd	r27, Y+4	; 0x04





}
    6486:	bc 01       	movw	r22, r24
    6488:	cd 01       	movw	r24, r26
    648a:	64 96       	adiw	r28, 0x14	; 20
    648c:	0f b6       	in	r0, 0x3f	; 63
    648e:	f8 94       	cli
    6490:	de bf       	out	0x3e, r29	; 62
    6492:	0f be       	out	0x3f, r0	; 63
    6494:	cd bf       	out	0x3d, r28	; 61
    6496:	cf 91       	pop	r28
    6498:	df 91       	pop	r29
    649a:	1f 91       	pop	r17
    649c:	0f 91       	pop	r16
    649e:	ff 90       	pop	r15
    64a0:	ef 90       	pop	r14
    64a2:	df 90       	pop	r13
    64a4:	cf 90       	pop	r12
    64a6:	bf 90       	pop	r11
    64a8:	af 90       	pop	r10
    64aa:	9f 90       	pop	r9
    64ac:	8f 90       	pop	r8
    64ae:	7f 90       	pop	r7
    64b0:	6f 90       	pop	r6
    64b2:	5f 90       	pop	r5
    64b4:	4f 90       	pop	r4
    64b6:	3f 90       	pop	r3
    64b8:	2f 90       	pop	r2
    64ba:	08 95       	ret

000064bc <sw_PWMIntialize>:
 * and passing the function as a pointer to that pwm function
 * to be called every on time and every off time
 */

void sw_PWMIntialize(uint8 swPwmNumber,uint8 timerInterruptMode,uint8 prescalermode,uint16 outputCompareValue)
{
    64bc:	ef 92       	push	r14
    64be:	0f 93       	push	r16
    64c0:	df 93       	push	r29
    64c2:	cf 93       	push	r28
    64c4:	cd b7       	in	r28, 0x3d	; 61
    64c6:	de b7       	in	r29, 0x3e	; 62
    64c8:	27 97       	sbiw	r28, 0x07	; 7
    64ca:	0f b6       	in	r0, 0x3f	; 63
    64cc:	f8 94       	cli
    64ce:	de bf       	out	0x3e, r29	; 62
    64d0:	0f be       	out	0x3f, r0	; 63
    64d2:	cd bf       	out	0x3d, r28	; 61
    64d4:	89 83       	std	Y+1, r24	; 0x01
    64d6:	6a 83       	std	Y+2, r22	; 0x02
    64d8:	4b 83       	std	Y+3, r20	; 0x03
    64da:	3d 83       	std	Y+5, r19	; 0x05
    64dc:	2c 83       	std	Y+4, r18	; 0x04

	switch(swPwmNumber)
    64de:	89 81       	ldd	r24, Y+1	; 0x01
    64e0:	28 2f       	mov	r18, r24
    64e2:	30 e0       	ldi	r19, 0x00	; 0
    64e4:	3f 83       	std	Y+7, r19	; 0x07
    64e6:	2e 83       	std	Y+6, r18	; 0x06
    64e8:	8e 81       	ldd	r24, Y+6	; 0x06
    64ea:	9f 81       	ldd	r25, Y+7	; 0x07
    64ec:	81 30       	cpi	r24, 0x01	; 1
    64ee:	91 05       	cpc	r25, r1
    64f0:	a9 f0       	breq	.+42     	; 0x651c <sw_PWMIntialize+0x60>
    64f2:	2e 81       	ldd	r18, Y+6	; 0x06
    64f4:	3f 81       	ldd	r19, Y+7	; 0x07
    64f6:	22 30       	cpi	r18, 0x02	; 2
    64f8:	31 05       	cpc	r19, r1
    64fa:	81 f4       	brne	.+32     	; 0x651c <sw_PWMIntialize+0x60>

		}
		break;

	case SW_PWM_TIMER2:
		switch(timerInterruptMode)
    64fc:	8a 81       	ldd	r24, Y+2	; 0x02
    64fe:	88 2f       	mov	r24, r24
    6500:	90 e0       	ldi	r25, 0x00	; 0
    6502:	82 30       	cpi	r24, 0x02	; 2
    6504:	91 05       	cpc	r25, r1
    6506:	51 f4       	brne	.+20     	; 0x651c <sw_PWMIntialize+0x60>
		{

		case TIMER2_POLLING:
			AVE_timer2Init(TIMER2_NORMAL_MODE,prescalermode,0,0,TIMER2_INTERNAL_CLK,TIMER2_POLLING);
    6508:	80 e0       	ldi	r24, 0x00	; 0
    650a:	6b 81       	ldd	r22, Y+3	; 0x03
    650c:	40 e0       	ldi	r20, 0x00	; 0
    650e:	20 e0       	ldi	r18, 0x00	; 0
    6510:	00 e0       	ldi	r16, 0x00	; 0
    6512:	ee 24       	eor	r14, r14
    6514:	68 94       	set
    6516:	e1 f8       	bld	r14, 1
    6518:	0e 94 71 1c 	call	0x38e2	; 0x38e2 <AVE_timer2Init>
		}


	}

}
    651c:	27 96       	adiw	r28, 0x07	; 7
    651e:	0f b6       	in	r0, 0x3f	; 63
    6520:	f8 94       	cli
    6522:	de bf       	out	0x3e, r29	; 62
    6524:	0f be       	out	0x3f, r0	; 63
    6526:	cd bf       	out	0x3d, r28	; 61
    6528:	cf 91       	pop	r28
    652a:	df 91       	pop	r29
    652c:	0f 91       	pop	r16
    652e:	ef 90       	pop	r14
    6530:	08 95       	ret

00006532 <sw_PWMSelect>:
 *it selects which pulse width modulation for what timer to work !
 *it
 */

void sw_PWMSelect(uint8 swPwmNumber,uint8 dutyCycle,uint16 frequency,void(*ptf)(void))
{
    6532:	df 93       	push	r29
    6534:	cf 93       	push	r28
    6536:	cd b7       	in	r28, 0x3d	; 61
    6538:	de b7       	in	r29, 0x3e	; 62
    653a:	28 97       	sbiw	r28, 0x08	; 8
    653c:	0f b6       	in	r0, 0x3f	; 63
    653e:	f8 94       	cli
    6540:	de bf       	out	0x3e, r29	; 62
    6542:	0f be       	out	0x3f, r0	; 63
    6544:	cd bf       	out	0x3d, r28	; 61
    6546:	89 83       	std	Y+1, r24	; 0x01
    6548:	6a 83       	std	Y+2, r22	; 0x02
    654a:	5c 83       	std	Y+4, r21	; 0x04
    654c:	4b 83       	std	Y+3, r20	; 0x03
    654e:	3e 83       	std	Y+6, r19	; 0x06
    6550:	2d 83       	std	Y+5, r18	; 0x05

	switch(swPwmNumber)
    6552:	89 81       	ldd	r24, Y+1	; 0x01
    6554:	28 2f       	mov	r18, r24
    6556:	30 e0       	ldi	r19, 0x00	; 0
    6558:	38 87       	std	Y+8, r19	; 0x08
    655a:	2f 83       	std	Y+7, r18	; 0x07
    655c:	8f 81       	ldd	r24, Y+7	; 0x07
    655e:	98 85       	ldd	r25, Y+8	; 0x08
    6560:	81 30       	cpi	r24, 0x01	; 1
    6562:	91 05       	cpc	r25, r1
    6564:	89 f0       	breq	.+34     	; 0x6588 <sw_PWMSelect+0x56>
    6566:	2f 81       	ldd	r18, Y+7	; 0x07
    6568:	38 85       	ldd	r19, Y+8	; 0x08
    656a:	22 30       	cpi	r18, 0x02	; 2
    656c:	31 05       	cpc	r19, r1
    656e:	d9 f0       	breq	.+54     	; 0x65a6 <sw_PWMSelect+0x74>
    6570:	8f 81       	ldd	r24, Y+7	; 0x07
    6572:	98 85       	ldd	r25, Y+8	; 0x08
    6574:	00 97       	sbiw	r24, 0x00	; 0
    6576:	29 f5       	brne	.+74     	; 0x65c2 <sw_PWMSelect+0x90>
	{
	case SW_PWM_TIMER0:
		AVE_MTIMER0_PWMSetFunction(ptf);
    6578:	8d 81       	ldd	r24, Y+5	; 0x05
    657a:	9e 81       	ldd	r25, Y+6	; 0x06
    657c:	0e 94 99 12 	call	0x2532	; 0x2532 <AVE_MTIMER0_PWMSetFunction>
		AVE_timer0SwPWM(dutyCycle);
    6580:	8a 81       	ldd	r24, Y+2	; 0x02
    6582:	0e 94 3b 16 	call	0x2c76	; 0x2c76 <AVE_timer0SwPWM>
    6586:	1d c0       	rjmp	.+58     	; 0x65c2 <sw_PWMSelect+0x90>
		break;
	case SW_PWM_TIMER1:
		AVE_MTIMER1_setCallBackPwm(ptf);
    6588:	8d 81       	ldd	r24, Y+5	; 0x05
    658a:	9e 81       	ldd	r25, Y+6	; 0x06
    658c:	0e 94 e5 1b 	call	0x37ca	; 0x37ca <AVE_MTIMER1_setCallBackPwm>
		AVE_MTIMER1_swPwm(frequency,dutyCycle);
    6590:	8b 81       	ldd	r24, Y+3	; 0x03
    6592:	9c 81       	ldd	r25, Y+4	; 0x04
    6594:	cc 01       	movw	r24, r24
    6596:	a0 e0       	ldi	r26, 0x00	; 0
    6598:	b0 e0       	ldi	r27, 0x00	; 0
    659a:	bc 01       	movw	r22, r24
    659c:	cd 01       	movw	r24, r26
    659e:	4a 81       	ldd	r20, Y+2	; 0x02
    65a0:	0e 94 f7 1b 	call	0x37ee	; 0x37ee <AVE_MTIMER1_swPwm>
    65a4:	0e c0       	rjmp	.+28     	; 0x65c2 <sw_PWMSelect+0x90>
		break;
	case SW_PWM_TIMER2:
		AVE_TIMER2_callBackFunctionSet(ptf);
    65a6:	8d 81       	ldd	r24, Y+5	; 0x05
    65a8:	9e 81       	ldd	r25, Y+6	; 0x06
    65aa:	0e 94 18 1e 	call	0x3c30	; 0x3c30 <AVE_TIMER2_callBackFunctionSet>
		AVE_TIMER2_sw_pwm(dutyCycle,frequency);
    65ae:	8b 81       	ldd	r24, Y+3	; 0x03
    65b0:	9c 81       	ldd	r25, Y+4	; 0x04
    65b2:	9c 01       	movw	r18, r24
    65b4:	40 e0       	ldi	r20, 0x00	; 0
    65b6:	50 e0       	ldi	r21, 0x00	; 0
    65b8:	8a 81       	ldd	r24, Y+2	; 0x02
    65ba:	ba 01       	movw	r22, r20
    65bc:	a9 01       	movw	r20, r18
    65be:	0e 94 97 1f 	call	0x3f2e	; 0x3f2e <AVE_TIMER2_sw_pwm>
		break;


	}
}
    65c2:	28 96       	adiw	r28, 0x08	; 8
    65c4:	0f b6       	in	r0, 0x3f	; 63
    65c6:	f8 94       	cli
    65c8:	de bf       	out	0x3e, r29	; 62
    65ca:	0f be       	out	0x3f, r0	; 63
    65cc:	cd bf       	out	0x3d, r28	; 61
    65ce:	cf 91       	pop	r28
    65d0:	df 91       	pop	r29
    65d2:	08 95       	ret

000065d4 <enableSegment>:
#include "SevenSegmentPrivate.h"



void enableSegment(uint8 segmentPort,uint8 segmentPin,uint8 segmentEnable)
{
    65d4:	df 93       	push	r29
    65d6:	cf 93       	push	r28
    65d8:	00 d0       	rcall	.+0      	; 0x65da <enableSegment+0x6>
    65da:	00 d0       	rcall	.+0      	; 0x65dc <enableSegment+0x8>
    65dc:	0f 92       	push	r0
    65de:	cd b7       	in	r28, 0x3d	; 61
    65e0:	de b7       	in	r29, 0x3e	; 62
    65e2:	89 83       	std	Y+1, r24	; 0x01
    65e4:	6a 83       	std	Y+2, r22	; 0x02
    65e6:	4b 83       	std	Y+3, r20	; 0x03


	switch(segmentEnable)
    65e8:	8b 81       	ldd	r24, Y+3	; 0x03
    65ea:	28 2f       	mov	r18, r24
    65ec:	30 e0       	ldi	r19, 0x00	; 0
    65ee:	3d 83       	std	Y+5, r19	; 0x05
    65f0:	2c 83       	std	Y+4, r18	; 0x04
    65f2:	8c 81       	ldd	r24, Y+4	; 0x04
    65f4:	9d 81       	ldd	r25, Y+5	; 0x05
    65f6:	00 97       	sbiw	r24, 0x00	; 0
    65f8:	59 f0       	breq	.+22     	; 0x6610 <enableSegment+0x3c>
    65fa:	2c 81       	ldd	r18, Y+4	; 0x04
    65fc:	3d 81       	ldd	r19, Y+5	; 0x05
    65fe:	21 30       	cpi	r18, 0x01	; 1
    6600:	31 05       	cpc	r19, r1
    6602:	59 f4       	brne	.+22     	; 0x661a <enableSegment+0x46>
	{

	case SEGMENT_ENABLE:
		AVE_gpioPinWrite(segmentPort, segmentPin,HIGH);
    6604:	89 81       	ldd	r24, Y+1	; 0x01
    6606:	6a 81       	ldd	r22, Y+2	; 0x02
    6608:	41 e0       	ldi	r20, 0x01	; 1
    660a:	0e 94 b7 29 	call	0x536e	; 0x536e <AVE_gpioPinWrite>
    660e:	05 c0       	rjmp	.+10     	; 0x661a <enableSegment+0x46>
		break;
	case SEGMENT_DISABLE:
		AVE_gpioPinWrite(segmentPort, segmentPin,LOW);
    6610:	89 81       	ldd	r24, Y+1	; 0x01
    6612:	6a 81       	ldd	r22, Y+2	; 0x02
    6614:	40 e0       	ldi	r20, 0x00	; 0
    6616:	0e 94 b7 29 	call	0x536e	; 0x536e <AVE_gpioPinWrite>
	}




}
    661a:	0f 90       	pop	r0
    661c:	0f 90       	pop	r0
    661e:	0f 90       	pop	r0
    6620:	0f 90       	pop	r0
    6622:	0f 90       	pop	r0
    6624:	cf 91       	pop	r28
    6626:	df 91       	pop	r29
    6628:	08 95       	ret

0000662a <intialize_7SEGMENT>:

void intialize_7SEGMENT(void)
{
    662a:	df 93       	push	r29
    662c:	cf 93       	push	r28
    662e:	00 d0       	rcall	.+0      	; 0x6630 <intialize_7SEGMENT+0x6>
    6630:	0f 92       	push	r0
    6632:	cd b7       	in	r28, 0x3d	; 61
    6634:	de b7       	in	r29, 0x3e	; 62


	for(uint8 i = 0;i<NUMBER_OF_7SEGMENT;i++)
    6636:	1b 82       	std	Y+3, r1	; 0x03
    6638:	29 c0       	rjmp	.+82     	; 0x668c <intialize_7SEGMENT+0x62>
	{

		AVE_gpioPinDirection(arrOfEnablePorts[i],arrOfEnablePins[i],OUTPUT);
    663a:	8b 81       	ldd	r24, Y+3	; 0x03
    663c:	88 2f       	mov	r24, r24
    663e:	90 e0       	ldi	r25, 0x00	; 0
    6640:	fc 01       	movw	r30, r24
    6642:	e5 57       	subi	r30, 0x75	; 117
    6644:	fe 4f       	sbci	r31, 0xFE	; 254
    6646:	20 81       	ld	r18, Z
    6648:	8b 81       	ldd	r24, Y+3	; 0x03
    664a:	88 2f       	mov	r24, r24
    664c:	90 e0       	ldi	r25, 0x00	; 0
    664e:	fc 01       	movw	r30, r24
    6650:	e3 57       	subi	r30, 0x73	; 115
    6652:	fe 4f       	sbci	r31, 0xFE	; 254
    6654:	90 81       	ld	r25, Z
    6656:	82 2f       	mov	r24, r18
    6658:	69 2f       	mov	r22, r25
    665a:	42 e0       	ldi	r20, 0x02	; 2
    665c:	0e 94 76 28 	call	0x50ec	; 0x50ec <AVE_gpioPinDirection>
		AVE_gpioPinWrite(arrOfEnablePorts[i],arrOfEnablePins[i],LOW);
    6660:	8b 81       	ldd	r24, Y+3	; 0x03
    6662:	88 2f       	mov	r24, r24
    6664:	90 e0       	ldi	r25, 0x00	; 0
    6666:	fc 01       	movw	r30, r24
    6668:	e5 57       	subi	r30, 0x75	; 117
    666a:	fe 4f       	sbci	r31, 0xFE	; 254
    666c:	20 81       	ld	r18, Z
    666e:	8b 81       	ldd	r24, Y+3	; 0x03
    6670:	88 2f       	mov	r24, r24
    6672:	90 e0       	ldi	r25, 0x00	; 0
    6674:	fc 01       	movw	r30, r24
    6676:	e3 57       	subi	r30, 0x73	; 115
    6678:	fe 4f       	sbci	r31, 0xFE	; 254
    667a:	90 81       	ld	r25, Z
    667c:	82 2f       	mov	r24, r18
    667e:	69 2f       	mov	r22, r25
    6680:	40 e0       	ldi	r20, 0x00	; 0
    6682:	0e 94 b7 29 	call	0x536e	; 0x536e <AVE_gpioPinWrite>

void intialize_7SEGMENT(void)
{


	for(uint8 i = 0;i<NUMBER_OF_7SEGMENT;i++)
    6686:	8b 81       	ldd	r24, Y+3	; 0x03
    6688:	8f 5f       	subi	r24, 0xFF	; 255
    668a:	8b 83       	std	Y+3, r24	; 0x03
    668c:	8b 81       	ldd	r24, Y+3	; 0x03
    668e:	82 30       	cpi	r24, 0x02	; 2
    6690:	a0 f2       	brcs	.-88     	; 0x663a <intialize_7SEGMENT+0x10>

		AVE_gpioPinDirection(arrOfEnablePorts[i],arrOfEnablePins[i],OUTPUT);
		AVE_gpioPinWrite(arrOfEnablePorts[i],arrOfEnablePins[i],LOW);
	}

	for(uint8 i = 0;i<NUMBER_OF_7SEGMENT;i++)
    6692:	1a 82       	std	Y+2, r1	; 0x02
    6694:	32 c0       	rjmp	.+100    	; 0x66fa <intialize_7SEGMENT+0xd0>
	{
		for(uint8 j = 0;j<NUMBER_OF_PINS;j++)
    6696:	19 82       	std	Y+1, r1	; 0x01
    6698:	2a c0       	rjmp	.+84     	; 0x66ee <intialize_7SEGMENT+0xc4>
		{
			AVE_gpioPinDirection(arrOfPinsPorts[i][j],arrOfPins[i][j],OUTPUT);
    669a:	8a 81       	ldd	r24, Y+2	; 0x02
    669c:	48 2f       	mov	r20, r24
    669e:	50 e0       	ldi	r21, 0x00	; 0
    66a0:	89 81       	ldd	r24, Y+1	; 0x01
    66a2:	28 2f       	mov	r18, r24
    66a4:	30 e0       	ldi	r19, 0x00	; 0
    66a6:	ca 01       	movw	r24, r20
    66a8:	88 0f       	add	r24, r24
    66aa:	99 1f       	adc	r25, r25
    66ac:	88 0f       	add	r24, r24
    66ae:	99 1f       	adc	r25, r25
    66b0:	82 0f       	add	r24, r18
    66b2:	93 1f       	adc	r25, r19
    66b4:	fc 01       	movw	r30, r24
    66b6:	ed 57       	subi	r30, 0x7D	; 125
    66b8:	fe 4f       	sbci	r31, 0xFE	; 254
    66ba:	60 81       	ld	r22, Z
    66bc:	8a 81       	ldd	r24, Y+2	; 0x02
    66be:	48 2f       	mov	r20, r24
    66c0:	50 e0       	ldi	r21, 0x00	; 0
    66c2:	89 81       	ldd	r24, Y+1	; 0x01
    66c4:	28 2f       	mov	r18, r24
    66c6:	30 e0       	ldi	r19, 0x00	; 0
    66c8:	ca 01       	movw	r24, r20
    66ca:	88 0f       	add	r24, r24
    66cc:	99 1f       	adc	r25, r25
    66ce:	88 0f       	add	r24, r24
    66d0:	99 1f       	adc	r25, r25
    66d2:	82 0f       	add	r24, r18
    66d4:	93 1f       	adc	r25, r19
    66d6:	fc 01       	movw	r30, r24
    66d8:	e5 58       	subi	r30, 0x85	; 133
    66da:	fe 4f       	sbci	r31, 0xFE	; 254
    66dc:	90 81       	ld	r25, Z
    66de:	86 2f       	mov	r24, r22
    66e0:	69 2f       	mov	r22, r25
    66e2:	42 e0       	ldi	r20, 0x02	; 2
    66e4:	0e 94 76 28 	call	0x50ec	; 0x50ec <AVE_gpioPinDirection>
		AVE_gpioPinWrite(arrOfEnablePorts[i],arrOfEnablePins[i],LOW);
	}

	for(uint8 i = 0;i<NUMBER_OF_7SEGMENT;i++)
	{
		for(uint8 j = 0;j<NUMBER_OF_PINS;j++)
    66e8:	89 81       	ldd	r24, Y+1	; 0x01
    66ea:	8f 5f       	subi	r24, 0xFF	; 255
    66ec:	89 83       	std	Y+1, r24	; 0x01
    66ee:	89 81       	ldd	r24, Y+1	; 0x01
    66f0:	84 30       	cpi	r24, 0x04	; 4
    66f2:	98 f2       	brcs	.-90     	; 0x669a <intialize_7SEGMENT+0x70>

		AVE_gpioPinDirection(arrOfEnablePorts[i],arrOfEnablePins[i],OUTPUT);
		AVE_gpioPinWrite(arrOfEnablePorts[i],arrOfEnablePins[i],LOW);
	}

	for(uint8 i = 0;i<NUMBER_OF_7SEGMENT;i++)
    66f4:	8a 81       	ldd	r24, Y+2	; 0x02
    66f6:	8f 5f       	subi	r24, 0xFF	; 255
    66f8:	8a 83       	std	Y+2, r24	; 0x02
    66fa:	8a 81       	ldd	r24, Y+2	; 0x02
    66fc:	82 30       	cpi	r24, 0x02	; 2
    66fe:	58 f2       	brcs	.-106    	; 0x6696 <intialize_7SEGMENT+0x6c>
		{
			AVE_gpioPinDirection(arrOfPinsPorts[i][j],arrOfPins[i][j],OUTPUT);
			//AVE_gpioPinWrite(arrOfPinsPorts[i][j],arrOfPins[i][j],HIGH);
		}
	}
}
    6700:	0f 90       	pop	r0
    6702:	0f 90       	pop	r0
    6704:	0f 90       	pop	r0
    6706:	cf 91       	pop	r28
    6708:	df 91       	pop	r29
    670a:	08 95       	ret

0000670c <visualizeNumber>:


void visualizeNumber(uint8 number)
{
    670c:	df 93       	push	r29
    670e:	cf 93       	push	r28
    6710:	0f 92       	push	r0
    6712:	cd b7       	in	r28, 0x3d	; 61
    6714:	de b7       	in	r29, 0x3e	; 62
    6716:	89 83       	std	Y+1, r24	; 0x01

	if(number<=9)
    6718:	89 81       	ldd	r24, Y+1	; 0x01
    671a:	8a 30       	cpi	r24, 0x0A	; 10
    671c:	b0 f4       	brcc	.+44     	; 0x674a <visualizeNumber+0x3e>
	{
		enableSegment(PORTD,BIT3,SEGMENT_DISABLE);
    671e:	83 e0       	ldi	r24, 0x03	; 3
    6720:	68 e0       	ldi	r22, 0x08	; 8
    6722:	40 e0       	ldi	r20, 0x00	; 0
    6724:	0e 94 ea 32 	call	0x65d4	; 0x65d4 <enableSegment>
		enableSegment(PORTD,BIT2,SEGMENT_ENABLE);
    6728:	83 e0       	ldi	r24, 0x03	; 3
    672a:	64 e0       	ldi	r22, 0x04	; 4
    672c:	41 e0       	ldi	r20, 0x01	; 1
    672e:	0e 94 ea 32 	call	0x65d4	; 0x65d4 <enableSegment>

		AVE_gpioLowerNibbleWrite(PORTB,arrOfAvailableNumbers[number]);
    6732:	89 81       	ldd	r24, Y+1	; 0x01
    6734:	88 2f       	mov	r24, r24
    6736:	90 e0       	ldi	r25, 0x00	; 0
    6738:	fc 01       	movw	r30, r24
    673a:	e1 57       	subi	r30, 0x71	; 113
    673c:	fe 4f       	sbci	r31, 0xFE	; 254
    673e:	90 81       	ld	r25, Z
    6740:	81 e0       	ldi	r24, 0x01	; 1
    6742:	69 2f       	mov	r22, r25
    6744:	0e 94 64 2e 	call	0x5cc8	; 0x5cc8 <AVE_gpioLowerNibbleWrite>
    6748:	39 c0       	rjmp	.+114    	; 0x67bc <visualizeNumber+0xb0>

	}
	else
	{

		enableSegment(PORTD,BIT3,SEGMENT_DISABLE);
    674a:	83 e0       	ldi	r24, 0x03	; 3
    674c:	68 e0       	ldi	r22, 0x08	; 8
    674e:	40 e0       	ldi	r20, 0x00	; 0
    6750:	0e 94 ea 32 	call	0x65d4	; 0x65d4 <enableSegment>
		enableSegment(PORTD,BIT2,SEGMENT_ENABLE);
    6754:	83 e0       	ldi	r24, 0x03	; 3
    6756:	64 e0       	ldi	r22, 0x04	; 4
    6758:	41 e0       	ldi	r20, 0x01	; 1
    675a:	0e 94 ea 32 	call	0x65d4	; 0x65d4 <enableSegment>
		AVE_gpioLowerNibbleWrite(PORTB,((arrOfAvailableNumbers[number])));
    675e:	89 81       	ldd	r24, Y+1	; 0x01
    6760:	88 2f       	mov	r24, r24
    6762:	90 e0       	ldi	r25, 0x00	; 0
    6764:	fc 01       	movw	r30, r24
    6766:	e1 57       	subi	r30, 0x71	; 113
    6768:	fe 4f       	sbci	r31, 0xFE	; 254
    676a:	90 81       	ld	r25, Z
    676c:	81 e0       	ldi	r24, 0x01	; 1
    676e:	69 2f       	mov	r22, r25
    6770:	0e 94 64 2e 	call	0x5cc8	; 0x5cc8 <AVE_gpioLowerNibbleWrite>
		SW_Delay_ms(5);
    6774:	65 e0       	ldi	r22, 0x05	; 5
    6776:	70 e0       	ldi	r23, 0x00	; 0
    6778:	80 e0       	ldi	r24, 0x00	; 0
    677a:	90 e0       	ldi	r25, 0x00	; 0
    677c:	0e 94 41 30 	call	0x6082	; 0x6082 <SW_Delay_ms>
		enableSegment(PORTD,BIT2,SEGMENT_DISABLE);
    6780:	83 e0       	ldi	r24, 0x03	; 3
    6782:	64 e0       	ldi	r22, 0x04	; 4
    6784:	40 e0       	ldi	r20, 0x00	; 0
    6786:	0e 94 ea 32 	call	0x65d4	; 0x65d4 <enableSegment>
		enableSegment(PORTD,BIT3,SEGMENT_ENABLE);
    678a:	83 e0       	ldi	r24, 0x03	; 3
    678c:	68 e0       	ldi	r22, 0x08	; 8
    678e:	41 e0       	ldi	r20, 0x01	; 1
    6790:	0e 94 ea 32 	call	0x65d4	; 0x65d4 <enableSegment>
		AVE_gpioLowerNibbleWrite(PORTB,((arrOfAvailableNumbers[number]>>4)));
    6794:	89 81       	ldd	r24, Y+1	; 0x01
    6796:	88 2f       	mov	r24, r24
    6798:	90 e0       	ldi	r25, 0x00	; 0
    679a:	fc 01       	movw	r30, r24
    679c:	e1 57       	subi	r30, 0x71	; 113
    679e:	fe 4f       	sbci	r31, 0xFE	; 254
    67a0:	80 81       	ld	r24, Z
    67a2:	98 2f       	mov	r25, r24
    67a4:	92 95       	swap	r25
    67a6:	9f 70       	andi	r25, 0x0F	; 15
    67a8:	81 e0       	ldi	r24, 0x01	; 1
    67aa:	69 2f       	mov	r22, r25
    67ac:	0e 94 64 2e 	call	0x5cc8	; 0x5cc8 <AVE_gpioLowerNibbleWrite>
		SW_Delay_ms(5);
    67b0:	65 e0       	ldi	r22, 0x05	; 5
    67b2:	70 e0       	ldi	r23, 0x00	; 0
    67b4:	80 e0       	ldi	r24, 0x00	; 0
    67b6:	90 e0       	ldi	r25, 0x00	; 0
    67b8:	0e 94 41 30 	call	0x6082	; 0x6082 <SW_Delay_ms>

	}



}
    67bc:	0f 90       	pop	r0
    67be:	cf 91       	pop	r28
    67c0:	df 91       	pop	r29
    67c2:	08 95       	ret

000067c4 <intializePButtons>:

#include "PushButtonPrivate.h"


void intializePButtons(void)
{
    67c4:	df 93       	push	r29
    67c6:	cf 93       	push	r28
    67c8:	0f 92       	push	r0
    67ca:	cd b7       	in	r28, 0x3d	; 61
    67cc:	de b7       	in	r29, 0x3e	; 62


	for(uint8 i =0;i<NUMBER_OF_PBUTTONS;i++)
    67ce:	19 82       	std	Y+1, r1	; 0x01
    67d0:	16 c0       	rjmp	.+44     	; 0x67fe <intializePButtons+0x3a>
	{
		AVE_gpioPinDirection(PBUTTONS_PORTS[i],PBUTTONS_BITS[i],INPUT);
    67d2:	89 81       	ldd	r24, Y+1	; 0x01
    67d4:	88 2f       	mov	r24, r24
    67d6:	90 e0       	ldi	r25, 0x00	; 0
    67d8:	fc 01       	movw	r30, r24
    67da:	ef 55       	subi	r30, 0x5F	; 95
    67dc:	fe 4f       	sbci	r31, 0xFE	; 254
    67de:	20 81       	ld	r18, Z
    67e0:	89 81       	ldd	r24, Y+1	; 0x01
    67e2:	88 2f       	mov	r24, r24
    67e4:	90 e0       	ldi	r25, 0x00	; 0
    67e6:	fc 01       	movw	r30, r24
    67e8:	e1 56       	subi	r30, 0x61	; 97
    67ea:	fe 4f       	sbci	r31, 0xFE	; 254
    67ec:	90 81       	ld	r25, Z
    67ee:	82 2f       	mov	r24, r18
    67f0:	69 2f       	mov	r22, r25
    67f2:	40 e0       	ldi	r20, 0x00	; 0
    67f4:	0e 94 76 28 	call	0x50ec	; 0x50ec <AVE_gpioPinDirection>

void intializePButtons(void)
{


	for(uint8 i =0;i<NUMBER_OF_PBUTTONS;i++)
    67f8:	89 81       	ldd	r24, Y+1	; 0x01
    67fa:	8f 5f       	subi	r24, 0xFF	; 255
    67fc:	89 83       	std	Y+1, r24	; 0x01
    67fe:	89 81       	ldd	r24, Y+1	; 0x01
    6800:	82 30       	cpi	r24, 0x02	; 2
    6802:	38 f3       	brcs	.-50     	; 0x67d2 <intializePButtons+0xe>
	{
		AVE_gpioPinDirection(PBUTTONS_PORTS[i],PBUTTONS_BITS[i],INPUT);
	}

}
    6804:	0f 90       	pop	r0
    6806:	cf 91       	pop	r28
    6808:	df 91       	pop	r29
    680a:	08 95       	ret

0000680c <readPButton>:

void readPButton(uint8 portNumber,uint8 pinNumber,uint8* returnedValue)
{
    680c:	df 93       	push	r29
    680e:	cf 93       	push	r28
    6810:	00 d0       	rcall	.+0      	; 0x6812 <readPButton+0x6>
    6812:	00 d0       	rcall	.+0      	; 0x6814 <readPButton+0x8>
    6814:	0f 92       	push	r0
    6816:	cd b7       	in	r28, 0x3d	; 61
    6818:	de b7       	in	r29, 0x3e	; 62
    681a:	8a 83       	std	Y+2, r24	; 0x02
    681c:	6b 83       	std	Y+3, r22	; 0x03
    681e:	5d 83       	std	Y+5, r21	; 0x05
    6820:	4c 83       	std	Y+4, r20	; 0x04
	uint8 value;
	AVE_gpioPinRead(portNumber,pinNumber,&value);
    6822:	8a 81       	ldd	r24, Y+2	; 0x02
    6824:	6b 81       	ldd	r22, Y+3	; 0x03
    6826:	9e 01       	movw	r18, r28
    6828:	2f 5f       	subi	r18, 0xFF	; 255
    682a:	3f 4f       	sbci	r19, 0xFF	; 255
    682c:	a9 01       	movw	r20, r18
    682e:	0e 94 25 2b 	call	0x564a	; 0x564a <AVE_gpioPinRead>
	*returnedValue = value;
    6832:	89 81       	ldd	r24, Y+1	; 0x01
    6834:	ec 81       	ldd	r30, Y+4	; 0x04
    6836:	fd 81       	ldd	r31, Y+5	; 0x05
    6838:	80 83       	st	Z, r24


}
    683a:	0f 90       	pop	r0
    683c:	0f 90       	pop	r0
    683e:	0f 90       	pop	r0
    6840:	0f 90       	pop	r0
    6842:	0f 90       	pop	r0
    6844:	cf 91       	pop	r28
    6846:	df 91       	pop	r29
    6848:	08 95       	ret

0000684a <AVE_InitializeLeds>:
#include "LedPrivate.h"



void AVE_InitializeLeds(void)
{
    684a:	df 93       	push	r29
    684c:	cf 93       	push	r28
    684e:	00 d0       	rcall	.+0      	; 0x6850 <AVE_InitializeLeds+0x6>
    6850:	cd b7       	in	r28, 0x3d	; 61
    6852:	de b7       	in	r29, 0x3e	; 62
	for(uint8 i =0;i<NUMBER_OF_LEDS;i++)
    6854:	1a 82       	std	Y+2, r1	; 0x02
    6856:	16 c0       	rjmp	.+44     	; 0x6884 <AVE_InitializeLeds+0x3a>
	{
		AVE_gpioPinDirection(LEDS_PORTS[i],LEDS_BITS[i],OUTPUT);
    6858:	8a 81       	ldd	r24, Y+2	; 0x02
    685a:	88 2f       	mov	r24, r24
    685c:	90 e0       	ldi	r25, 0x00	; 0
    685e:	fc 01       	movw	r30, r24
    6860:	e9 55       	subi	r30, 0x59	; 89
    6862:	fe 4f       	sbci	r31, 0xFE	; 254
    6864:	20 81       	ld	r18, Z
    6866:	8a 81       	ldd	r24, Y+2	; 0x02
    6868:	88 2f       	mov	r24, r24
    686a:	90 e0       	ldi	r25, 0x00	; 0
    686c:	fc 01       	movw	r30, r24
    686e:	ed 55       	subi	r30, 0x5D	; 93
    6870:	fe 4f       	sbci	r31, 0xFE	; 254
    6872:	90 81       	ld	r25, Z
    6874:	82 2f       	mov	r24, r18
    6876:	69 2f       	mov	r22, r25
    6878:	42 e0       	ldi	r20, 0x02	; 2
    687a:	0e 94 76 28 	call	0x50ec	; 0x50ec <AVE_gpioPinDirection>



void AVE_InitializeLeds(void)
{
	for(uint8 i =0;i<NUMBER_OF_LEDS;i++)
    687e:	8a 81       	ldd	r24, Y+2	; 0x02
    6880:	8f 5f       	subi	r24, 0xFF	; 255
    6882:	8a 83       	std	Y+2, r24	; 0x02
    6884:	8a 81       	ldd	r24, Y+2	; 0x02
    6886:	84 30       	cpi	r24, 0x04	; 4
    6888:	38 f3       	brcs	.-50     	; 0x6858 <AVE_InitializeLeds+0xe>
	{
		AVE_gpioPinDirection(LEDS_PORTS[i],LEDS_BITS[i],OUTPUT);

	}

	for(uint8 i =0;i<NUMBER_OF_LEDS;i++)
    688a:	19 82       	std	Y+1, r1	; 0x01
    688c:	1d c0       	rjmp	.+58     	; 0x68c8 <AVE_InitializeLeds+0x7e>
	{
		AVE_gpioPinWrite(LEDS_PORTS[i],LEDS_BITS[i],LEDS_VALUES[i]);
    688e:	89 81       	ldd	r24, Y+1	; 0x01
    6890:	88 2f       	mov	r24, r24
    6892:	90 e0       	ldi	r25, 0x00	; 0
    6894:	fc 01       	movw	r30, r24
    6896:	e9 55       	subi	r30, 0x59	; 89
    6898:	fe 4f       	sbci	r31, 0xFE	; 254
    689a:	20 81       	ld	r18, Z
    689c:	89 81       	ldd	r24, Y+1	; 0x01
    689e:	88 2f       	mov	r24, r24
    68a0:	90 e0       	ldi	r25, 0x00	; 0
    68a2:	fc 01       	movw	r30, r24
    68a4:	ed 55       	subi	r30, 0x5D	; 93
    68a6:	fe 4f       	sbci	r31, 0xFE	; 254
    68a8:	30 81       	ld	r19, Z
    68aa:	89 81       	ldd	r24, Y+1	; 0x01
    68ac:	88 2f       	mov	r24, r24
    68ae:	90 e0       	ldi	r25, 0x00	; 0
    68b0:	fc 01       	movw	r30, r24
    68b2:	e2 51       	subi	r30, 0x12	; 18
    68b4:	fe 4f       	sbci	r31, 0xFE	; 254
    68b6:	90 81       	ld	r25, Z
    68b8:	82 2f       	mov	r24, r18
    68ba:	63 2f       	mov	r22, r19
    68bc:	49 2f       	mov	r20, r25
    68be:	0e 94 b7 29 	call	0x536e	; 0x536e <AVE_gpioPinWrite>
	{
		AVE_gpioPinDirection(LEDS_PORTS[i],LEDS_BITS[i],OUTPUT);

	}

	for(uint8 i =0;i<NUMBER_OF_LEDS;i++)
    68c2:	89 81       	ldd	r24, Y+1	; 0x01
    68c4:	8f 5f       	subi	r24, 0xFF	; 255
    68c6:	89 83       	std	Y+1, r24	; 0x01
    68c8:	89 81       	ldd	r24, Y+1	; 0x01
    68ca:	84 30       	cpi	r24, 0x04	; 4
    68cc:	00 f3       	brcs	.-64     	; 0x688e <AVE_InitializeLeds+0x44>
	{
		AVE_gpioPinWrite(LEDS_PORTS[i],LEDS_BITS[i],LEDS_VALUES[i]);
	}

}
    68ce:	0f 90       	pop	r0
    68d0:	0f 90       	pop	r0
    68d2:	cf 91       	pop	r28
    68d4:	df 91       	pop	r29
    68d6:	08 95       	ret

000068d8 <AVEManipulateLeds>:

void AVEManipulateLeds(uint8 state)
{
    68d8:	df 93       	push	r29
    68da:	cf 93       	push	r28
    68dc:	00 d0       	rcall	.+0      	; 0x68de <AVEManipulateLeds+0x6>
    68de:	00 d0       	rcall	.+0      	; 0x68e0 <AVEManipulateLeds+0x8>
    68e0:	0f 92       	push	r0
    68e2:	cd b7       	in	r28, 0x3d	; 61
    68e4:	de b7       	in	r29, 0x3e	; 62
    68e6:	8b 83       	std	Y+3, r24	; 0x03

	switch(state)
    68e8:	8b 81       	ldd	r24, Y+3	; 0x03
    68ea:	28 2f       	mov	r18, r24
    68ec:	30 e0       	ldi	r19, 0x00	; 0
    68ee:	3d 83       	std	Y+5, r19	; 0x05
    68f0:	2c 83       	std	Y+4, r18	; 0x04
    68f2:	8c 81       	ldd	r24, Y+4	; 0x04
    68f4:	9d 81       	ldd	r25, Y+5	; 0x05
    68f6:	00 97       	sbiw	r24, 0x00	; 0
    68f8:	09 f1       	breq	.+66     	; 0x693c <AVEManipulateLeds+0x64>
    68fa:	2c 81       	ldd	r18, Y+4	; 0x04
    68fc:	3d 81       	ldd	r19, Y+5	; 0x05
    68fe:	21 30       	cpi	r18, 0x01	; 1
    6900:	31 05       	cpc	r19, r1
    6902:	b9 f5       	brne	.+110    	; 0x6972 <AVEManipulateLeds+0x9a>
	{
	case LED_ON:
		for(uint8 i =0;i<NUMBER_OF_LEDS;i++)
    6904:	1a 82       	std	Y+2, r1	; 0x02
    6906:	16 c0       	rjmp	.+44     	; 0x6934 <AVEManipulateLeds+0x5c>
			{
				AVE_gpioPinWrite(LEDS_PORTS[i],LEDS_BITS[i],HIGH);
    6908:	8a 81       	ldd	r24, Y+2	; 0x02
    690a:	88 2f       	mov	r24, r24
    690c:	90 e0       	ldi	r25, 0x00	; 0
    690e:	fc 01       	movw	r30, r24
    6910:	e9 55       	subi	r30, 0x59	; 89
    6912:	fe 4f       	sbci	r31, 0xFE	; 254
    6914:	20 81       	ld	r18, Z
    6916:	8a 81       	ldd	r24, Y+2	; 0x02
    6918:	88 2f       	mov	r24, r24
    691a:	90 e0       	ldi	r25, 0x00	; 0
    691c:	fc 01       	movw	r30, r24
    691e:	ed 55       	subi	r30, 0x5D	; 93
    6920:	fe 4f       	sbci	r31, 0xFE	; 254
    6922:	90 81       	ld	r25, Z
    6924:	82 2f       	mov	r24, r18
    6926:	69 2f       	mov	r22, r25
    6928:	41 e0       	ldi	r20, 0x01	; 1
    692a:	0e 94 b7 29 	call	0x536e	; 0x536e <AVE_gpioPinWrite>
{

	switch(state)
	{
	case LED_ON:
		for(uint8 i =0;i<NUMBER_OF_LEDS;i++)
    692e:	8a 81       	ldd	r24, Y+2	; 0x02
    6930:	8f 5f       	subi	r24, 0xFF	; 255
    6932:	8a 83       	std	Y+2, r24	; 0x02
    6934:	8a 81       	ldd	r24, Y+2	; 0x02
    6936:	84 30       	cpi	r24, 0x04	; 4
    6938:	38 f3       	brcs	.-50     	; 0x6908 <AVEManipulateLeds+0x30>
    693a:	1b c0       	rjmp	.+54     	; 0x6972 <AVEManipulateLeds+0x9a>
			{
				AVE_gpioPinWrite(LEDS_PORTS[i],LEDS_BITS[i],HIGH);
			}
		break;
	case LED_OFF:
		for(uint8 i =0;i<NUMBER_OF_LEDS;i++)
    693c:	19 82       	std	Y+1, r1	; 0x01
    693e:	16 c0       	rjmp	.+44     	; 0x696c <AVEManipulateLeds+0x94>
			{
				AVE_gpioPinWrite(LEDS_PORTS[i],LEDS_BITS[i],LOW);
    6940:	89 81       	ldd	r24, Y+1	; 0x01
    6942:	88 2f       	mov	r24, r24
    6944:	90 e0       	ldi	r25, 0x00	; 0
    6946:	fc 01       	movw	r30, r24
    6948:	e9 55       	subi	r30, 0x59	; 89
    694a:	fe 4f       	sbci	r31, 0xFE	; 254
    694c:	20 81       	ld	r18, Z
    694e:	89 81       	ldd	r24, Y+1	; 0x01
    6950:	88 2f       	mov	r24, r24
    6952:	90 e0       	ldi	r25, 0x00	; 0
    6954:	fc 01       	movw	r30, r24
    6956:	ed 55       	subi	r30, 0x5D	; 93
    6958:	fe 4f       	sbci	r31, 0xFE	; 254
    695a:	90 81       	ld	r25, Z
    695c:	82 2f       	mov	r24, r18
    695e:	69 2f       	mov	r22, r25
    6960:	40 e0       	ldi	r20, 0x00	; 0
    6962:	0e 94 b7 29 	call	0x536e	; 0x536e <AVE_gpioPinWrite>
			{
				AVE_gpioPinWrite(LEDS_PORTS[i],LEDS_BITS[i],HIGH);
			}
		break;
	case LED_OFF:
		for(uint8 i =0;i<NUMBER_OF_LEDS;i++)
    6966:	89 81       	ldd	r24, Y+1	; 0x01
    6968:	8f 5f       	subi	r24, 0xFF	; 255
    696a:	89 83       	std	Y+1, r24	; 0x01
    696c:	89 81       	ldd	r24, Y+1	; 0x01
    696e:	84 30       	cpi	r24, 0x04	; 4
    6970:	38 f3       	brcs	.-50     	; 0x6940 <AVEManipulateLeds+0x68>
				AVE_gpioPinWrite(LEDS_PORTS[i],LEDS_BITS[i],LOW);
			}
		break;

	}
}
    6972:	0f 90       	pop	r0
    6974:	0f 90       	pop	r0
    6976:	0f 90       	pop	r0
    6978:	0f 90       	pop	r0
    697a:	0f 90       	pop	r0
    697c:	cf 91       	pop	r28
    697e:	df 91       	pop	r29
    6980:	08 95       	ret

00006982 <AVEManipulateLed>:

void AVEManipulateLed(uint8 ledNumber,uint8 ledPort,uint8 state)
{
    6982:	df 93       	push	r29
    6984:	cf 93       	push	r28
    6986:	00 d0       	rcall	.+0      	; 0x6988 <AVEManipulateLed+0x6>
    6988:	00 d0       	rcall	.+0      	; 0x698a <AVEManipulateLed+0x8>
    698a:	0f 92       	push	r0
    698c:	cd b7       	in	r28, 0x3d	; 61
    698e:	de b7       	in	r29, 0x3e	; 62
    6990:	89 83       	std	Y+1, r24	; 0x01
    6992:	6a 83       	std	Y+2, r22	; 0x02
    6994:	4b 83       	std	Y+3, r20	; 0x03

	switch(state)
    6996:	8b 81       	ldd	r24, Y+3	; 0x03
    6998:	28 2f       	mov	r18, r24
    699a:	30 e0       	ldi	r19, 0x00	; 0
    699c:	3d 83       	std	Y+5, r19	; 0x05
    699e:	2c 83       	std	Y+4, r18	; 0x04
    69a0:	8c 81       	ldd	r24, Y+4	; 0x04
    69a2:	9d 81       	ldd	r25, Y+5	; 0x05
    69a4:	00 97       	sbiw	r24, 0x00	; 0
    69a6:	59 f0       	breq	.+22     	; 0x69be <AVEManipulateLed+0x3c>
    69a8:	2c 81       	ldd	r18, Y+4	; 0x04
    69aa:	3d 81       	ldd	r19, Y+5	; 0x05
    69ac:	21 30       	cpi	r18, 0x01	; 1
    69ae:	31 05       	cpc	r19, r1
    69b0:	59 f4       	brne	.+22     	; 0x69c8 <AVEManipulateLed+0x46>
	{
	case LED_ON:
		AVE_gpioPinWrite(ledPort,ledNumber,HIGH);
    69b2:	8a 81       	ldd	r24, Y+2	; 0x02
    69b4:	69 81       	ldd	r22, Y+1	; 0x01
    69b6:	41 e0       	ldi	r20, 0x01	; 1
    69b8:	0e 94 b7 29 	call	0x536e	; 0x536e <AVE_gpioPinWrite>
    69bc:	05 c0       	rjmp	.+10     	; 0x69c8 <AVEManipulateLed+0x46>
		break;
	case LED_OFF:
		AVE_gpioPinWrite(ledPort,ledNumber,LOW);
    69be:	8a 81       	ldd	r24, Y+2	; 0x02
    69c0:	69 81       	ldd	r22, Y+1	; 0x01
    69c2:	40 e0       	ldi	r20, 0x00	; 0
    69c4:	0e 94 b7 29 	call	0x536e	; 0x536e <AVE_gpioPinWrite>
		break;

	}
}
    69c8:	0f 90       	pop	r0
    69ca:	0f 90       	pop	r0
    69cc:	0f 90       	pop	r0
    69ce:	0f 90       	pop	r0
    69d0:	0f 90       	pop	r0
    69d2:	cf 91       	pop	r28
    69d4:	df 91       	pop	r29
    69d6:	08 95       	ret

000069d8 <startCalculationIcu>:
uint8 flag2 = 0;
uint8 counts = 0;


 void startCalculationIcu(void)
{
    69d8:	af 92       	push	r10
    69da:	bf 92       	push	r11
    69dc:	cf 92       	push	r12
    69de:	df 92       	push	r13
    69e0:	ef 92       	push	r14
    69e2:	ff 92       	push	r15
    69e4:	0f 93       	push	r16
    69e6:	1f 93       	push	r17
    69e8:	df 93       	push	r29
    69ea:	cf 93       	push	r28
    69ec:	cd b7       	in	r28, 0x3d	; 61
    69ee:	de b7       	in	r29, 0x3e	; 62
	static uint32 T0,T1;

	if(entrant == 0)
    69f0:	80 91 f2 01 	lds	r24, 0x01F2
    69f4:	88 23       	and	r24, r24
    69f6:	e9 f4       	brne	.+58     	; 0x6a32 <startCalculationIcu+0x5a>
	{
		AVEManipulateLed(BIT7,PORTB,LED_ON);
    69f8:	80 e8       	ldi	r24, 0x80	; 128
    69fa:	61 e0       	ldi	r22, 0x01	; 1
    69fc:	41 e0       	ldi	r20, 0x01	; 1
    69fe:	0e 94 c1 34 	call	0x6982	; 0x6982 <AVEManipulateLed>

		T0 = AVE_MTIMER0_read();
    6a02:	0e 94 37 13 	call	0x266e	; 0x266e <AVE_MTIMER0_read>
    6a06:	88 2f       	mov	r24, r24
    6a08:	90 e0       	ldi	r25, 0x00	; 0
    6a0a:	a0 e0       	ldi	r26, 0x00	; 0
    6a0c:	b0 e0       	ldi	r27, 0x00	; 0
    6a0e:	80 93 f9 01 	sts	0x01F9, r24
    6a12:	90 93 fa 01 	sts	0x01FA, r25
    6a16:	a0 93 fb 01 	sts	0x01FB, r26
    6a1a:	b0 93 fc 01 	sts	0x01FC, r27
		AVE_ClearIcuOverFlows();
    6a1e:	0e 94 98 14 	call	0x2930	; 0x2930 <AVE_ClearIcuOverFlows>
		entrant =1;
    6a22:	81 e0       	ldi	r24, 0x01	; 1
    6a24:	80 93 f2 01 	sts	0x01F2, r24
		intitalizeExtiRunTimeChange(INT0_EN,EXTI_FALLING_EDGE);
    6a28:	80 e0       	ldi	r24, 0x00	; 0
    6a2a:	62 e0       	ldi	r22, 0x02	; 2
    6a2c:	0e 94 55 23 	call	0x46aa	; 0x46aa <intitalizeExtiRunTimeChange>
    6a30:	4c c0       	rjmp	.+152    	; 0x6aca <startCalculationIcu+0xf2>
		//AVEManipulateLed(BIT6,PORTB,LED_ON);



	}
	else if(entrant == 1)
    6a32:	80 91 f2 01 	lds	r24, 0x01F2
    6a36:	81 30       	cpi	r24, 0x01	; 1
    6a38:	09 f0       	breq	.+2      	; 0x6a3c <startCalculationIcu+0x64>
    6a3a:	47 c0       	rjmp	.+142    	; 0x6aca <startCalculationIcu+0xf2>
	{

		//AVEManipulateLed(BIT6,PORTB,LED_ON);

		T1 = AVE_MTIMER0_read();
    6a3c:	0e 94 37 13 	call	0x266e	; 0x266e <AVE_MTIMER0_read>
    6a40:	88 2f       	mov	r24, r24
    6a42:	90 e0       	ldi	r25, 0x00	; 0
    6a44:	a0 e0       	ldi	r26, 0x00	; 0
    6a46:	b0 e0       	ldi	r27, 0x00	; 0
    6a48:	80 93 f5 01 	sts	0x01F5, r24
    6a4c:	90 93 f6 01 	sts	0x01F6, r25
    6a50:	a0 93 f7 01 	sts	0x01F7, r26
    6a54:	b0 93 f8 01 	sts	0x01F8, r27
		TON = (AVE_IcuGetNumberOfOverFlows()*256)+(T1-T0);
    6a58:	0e 94 87 14 	call	0x290e	; 0x290e <AVE_IcuGetNumberOfOverFlows>
    6a5c:	dc 01       	movw	r26, r24
    6a5e:	cb 01       	movw	r24, r22
    6a60:	ee 24       	eor	r14, r14
    6a62:	f8 2e       	mov	r15, r24
    6a64:	09 2f       	mov	r16, r25
    6a66:	1a 2f       	mov	r17, r26
    6a68:	20 91 f5 01 	lds	r18, 0x01F5
    6a6c:	30 91 f6 01 	lds	r19, 0x01F6
    6a70:	40 91 f7 01 	lds	r20, 0x01F7
    6a74:	50 91 f8 01 	lds	r21, 0x01F8
    6a78:	80 91 f9 01 	lds	r24, 0x01F9
    6a7c:	90 91 fa 01 	lds	r25, 0x01FA
    6a80:	a0 91 fb 01 	lds	r26, 0x01FB
    6a84:	b0 91 fc 01 	lds	r27, 0x01FC
    6a88:	59 01       	movw	r10, r18
    6a8a:	6a 01       	movw	r12, r20
    6a8c:	a8 1a       	sub	r10, r24
    6a8e:	b9 0a       	sbc	r11, r25
    6a90:	ca 0a       	sbc	r12, r26
    6a92:	db 0a       	sbc	r13, r27
    6a94:	d6 01       	movw	r26, r12
    6a96:	c5 01       	movw	r24, r10
    6a98:	8e 0d       	add	r24, r14
    6a9a:	9f 1d       	adc	r25, r15
    6a9c:	a0 1f       	adc	r26, r16
    6a9e:	b1 1f       	adc	r27, r17
    6aa0:	80 93 fd 01 	sts	0x01FD, r24
    6aa4:	90 93 fe 01 	sts	0x01FE, r25
    6aa8:	a0 93 ff 01 	sts	0x01FF, r26
    6aac:	b0 93 00 02 	sts	0x0200, r27
		AVE_ClearIcuOverFlows();
    6ab0:	0e 94 98 14 	call	0x2930	; 0x2930 <AVE_ClearIcuOverFlows>
		entrant = 0;
    6ab4:	10 92 f2 01 	sts	0x01F2, r1
		intitalizeExtiRunTimeChange(INT0_EN,EXTI_RISING_EDGE);
    6ab8:	80 e0       	ldi	r24, 0x00	; 0
    6aba:	63 e0       	ldi	r22, 0x03	; 3
    6abc:	0e 94 55 23 	call	0x46aa	; 0x46aa <intitalizeExtiRunTimeChange>
		AVEManipulateLed(BIT7,PORTB,LED_OFF);
    6ac0:	80 e8       	ldi	r24, 0x80	; 128
    6ac2:	61 e0       	ldi	r22, 0x01	; 1
    6ac4:	40 e0       	ldi	r20, 0x00	; 0
    6ac6:	0e 94 c1 34 	call	0x6982	; 0x6982 <AVEManipulateLed>
//
//	}



}
    6aca:	cf 91       	pop	r28
    6acc:	df 91       	pop	r29
    6ace:	1f 91       	pop	r17
    6ad0:	0f 91       	pop	r16
    6ad2:	ff 90       	pop	r15
    6ad4:	ef 90       	pop	r14
    6ad6:	df 90       	pop	r13
    6ad8:	cf 90       	pop	r12
    6ada:	bf 90       	pop	r11
    6adc:	af 90       	pop	r10
    6ade:	08 95       	ret

00006ae0 <SwICU_Init>:


 STATUS  SwICU_Init(uint8 timerNumber)
{
    6ae0:	df 93       	push	r29
    6ae2:	cf 93       	push	r28
    6ae4:	0f 92       	push	r0
    6ae6:	cd b7       	in	r28, 0x3d	; 61
    6ae8:	de b7       	in	r29, 0x3e	; 62
    6aea:	89 83       	std	Y+1, r24	; 0x01

	intitalizeExtiRunTimeChange(INT0_EN,EXTI_RISING_EDGE);
    6aec:	80 e0       	ldi	r24, 0x00	; 0
    6aee:	63 e0       	ldi	r22, 0x03	; 3
    6af0:	0e 94 55 23 	call	0x46aa	; 0x46aa <intitalizeExtiRunTimeChange>
	addExtiCallBackFunction(INT0_EN,startCalculationIcu);
    6af4:	2c ee       	ldi	r18, 0xEC	; 236
    6af6:	34 e3       	ldi	r19, 0x34	; 52
    6af8:	80 e0       	ldi	r24, 0x00	; 0
    6afa:	b9 01       	movw	r22, r18
    6afc:	0e 94 e5 22 	call	0x45ca	; 0x45ca <addExtiCallBackFunction>
	enableOrDisable(INT0_EN);
    6b00:	80 e0       	ldi	r24, 0x00	; 0
    6b02:	0e 94 1e 23 	call	0x463c	; 0x463c <enableOrDisable>

	globalInterruptManipulate(GLOBAL_INTERRUPT_ENABLE);
    6b06:	81 e0       	ldi	r24, 0x01	; 1
    6b08:	0e 94 37 38 	call	0x706e	; 0x706e <globalInterruptManipulate>





	switch(timerNumber)
    6b0c:	89 81       	ldd	r24, Y+1	; 0x01
    6b0e:	88 2f       	mov	r24, r24
    6b10:	90 e0       	ldi	r25, 0x00	; 0
    6b12:	00 97       	sbiw	r24, 0x00	; 0
    6b14:	41 f4       	brne	.+16     	; 0x6b26 <SwICU_Init+0x46>
	{

	case ICU_TIMER0:
		timerPostCfgStruct.linkingType = PRELINKING;
    6b16:	10 92 6a 01 	sts	0x016A, r1

		AVE_MTIMER0_Initialize(&timerPostCfgStruct);
    6b1a:	88 e6       	ldi	r24, 0x68	; 104
    6b1c:	91 e0       	ldi	r25, 0x01	; 1
    6b1e:	0e 94 ab 12 	call	0x2556	; 0x2556 <AVE_MTIMER0_Initialize>
		AVE_MTIMER0_ICU();
    6b22:	0e 94 62 14 	call	0x28c4	; 0x28c4 <AVE_MTIMER0_ICU>




	}
	return E_OK;
    6b26:	81 e0       	ldi	r24, 0x01	; 1
}
    6b28:	0f 90       	pop	r0
    6b2a:	cf 91       	pop	r28
    6b2c:	df 91       	pop	r29
    6b2e:	08 95       	ret

00006b30 <SwICU_Read>:

void SwICU_Read(uint32*Reading_value)
{
    6b30:	df 93       	push	r29
    6b32:	cf 93       	push	r28
    6b34:	00 d0       	rcall	.+0      	; 0x6b36 <SwICU_Read+0x6>
    6b36:	cd b7       	in	r28, 0x3d	; 61
    6b38:	de b7       	in	r29, 0x3e	; 62
    6b3a:	9a 83       	std	Y+2, r25	; 0x02
    6b3c:	89 83       	std	Y+1, r24	; 0x01

	//return (((f32)(TON)/(TON+TOFF)));
	*Reading_value= TON;
    6b3e:	80 91 fd 01 	lds	r24, 0x01FD
    6b42:	90 91 fe 01 	lds	r25, 0x01FE
    6b46:	a0 91 ff 01 	lds	r26, 0x01FF
    6b4a:	b0 91 00 02 	lds	r27, 0x0200
    6b4e:	e9 81       	ldd	r30, Y+1	; 0x01
    6b50:	fa 81       	ldd	r31, Y+2	; 0x02
    6b52:	80 83       	st	Z, r24
    6b54:	91 83       	std	Z+1, r25	; 0x01
    6b56:	a2 83       	std	Z+2, r26	; 0x02
    6b58:	b3 83       	std	Z+3, r27	; 0x03

}
    6b5a:	0f 90       	pop	r0
    6b5c:	0f 90       	pop	r0
    6b5e:	cf 91       	pop	r28
    6b60:	df 91       	pop	r29
    6b62:	08 95       	ret

00006b64 <DC_Motor_Init>:

extern timerCfg timerPostCfgStruct2;


void DC_Motor_Init(uint8 Channel)
{
    6b64:	df 93       	push	r29
    6b66:	cf 93       	push	r28
    6b68:	00 d0       	rcall	.+0      	; 0x6b6a <DC_Motor_Init+0x6>
    6b6a:	0f 92       	push	r0
    6b6c:	cd b7       	in	r28, 0x3d	; 61
    6b6e:	de b7       	in	r29, 0x3e	; 62
    6b70:	89 83       	std	Y+1, r24	; 0x01
	switch(Channel)
    6b72:	89 81       	ldd	r24, Y+1	; 0x01
    6b74:	28 2f       	mov	r18, r24
    6b76:	30 e0       	ldi	r19, 0x00	; 0
    6b78:	3b 83       	std	Y+3, r19	; 0x03
    6b7a:	2a 83       	std	Y+2, r18	; 0x02
    6b7c:	8a 81       	ldd	r24, Y+2	; 0x02
    6b7e:	9b 81       	ldd	r25, Y+3	; 0x03
    6b80:	00 97       	sbiw	r24, 0x00	; 0
    6b82:	31 f0       	breq	.+12     	; 0x6b90 <DC_Motor_Init+0x2c>
    6b84:	2a 81       	ldd	r18, Y+2	; 0x02
    6b86:	3b 81       	ldd	r19, Y+3	; 0x03
    6b88:	21 30       	cpi	r18, 0x01	; 1
    6b8a:	31 05       	cpc	r19, r1
    6b8c:	61 f0       	breq	.+24     	; 0x6ba6 <DC_Motor_Init+0x42>
    6b8e:	15 c0       	rjmp	.+42     	; 0x6bba <DC_Motor_Init+0x56>
	{

	case DC_Motor_Channel_0:
		AVE_gpioPinDirection(DC_MOTOR_Channel_0_Port,DC_MOTOR_Channel_0_Pin_1,OUTPUT);
    6b90:	80 e0       	ldi	r24, 0x00	; 0
    6b92:	61 e0       	ldi	r22, 0x01	; 1
    6b94:	42 e0       	ldi	r20, 0x02	; 2
    6b96:	0e 94 76 28 	call	0x50ec	; 0x50ec <AVE_gpioPinDirection>
		AVE_gpioPinDirection(DC_MOTOR_Channel_0_Port,DC_MOTOR_Channel_0_Pin_2,OUTPUT);
    6b9a:	80 e0       	ldi	r24, 0x00	; 0
    6b9c:	62 e0       	ldi	r22, 0x02	; 2
    6b9e:	42 e0       	ldi	r20, 0x02	; 2
    6ba0:	0e 94 76 28 	call	0x50ec	; 0x50ec <AVE_gpioPinDirection>
    6ba4:	0a c0       	rjmp	.+20     	; 0x6bba <DC_Motor_Init+0x56>
		break;
	case DC_Motor_Channel_1:
		AVE_gpioPinDirection(DC_MOTOR_Channel_1_Port,DC_MOTOR_Channel_1_Pin_1,OUTPUT);
    6ba6:	80 e0       	ldi	r24, 0x00	; 0
    6ba8:	64 e0       	ldi	r22, 0x04	; 4
    6baa:	42 e0       	ldi	r20, 0x02	; 2
    6bac:	0e 94 76 28 	call	0x50ec	; 0x50ec <AVE_gpioPinDirection>
		AVE_gpioPinDirection(DC_MOTOR_Channel_1_Port,DC_MOTOR_Channel_1_Pin_2,OUTPUT);
    6bb0:	80 e0       	ldi	r24, 0x00	; 0
    6bb2:	68 e0       	ldi	r22, 0x08	; 8
    6bb4:	42 e0       	ldi	r20, 0x02	; 2
    6bb6:	0e 94 76 28 	call	0x50ec	; 0x50ec <AVE_gpioPinDirection>



	}

	timerPostCfgStruct2.linkingType = PRELINKING;
    6bba:	10 92 6f 01 	sts	0x016F, r1

	AVE_timer1Init(&timerPostCfgStruct2);
    6bbe:	8d e6       	ldi	r24, 0x6D	; 109
    6bc0:	91 e0       	ldi	r25, 0x01	; 1
    6bc2:	0e 94 ed 16 	call	0x2dda	; 0x2dda <AVE_timer1Init>
	AVE_gpioPinDirection(PORTD,BIT5,OUTPUT);
    6bc6:	83 e0       	ldi	r24, 0x03	; 3
    6bc8:	60 e2       	ldi	r22, 0x20	; 32
    6bca:	42 e0       	ldi	r20, 0x02	; 2
    6bcc:	0e 94 76 28 	call	0x50ec	; 0x50ec <AVE_gpioPinDirection>

	return;



}
    6bd0:	0f 90       	pop	r0
    6bd2:	0f 90       	pop	r0
    6bd4:	0f 90       	pop	r0
    6bd6:	cf 91       	pop	r28
    6bd8:	df 91       	pop	r29
    6bda:	08 95       	ret

00006bdc <DC_Motor_Set_Speed>:

STATUS DC_Motor_Set_Speed(uint8 Speed)
{
    6bdc:	df 93       	push	r29
    6bde:	cf 93       	push	r28
    6be0:	0f 92       	push	r0
    6be2:	cd b7       	in	r28, 0x3d	; 61
    6be4:	de b7       	in	r29, 0x3e	; 62
    6be6:	89 83       	std	Y+1, r24	; 0x01

	Ave_timer1PWM(Speed,20);
    6be8:	89 81       	ldd	r24, Y+1	; 0x01
    6bea:	64 e1       	ldi	r22, 0x14	; 20
    6bec:	70 e0       	ldi	r23, 0x00	; 0
    6bee:	0e 94 5e 18 	call	0x30bc	; 0x30bc <Ave_timer1PWM>

	return E_OK;
    6bf2:	81 e0       	ldi	r24, 0x01	; 1





}
    6bf4:	0f 90       	pop	r0
    6bf6:	cf 91       	pop	r28
    6bf8:	df 91       	pop	r29
    6bfa:	08 95       	ret

00006bfc <DC_Motor_Set_Direction>:

STATUS DC_Motor_Set_Direction(uint8 Channel , uint8 Direction)
{
    6bfc:	df 93       	push	r29
    6bfe:	cf 93       	push	r28
    6c00:	cd b7       	in	r28, 0x3d	; 61
    6c02:	de b7       	in	r29, 0x3e	; 62
    6c04:	2c 97       	sbiw	r28, 0x0c	; 12
    6c06:	0f b6       	in	r0, 0x3f	; 63
    6c08:	f8 94       	cli
    6c0a:	de bf       	out	0x3e, r29	; 62
    6c0c:	0f be       	out	0x3f, r0	; 63
    6c0e:	cd bf       	out	0x3d, r28	; 61
    6c10:	89 83       	std	Y+1, r24	; 0x01
    6c12:	6a 83       	std	Y+2, r22	; 0x02

	switch(Direction)
    6c14:	8a 81       	ldd	r24, Y+2	; 0x02
    6c16:	28 2f       	mov	r18, r24
    6c18:	30 e0       	ldi	r19, 0x00	; 0
    6c1a:	3c 87       	std	Y+12, r19	; 0x0c
    6c1c:	2b 87       	std	Y+11, r18	; 0x0b
    6c1e:	8b 85       	ldd	r24, Y+11	; 0x0b
    6c20:	9c 85       	ldd	r25, Y+12	; 0x0c
    6c22:	81 30       	cpi	r24, 0x01	; 1
    6c24:	91 05       	cpc	r25, r1
    6c26:	e1 f1       	breq	.+120    	; 0x6ca0 <DC_Motor_Set_Direction+0xa4>
    6c28:	2b 85       	ldd	r18, Y+11	; 0x0b
    6c2a:	3c 85       	ldd	r19, Y+12	; 0x0c
    6c2c:	22 30       	cpi	r18, 0x02	; 2
    6c2e:	31 05       	cpc	r19, r1
    6c30:	2c f4       	brge	.+10     	; 0x6c3c <DC_Motor_Set_Direction+0x40>
    6c32:	8b 85       	ldd	r24, Y+11	; 0x0b
    6c34:	9c 85       	ldd	r25, Y+12	; 0x0c
    6c36:	00 97       	sbiw	r24, 0x00	; 0
    6c38:	71 f0       	breq	.+28     	; 0x6c56 <DC_Motor_Set_Direction+0x5a>
    6c3a:	a0 c0       	rjmp	.+320    	; 0x6d7c <DC_Motor_Set_Direction+0x180>
    6c3c:	2b 85       	ldd	r18, Y+11	; 0x0b
    6c3e:	3c 85       	ldd	r19, Y+12	; 0x0c
    6c40:	22 30       	cpi	r18, 0x02	; 2
    6c42:	31 05       	cpc	r19, r1
    6c44:	09 f4       	brne	.+2      	; 0x6c48 <DC_Motor_Set_Direction+0x4c>
    6c46:	51 c0       	rjmp	.+162    	; 0x6cea <DC_Motor_Set_Direction+0xee>
    6c48:	8b 85       	ldd	r24, Y+11	; 0x0b
    6c4a:	9c 85       	ldd	r25, Y+12	; 0x0c
    6c4c:	83 30       	cpi	r24, 0x03	; 3
    6c4e:	91 05       	cpc	r25, r1
    6c50:	09 f4       	brne	.+2      	; 0x6c54 <DC_Motor_Set_Direction+0x58>
    6c52:	70 c0       	rjmp	.+224    	; 0x6d34 <DC_Motor_Set_Direction+0x138>
    6c54:	93 c0       	rjmp	.+294    	; 0x6d7c <DC_Motor_Set_Direction+0x180>
	{

	case DC_Motor_Back:
		switch(Channel)
    6c56:	89 81       	ldd	r24, Y+1	; 0x01
    6c58:	28 2f       	mov	r18, r24
    6c5a:	30 e0       	ldi	r19, 0x00	; 0
    6c5c:	3a 87       	std	Y+10, r19	; 0x0a
    6c5e:	29 87       	std	Y+9, r18	; 0x09
    6c60:	89 85       	ldd	r24, Y+9	; 0x09
    6c62:	9a 85       	ldd	r25, Y+10	; 0x0a
    6c64:	00 97       	sbiw	r24, 0x00	; 0
    6c66:	31 f0       	breq	.+12     	; 0x6c74 <DC_Motor_Set_Direction+0x78>
    6c68:	29 85       	ldd	r18, Y+9	; 0x09
    6c6a:	3a 85       	ldd	r19, Y+10	; 0x0a
    6c6c:	21 30       	cpi	r18, 0x01	; 1
    6c6e:	31 05       	cpc	r19, r1
    6c70:	61 f0       	breq	.+24     	; 0x6c8a <DC_Motor_Set_Direction+0x8e>
    6c72:	84 c0       	rjmp	.+264    	; 0x6d7c <DC_Motor_Set_Direction+0x180>
		{
		case DC_Motor_Channel_0:
			AVE_gpioPinWrite(DC_MOTOR_Channel_0_Port,DC_MOTOR_Channel_0_Pin_1,LOW);
    6c74:	80 e0       	ldi	r24, 0x00	; 0
    6c76:	61 e0       	ldi	r22, 0x01	; 1
    6c78:	40 e0       	ldi	r20, 0x00	; 0
    6c7a:	0e 94 b7 29 	call	0x536e	; 0x536e <AVE_gpioPinWrite>
			AVE_gpioPinWrite(DC_MOTOR_Channel_0_Port,DC_MOTOR_Channel_0_Pin_2,HIGH);
    6c7e:	80 e0       	ldi	r24, 0x00	; 0
    6c80:	62 e0       	ldi	r22, 0x02	; 2
    6c82:	41 e0       	ldi	r20, 0x01	; 1
    6c84:	0e 94 b7 29 	call	0x536e	; 0x536e <AVE_gpioPinWrite>
    6c88:	79 c0       	rjmp	.+242    	; 0x6d7c <DC_Motor_Set_Direction+0x180>
			break;
		case DC_Motor_Channel_1:

			AVE_gpioPinWrite(DC_MOTOR_Channel_1_Port,DC_MOTOR_Channel_1_Pin_1,LOW);
    6c8a:	80 e0       	ldi	r24, 0x00	; 0
    6c8c:	64 e0       	ldi	r22, 0x04	; 4
    6c8e:	40 e0       	ldi	r20, 0x00	; 0
    6c90:	0e 94 b7 29 	call	0x536e	; 0x536e <AVE_gpioPinWrite>
			AVE_gpioPinWrite(DC_MOTOR_Channel_1_Port,DC_MOTOR_Channel_1_Pin_2,HIGH);
    6c94:	80 e0       	ldi	r24, 0x00	; 0
    6c96:	68 e0       	ldi	r22, 0x08	; 8
    6c98:	41 e0       	ldi	r20, 0x01	; 1
    6c9a:	0e 94 b7 29 	call	0x536e	; 0x536e <AVE_gpioPinWrite>
    6c9e:	6e c0       	rjmp	.+220    	; 0x6d7c <DC_Motor_Set_Direction+0x180>
			break;
		}

		break;
	case DC_Motor_Forward:
		switch(Channel)
    6ca0:	89 81       	ldd	r24, Y+1	; 0x01
    6ca2:	28 2f       	mov	r18, r24
    6ca4:	30 e0       	ldi	r19, 0x00	; 0
    6ca6:	38 87       	std	Y+8, r19	; 0x08
    6ca8:	2f 83       	std	Y+7, r18	; 0x07
    6caa:	8f 81       	ldd	r24, Y+7	; 0x07
    6cac:	98 85       	ldd	r25, Y+8	; 0x08
    6cae:	00 97       	sbiw	r24, 0x00	; 0
    6cb0:	31 f0       	breq	.+12     	; 0x6cbe <DC_Motor_Set_Direction+0xc2>
    6cb2:	2f 81       	ldd	r18, Y+7	; 0x07
    6cb4:	38 85       	ldd	r19, Y+8	; 0x08
    6cb6:	21 30       	cpi	r18, 0x01	; 1
    6cb8:	31 05       	cpc	r19, r1
    6cba:	61 f0       	breq	.+24     	; 0x6cd4 <DC_Motor_Set_Direction+0xd8>
    6cbc:	5f c0       	rjmp	.+190    	; 0x6d7c <DC_Motor_Set_Direction+0x180>
		{
		case DC_Motor_Channel_0:
			AVE_gpioPinWrite(DC_MOTOR_Channel_0_Port,DC_MOTOR_Channel_0_Pin_1,HIGH);
    6cbe:	80 e0       	ldi	r24, 0x00	; 0
    6cc0:	61 e0       	ldi	r22, 0x01	; 1
    6cc2:	41 e0       	ldi	r20, 0x01	; 1
    6cc4:	0e 94 b7 29 	call	0x536e	; 0x536e <AVE_gpioPinWrite>
			AVE_gpioPinWrite(DC_MOTOR_Channel_0_Port,DC_MOTOR_Channel_0_Pin_2,LOW);
    6cc8:	80 e0       	ldi	r24, 0x00	; 0
    6cca:	62 e0       	ldi	r22, 0x02	; 2
    6ccc:	40 e0       	ldi	r20, 0x00	; 0
    6cce:	0e 94 b7 29 	call	0x536e	; 0x536e <AVE_gpioPinWrite>
    6cd2:	54 c0       	rjmp	.+168    	; 0x6d7c <DC_Motor_Set_Direction+0x180>
			break;
		case DC_Motor_Channel_1:
			AVE_gpioPinWrite(DC_MOTOR_Channel_1_Port,DC_MOTOR_Channel_1_Pin_1,HIGH);
    6cd4:	80 e0       	ldi	r24, 0x00	; 0
    6cd6:	64 e0       	ldi	r22, 0x04	; 4
    6cd8:	41 e0       	ldi	r20, 0x01	; 1
    6cda:	0e 94 b7 29 	call	0x536e	; 0x536e <AVE_gpioPinWrite>
			AVE_gpioPinWrite(DC_MOTOR_Channel_1_Port,DC_MOTOR_Channel_1_Pin_2,LOW);
    6cde:	80 e0       	ldi	r24, 0x00	; 0
    6ce0:	68 e0       	ldi	r22, 0x08	; 8
    6ce2:	40 e0       	ldi	r20, 0x00	; 0
    6ce4:	0e 94 b7 29 	call	0x536e	; 0x536e <AVE_gpioPinWrite>
    6ce8:	49 c0       	rjmp	.+146    	; 0x6d7c <DC_Motor_Set_Direction+0x180>
		}


		break;
	case DC_Motor_Right:
		switch(Channel)
    6cea:	89 81       	ldd	r24, Y+1	; 0x01
    6cec:	28 2f       	mov	r18, r24
    6cee:	30 e0       	ldi	r19, 0x00	; 0
    6cf0:	3e 83       	std	Y+6, r19	; 0x06
    6cf2:	2d 83       	std	Y+5, r18	; 0x05
    6cf4:	8d 81       	ldd	r24, Y+5	; 0x05
    6cf6:	9e 81       	ldd	r25, Y+6	; 0x06
    6cf8:	00 97       	sbiw	r24, 0x00	; 0
    6cfa:	31 f0       	breq	.+12     	; 0x6d08 <DC_Motor_Set_Direction+0x10c>
    6cfc:	2d 81       	ldd	r18, Y+5	; 0x05
    6cfe:	3e 81       	ldd	r19, Y+6	; 0x06
    6d00:	21 30       	cpi	r18, 0x01	; 1
    6d02:	31 05       	cpc	r19, r1
    6d04:	61 f0       	breq	.+24     	; 0x6d1e <DC_Motor_Set_Direction+0x122>
    6d06:	3a c0       	rjmp	.+116    	; 0x6d7c <DC_Motor_Set_Direction+0x180>
		{
		case DC_Motor_Channel_0:
			AVE_gpioPinWrite(DC_MOTOR_Channel_0_Port,DC_MOTOR_Channel_0_Pin_1,LOW);
    6d08:	80 e0       	ldi	r24, 0x00	; 0
    6d0a:	61 e0       	ldi	r22, 0x01	; 1
    6d0c:	40 e0       	ldi	r20, 0x00	; 0
    6d0e:	0e 94 b7 29 	call	0x536e	; 0x536e <AVE_gpioPinWrite>
			AVE_gpioPinWrite(DC_MOTOR_Channel_0_Port,DC_MOTOR_Channel_0_Pin_2,HIGH);
    6d12:	80 e0       	ldi	r24, 0x00	; 0
    6d14:	62 e0       	ldi	r22, 0x02	; 2
    6d16:	41 e0       	ldi	r20, 0x01	; 1
    6d18:	0e 94 b7 29 	call	0x536e	; 0x536e <AVE_gpioPinWrite>
    6d1c:	2f c0       	rjmp	.+94     	; 0x6d7c <DC_Motor_Set_Direction+0x180>
			break;
		case DC_Motor_Channel_1:
			AVE_gpioPinWrite(DC_MOTOR_Channel_1_Port,DC_MOTOR_Channel_1_Pin_1,HIGH);
    6d1e:	80 e0       	ldi	r24, 0x00	; 0
    6d20:	64 e0       	ldi	r22, 0x04	; 4
    6d22:	41 e0       	ldi	r20, 0x01	; 1
    6d24:	0e 94 b7 29 	call	0x536e	; 0x536e <AVE_gpioPinWrite>
			AVE_gpioPinWrite(DC_MOTOR_Channel_1_Port,DC_MOTOR_Channel_1_Pin_2,LOW);
    6d28:	80 e0       	ldi	r24, 0x00	; 0
    6d2a:	68 e0       	ldi	r22, 0x08	; 8
    6d2c:	40 e0       	ldi	r20, 0x00	; 0
    6d2e:	0e 94 b7 29 	call	0x536e	; 0x536e <AVE_gpioPinWrite>
    6d32:	24 c0       	rjmp	.+72     	; 0x6d7c <DC_Motor_Set_Direction+0x180>
		}


		break;
	case DC_Motor_Left:
		switch(Channel)
    6d34:	89 81       	ldd	r24, Y+1	; 0x01
    6d36:	28 2f       	mov	r18, r24
    6d38:	30 e0       	ldi	r19, 0x00	; 0
    6d3a:	3c 83       	std	Y+4, r19	; 0x04
    6d3c:	2b 83       	std	Y+3, r18	; 0x03
    6d3e:	8b 81       	ldd	r24, Y+3	; 0x03
    6d40:	9c 81       	ldd	r25, Y+4	; 0x04
    6d42:	00 97       	sbiw	r24, 0x00	; 0
    6d44:	31 f0       	breq	.+12     	; 0x6d52 <DC_Motor_Set_Direction+0x156>
    6d46:	2b 81       	ldd	r18, Y+3	; 0x03
    6d48:	3c 81       	ldd	r19, Y+4	; 0x04
    6d4a:	21 30       	cpi	r18, 0x01	; 1
    6d4c:	31 05       	cpc	r19, r1
    6d4e:	61 f0       	breq	.+24     	; 0x6d68 <DC_Motor_Set_Direction+0x16c>
    6d50:	15 c0       	rjmp	.+42     	; 0x6d7c <DC_Motor_Set_Direction+0x180>
		{
		case DC_Motor_Channel_0:
			AVE_gpioPinWrite(DC_MOTOR_Channel_0_Port,DC_MOTOR_Channel_0_Pin_1,HIGH);
    6d52:	80 e0       	ldi	r24, 0x00	; 0
    6d54:	61 e0       	ldi	r22, 0x01	; 1
    6d56:	41 e0       	ldi	r20, 0x01	; 1
    6d58:	0e 94 b7 29 	call	0x536e	; 0x536e <AVE_gpioPinWrite>
			AVE_gpioPinWrite(DC_MOTOR_Channel_0_Port,DC_MOTOR_Channel_0_Pin_2,LOW);
    6d5c:	80 e0       	ldi	r24, 0x00	; 0
    6d5e:	62 e0       	ldi	r22, 0x02	; 2
    6d60:	40 e0       	ldi	r20, 0x00	; 0
    6d62:	0e 94 b7 29 	call	0x536e	; 0x536e <AVE_gpioPinWrite>
    6d66:	0a c0       	rjmp	.+20     	; 0x6d7c <DC_Motor_Set_Direction+0x180>
			break;
		case DC_Motor_Channel_1:
			AVE_gpioPinWrite(DC_MOTOR_Channel_1_Port,DC_MOTOR_Channel_1_Pin_1,LOW);
    6d68:	80 e0       	ldi	r24, 0x00	; 0
    6d6a:	64 e0       	ldi	r22, 0x04	; 4
    6d6c:	40 e0       	ldi	r20, 0x00	; 0
    6d6e:	0e 94 b7 29 	call	0x536e	; 0x536e <AVE_gpioPinWrite>
			AVE_gpioPinWrite(DC_MOTOR_Channel_1_Port,DC_MOTOR_Channel_1_Pin_2,HIGH);
    6d72:	80 e0       	ldi	r24, 0x00	; 0
    6d74:	68 e0       	ldi	r22, 0x08	; 8
    6d76:	41 e0       	ldi	r20, 0x01	; 1
    6d78:	0e 94 b7 29 	call	0x536e	; 0x536e <AVE_gpioPinWrite>


		break;

	}
	return E_OK;
    6d7c:	81 e0       	ldi	r24, 0x01	; 1

}
    6d7e:	2c 96       	adiw	r28, 0x0c	; 12
    6d80:	0f b6       	in	r0, 0x3f	; 63
    6d82:	f8 94       	cli
    6d84:	de bf       	out	0x3e, r29	; 62
    6d86:	0f be       	out	0x3f, r0	; 63
    6d88:	cd bf       	out	0x3d, r28	; 61
    6d8a:	cf 91       	pop	r28
    6d8c:	df 91       	pop	r29
    6d8e:	08 95       	ret

00006d90 <DC_Motor_Stop>:

void DC_Motor_Stop(uint8 Channel)
{
    6d90:	df 93       	push	r29
    6d92:	cf 93       	push	r28
    6d94:	00 d0       	rcall	.+0      	; 0x6d96 <DC_Motor_Stop+0x6>
    6d96:	0f 92       	push	r0
    6d98:	cd b7       	in	r28, 0x3d	; 61
    6d9a:	de b7       	in	r29, 0x3e	; 62
    6d9c:	89 83       	std	Y+1, r24	; 0x01

	switch(Channel)
    6d9e:	89 81       	ldd	r24, Y+1	; 0x01
    6da0:	28 2f       	mov	r18, r24
    6da2:	30 e0       	ldi	r19, 0x00	; 0
    6da4:	3b 83       	std	Y+3, r19	; 0x03
    6da6:	2a 83       	std	Y+2, r18	; 0x02
    6da8:	8a 81       	ldd	r24, Y+2	; 0x02
    6daa:	9b 81       	ldd	r25, Y+3	; 0x03
    6dac:	00 97       	sbiw	r24, 0x00	; 0
    6dae:	31 f0       	breq	.+12     	; 0x6dbc <DC_Motor_Stop+0x2c>
    6db0:	2a 81       	ldd	r18, Y+2	; 0x02
    6db2:	3b 81       	ldd	r19, Y+3	; 0x03
    6db4:	21 30       	cpi	r18, 0x01	; 1
    6db6:	31 05       	cpc	r19, r1
    6db8:	61 f0       	breq	.+24     	; 0x6dd2 <DC_Motor_Stop+0x42>
    6dba:	15 c0       	rjmp	.+42     	; 0x6de6 <DC_Motor_Stop+0x56>
	{

	case DC_Motor_Channel_0:
		AVE_gpioPinWrite(DC_MOTOR_Channel_0_Port,DC_MOTOR_Channel_0_Pin_1,LOW);
    6dbc:	80 e0       	ldi	r24, 0x00	; 0
    6dbe:	61 e0       	ldi	r22, 0x01	; 1
    6dc0:	40 e0       	ldi	r20, 0x00	; 0
    6dc2:	0e 94 b7 29 	call	0x536e	; 0x536e <AVE_gpioPinWrite>
		AVE_gpioPinWrite(DC_MOTOR_Channel_0_Port,DC_MOTOR_Channel_0_Pin_2,LOW);
    6dc6:	80 e0       	ldi	r24, 0x00	; 0
    6dc8:	62 e0       	ldi	r22, 0x02	; 2
    6dca:	40 e0       	ldi	r20, 0x00	; 0
    6dcc:	0e 94 b7 29 	call	0x536e	; 0x536e <AVE_gpioPinWrite>
    6dd0:	0a c0       	rjmp	.+20     	; 0x6de6 <DC_Motor_Stop+0x56>
		break;
	case DC_Motor_Channel_1:
		AVE_gpioPinWrite(DC_MOTOR_Channel_1_Port,DC_MOTOR_Channel_1_Pin_1,LOW);
    6dd2:	80 e0       	ldi	r24, 0x00	; 0
    6dd4:	64 e0       	ldi	r22, 0x04	; 4
    6dd6:	40 e0       	ldi	r20, 0x00	; 0
    6dd8:	0e 94 b7 29 	call	0x536e	; 0x536e <AVE_gpioPinWrite>
		AVE_gpioPinWrite(DC_MOTOR_Channel_1_Port,DC_MOTOR_Channel_1_Pin_2,LOW);
    6ddc:	80 e0       	ldi	r24, 0x00	; 0
    6dde:	68 e0       	ldi	r22, 0x08	; 8
    6de0:	40 e0       	ldi	r20, 0x00	; 0
    6de2:	0e 94 b7 29 	call	0x536e	; 0x536e <AVE_gpioPinWrite>
	}




}
    6de6:	0f 90       	pop	r0
    6de8:	0f 90       	pop	r0
    6dea:	0f 90       	pop	r0
    6dec:	cf 91       	pop	r28
    6dee:	df 91       	pop	r29
    6df0:	08 95       	ret

00006df2 <DC_Motor_Start>:

void DC_Motor_Start(uint8 Channel)
{
    6df2:	df 93       	push	r29
    6df4:	cf 93       	push	r28
    6df6:	00 d0       	rcall	.+0      	; 0x6df8 <DC_Motor_Start+0x6>
    6df8:	0f 92       	push	r0
    6dfa:	cd b7       	in	r28, 0x3d	; 61
    6dfc:	de b7       	in	r29, 0x3e	; 62
    6dfe:	89 83       	std	Y+1, r24	; 0x01

	switch(Channel)
    6e00:	89 81       	ldd	r24, Y+1	; 0x01
    6e02:	28 2f       	mov	r18, r24
    6e04:	30 e0       	ldi	r19, 0x00	; 0
    6e06:	3b 83       	std	Y+3, r19	; 0x03
    6e08:	2a 83       	std	Y+2, r18	; 0x02
    6e0a:	8a 81       	ldd	r24, Y+2	; 0x02
    6e0c:	9b 81       	ldd	r25, Y+3	; 0x03
    6e0e:	00 97       	sbiw	r24, 0x00	; 0
    6e10:	31 f0       	breq	.+12     	; 0x6e1e <DC_Motor_Start+0x2c>
    6e12:	2a 81       	ldd	r18, Y+2	; 0x02
    6e14:	3b 81       	ldd	r19, Y+3	; 0x03
    6e16:	21 30       	cpi	r18, 0x01	; 1
    6e18:	31 05       	cpc	r19, r1
    6e1a:	61 f0       	breq	.+24     	; 0x6e34 <DC_Motor_Start+0x42>
    6e1c:	15 c0       	rjmp	.+42     	; 0x6e48 <DC_Motor_Start+0x56>
	{

	case DC_Motor_Channel_0:
		AVE_gpioPinWrite(DC_MOTOR_Channel_0_Port,DC_MOTOR_Channel_0_Pin_1,HIGH);
    6e1e:	80 e0       	ldi	r24, 0x00	; 0
    6e20:	61 e0       	ldi	r22, 0x01	; 1
    6e22:	41 e0       	ldi	r20, 0x01	; 1
    6e24:	0e 94 b7 29 	call	0x536e	; 0x536e <AVE_gpioPinWrite>
		AVE_gpioPinWrite(DC_MOTOR_Channel_0_Port,DC_MOTOR_Channel_0_Pin_2,LOW);
    6e28:	80 e0       	ldi	r24, 0x00	; 0
    6e2a:	62 e0       	ldi	r22, 0x02	; 2
    6e2c:	40 e0       	ldi	r20, 0x00	; 0
    6e2e:	0e 94 b7 29 	call	0x536e	; 0x536e <AVE_gpioPinWrite>
    6e32:	0a c0       	rjmp	.+20     	; 0x6e48 <DC_Motor_Start+0x56>
		break;
	case DC_Motor_Channel_1:
		AVE_gpioPinWrite(DC_MOTOR_Channel_1_Port,DC_MOTOR_Channel_1_Pin_1,HIGH);
    6e34:	80 e0       	ldi	r24, 0x00	; 0
    6e36:	64 e0       	ldi	r22, 0x04	; 4
    6e38:	41 e0       	ldi	r20, 0x01	; 1
    6e3a:	0e 94 b7 29 	call	0x536e	; 0x536e <AVE_gpioPinWrite>
		AVE_gpioPinWrite(DC_MOTOR_Channel_1_Port,DC_MOTOR_Channel_1_Pin_2,LOW);
    6e3e:	80 e0       	ldi	r24, 0x00	; 0
    6e40:	68 e0       	ldi	r22, 0x08	; 8
    6e42:	40 e0       	ldi	r20, 0x00	; 0
    6e44:	0e 94 b7 29 	call	0x536e	; 0x536e <AVE_gpioPinWrite>

	}



}
    6e48:	0f 90       	pop	r0
    6e4a:	0f 90       	pop	r0
    6e4c:	0f 90       	pop	r0
    6e4e:	cf 91       	pop	r28
    6e50:	df 91       	pop	r29
    6e52:	08 95       	ret

00006e54 <initializeCar>:

CARSTATE currentState = CarStart;


void initializeCar(void)
{
    6e54:	df 93       	push	r29
    6e56:	cf 93       	push	r28
    6e58:	cd b7       	in	r28, 0x3d	; 61
    6e5a:	de b7       	in	r29, 0x3e	; 62

	//AVE_gpioLowerNibbleDirection(PORTA,OUTPUT);


	//Ave_timer1PWM(80,20);
	initializeControl();
    6e5c:	0e 94 d1 37 	call	0x6fa2	; 0x6fa2 <initializeControl>
	initializeUltraSonic();
    6e60:	0e 94 91 30 	call	0x6122	; 0x6122 <initializeUltraSonic>
	triggerUltrasonic();
    6e64:	0e 94 b4 30 	call	0x6168	; 0x6168 <triggerUltrasonic>

	return ;


}
    6e68:	cf 91       	pop	r28
    6e6a:	df 91       	pop	r29
    6e6c:	08 95       	ret

00006e6e <controlCar>:


void controlCar(void)
{
    6e6e:	df 93       	push	r29
    6e70:	cf 93       	push	r28
    6e72:	cd b7       	in	r28, 0x3d	; 61
    6e74:	de b7       	in	r29, 0x3e	; 62
    6e76:	28 97       	sbiw	r28, 0x08	; 8
    6e78:	0f b6       	in	r0, 0x3f	; 63
    6e7a:	f8 94       	cli
    6e7c:	de bf       	out	0x3e, r29	; 62
    6e7e:	0f be       	out	0x3f, r0	; 63
    6e80:	cd bf       	out	0x3d, r28	; 61

	uint32 distance = calculateDistance();
    6e82:	0e 94 8f 31 	call	0x631e	; 0x631e <calculateDistance>
    6e86:	dc 01       	movw	r26, r24
    6e88:	cb 01       	movw	r24, r22
    6e8a:	89 83       	std	Y+1, r24	; 0x01
    6e8c:	9a 83       	std	Y+2, r25	; 0x02
    6e8e:	ab 83       	std	Y+3, r26	; 0x03
    6e90:	bc 83       	std	Y+4, r27	; 0x04

	switch(distance)
    6e92:	89 81       	ldd	r24, Y+1	; 0x01
    6e94:	9a 81       	ldd	r25, Y+2	; 0x02
    6e96:	ab 81       	ldd	r26, Y+3	; 0x03
    6e98:	bc 81       	ldd	r27, Y+4	; 0x04
    6e9a:	8d 83       	std	Y+5, r24	; 0x05
    6e9c:	9e 83       	std	Y+6, r25	; 0x06
    6e9e:	af 83       	std	Y+7, r26	; 0x07
    6ea0:	b8 87       	std	Y+8, r27	; 0x08
    6ea2:	8d 81       	ldd	r24, Y+5	; 0x05
    6ea4:	9e 81       	ldd	r25, Y+6	; 0x06
    6ea6:	af 81       	ldd	r26, Y+7	; 0x07
    6ea8:	b8 85       	ldd	r27, Y+8	; 0x08
    6eaa:	88 32       	cpi	r24, 0x28	; 40
    6eac:	91 05       	cpc	r25, r1
    6eae:	a1 05       	cpc	r26, r1
    6eb0:	b1 05       	cpc	r27, r1
    6eb2:	e8 f4       	brcc	.+58     	; 0x6eee <controlCar+0x80>
    6eb4:	8d 81       	ldd	r24, Y+5	; 0x05
    6eb6:	9e 81       	ldd	r25, Y+6	; 0x06
    6eb8:	af 81       	ldd	r26, Y+7	; 0x07
    6eba:	b8 85       	ldd	r27, Y+8	; 0x08
    6ebc:	8f 31       	cpi	r24, 0x1F	; 31
    6ebe:	91 05       	cpc	r25, r1
    6ec0:	a1 05       	cpc	r26, r1
    6ec2:	b1 05       	cpc	r27, r1
    6ec4:	20 f5       	brcc	.+72     	; 0x6f0e <controlCar+0xa0>
    6ec6:	8d 81       	ldd	r24, Y+5	; 0x05
    6ec8:	9e 81       	ldd	r25, Y+6	; 0x06
    6eca:	af 81       	ldd	r26, Y+7	; 0x07
    6ecc:	b8 85       	ldd	r27, Y+8	; 0x08
    6ece:	00 97       	sbiw	r24, 0x00	; 0
    6ed0:	a1 05       	cpc	r26, r1
    6ed2:	b1 05       	cpc	r27, r1
    6ed4:	09 f4       	brne	.+2      	; 0x6ed8 <controlCar+0x6a>
    6ed6:	57 c0       	rjmp	.+174    	; 0x6f86 <controlCar+0x118>
    6ed8:	8d 81       	ldd	r24, Y+5	; 0x05
    6eda:	9e 81       	ldd	r25, Y+6	; 0x06
    6edc:	af 81       	ldd	r26, Y+7	; 0x07
    6ede:	b8 85       	ldd	r27, Y+8	; 0x08
    6ee0:	8e 31       	cpi	r24, 0x1E	; 30
    6ee2:	91 05       	cpc	r25, r1
    6ee4:	a1 05       	cpc	r26, r1
    6ee6:	b1 05       	cpc	r27, r1
    6ee8:	08 f0       	brcs	.+2      	; 0x6eec <controlCar+0x7e>
    6eea:	52 c0       	rjmp	.+164    	; 0x6f90 <controlCar+0x122>
    6eec:	1c c0       	rjmp	.+56     	; 0x6f26 <controlCar+0xb8>
    6eee:	8d 81       	ldd	r24, Y+5	; 0x05
    6ef0:	9e 81       	ldd	r25, Y+6	; 0x06
    6ef2:	af 81       	ldd	r26, Y+7	; 0x07
    6ef4:	b8 85       	ldd	r27, Y+8	; 0x08
    6ef6:	80 35       	cpi	r24, 0x50	; 80
    6ef8:	91 05       	cpc	r25, r1
    6efa:	a1 05       	cpc	r26, r1
    6efc:	b1 05       	cpc	r27, r1
    6efe:	08 f0       	brcs	.+2      	; 0x6f02 <controlCar+0x94>
    6f00:	47 c0       	rjmp	.+142    	; 0x6f90 <controlCar+0x122>
	{

	case 40 ... 79:

	Motor_Speed(40);
    6f02:	88 e2       	ldi	r24, 0x28	; 40
    6f04:	0e 94 2a 38 	call	0x7054	; 0x7054 <Motor_Speed>
	move_Forward();
    6f08:	0e 94 e1 37 	call	0x6fc2	; 0x6fc2 <move_Forward>
    6f0c:	41 c0       	rjmp	.+130    	; 0x6f90 <controlCar+0x122>
	break;

	case 31 ... 39:
	Motor_Speed(30);
    6f0e:	8e e1       	ldi	r24, 0x1E	; 30
    6f10:	0e 94 2a 38 	call	0x7054	; 0x7054 <Motor_Speed>
	move_RotateRight();
    6f14:	0e 94 ff 37 	call	0x6ffe	; 0x6ffe <move_RotateRight>
	SW_Delay_ms(500);
    6f18:	64 ef       	ldi	r22, 0xF4	; 244
    6f1a:	71 e0       	ldi	r23, 0x01	; 1
    6f1c:	80 e0       	ldi	r24, 0x00	; 0
    6f1e:	90 e0       	ldi	r25, 0x00	; 0
    6f20:	0e 94 41 30 	call	0x6082	; 0x6082 <SW_Delay_ms>
    6f24:	35 c0       	rjmp	.+106    	; 0x6f90 <controlCar+0x122>
	break;

	case 1 ... 29:
	Stop();
    6f26:	0e 94 1d 38 	call	0x703a	; 0x703a <Stop>
	SW_Delay_ms(100);
    6f2a:	64 e6       	ldi	r22, 0x64	; 100
    6f2c:	70 e0       	ldi	r23, 0x00	; 0
    6f2e:	80 e0       	ldi	r24, 0x00	; 0
    6f30:	90 e0       	ldi	r25, 0x00	; 0
    6f32:	0e 94 41 30 	call	0x6082	; 0x6082 <SW_Delay_ms>
	Motor_Speed(40);
    6f36:	88 e2       	ldi	r24, 0x28	; 40
    6f38:	0e 94 2a 38 	call	0x7054	; 0x7054 <Motor_Speed>
	move_Backward();
    6f3c:	0e 94 f0 37 	call	0x6fe0	; 0x6fe0 <move_Backward>
	SW_Delay_ms(90);
    6f40:	6a e5       	ldi	r22, 0x5A	; 90
    6f42:	70 e0       	ldi	r23, 0x00	; 0
    6f44:	80 e0       	ldi	r24, 0x00	; 0
    6f46:	90 e0       	ldi	r25, 0x00	; 0
    6f48:	0e 94 41 30 	call	0x6082	; 0x6082 <SW_Delay_ms>
	move_RotateRight();
    6f4c:	0e 94 ff 37 	call	0x6ffe	; 0x6ffe <move_RotateRight>
	SW_Delay_ms(100);
    6f50:	64 e6       	ldi	r22, 0x64	; 100
    6f52:	70 e0       	ldi	r23, 0x00	; 0
    6f54:	80 e0       	ldi	r24, 0x00	; 0
    6f56:	90 e0       	ldi	r25, 0x00	; 0
    6f58:	0e 94 41 30 	call	0x6082	; 0x6082 <SW_Delay_ms>

	if(distance>20)
    6f5c:	89 81       	ldd	r24, Y+1	; 0x01
    6f5e:	9a 81       	ldd	r25, Y+2	; 0x02
    6f60:	ab 81       	ldd	r26, Y+3	; 0x03
    6f62:	bc 81       	ldd	r27, Y+4	; 0x04
    6f64:	85 31       	cpi	r24, 0x15	; 21
    6f66:	91 05       	cpc	r25, r1
    6f68:	a1 05       	cpc	r26, r1
    6f6a:	b1 05       	cpc	r27, r1
    6f6c:	88 f0       	brcs	.+34     	; 0x6f90 <controlCar+0x122>
	{
		move_RotateRight();
    6f6e:	0e 94 ff 37 	call	0x6ffe	; 0x6ffe <move_RotateRight>
		Motor_Speed(30);
    6f72:	8e e1       	ldi	r24, 0x1E	; 30
    6f74:	0e 94 2a 38 	call	0x7054	; 0x7054 <Motor_Speed>
		SW_Delay_ms(500);
    6f78:	64 ef       	ldi	r22, 0xF4	; 244
    6f7a:	71 e0       	ldi	r23, 0x01	; 1
    6f7c:	80 e0       	ldi	r24, 0x00	; 0
    6f7e:	90 e0       	ldi	r25, 0x00	; 0
    6f80:	0e 94 41 30 	call	0x6082	; 0x6082 <SW_Delay_ms>
    6f84:	05 c0       	rjmp	.+10     	; 0x6f90 <controlCar+0x122>
	}
	break;

	case 0:
	Motor_Speed(60);
    6f86:	8c e3       	ldi	r24, 0x3C	; 60
    6f88:	0e 94 2a 38 	call	0x7054	; 0x7054 <Motor_Speed>
	move_Forward();
    6f8c:	0e 94 e1 37 	call	0x6fc2	; 0x6fc2 <move_Forward>




	return ;
}
    6f90:	28 96       	adiw	r28, 0x08	; 8
    6f92:	0f b6       	in	r0, 0x3f	; 63
    6f94:	f8 94       	cli
    6f96:	de bf       	out	0x3e, r29	; 62
    6f98:	0f be       	out	0x3f, r0	; 63
    6f9a:	cd bf       	out	0x3d, r28	; 61
    6f9c:	cf 91       	pop	r28
    6f9e:	df 91       	pop	r29
    6fa0:	08 95       	ret

00006fa2 <initializeControl>:




void initializeControl(void)
{
    6fa2:	df 93       	push	r29
    6fa4:	cf 93       	push	r28
    6fa6:	cd b7       	in	r28, 0x3d	; 61
    6fa8:	de b7       	in	r29, 0x3e	; 62
	DC_Motor_Init(DC_Motor_Channel_0);
    6faa:	80 e0       	ldi	r24, 0x00	; 0
    6fac:	0e 94 b2 35 	call	0x6b64	; 0x6b64 <DC_Motor_Init>
	DC_Motor_Init(DC_Motor_Channel_1);
    6fb0:	81 e0       	ldi	r24, 0x01	; 1
    6fb2:	0e 94 b2 35 	call	0x6b64	; 0x6b64 <DC_Motor_Init>
	DC_Motor_Set_Speed(80);
    6fb6:	80 e5       	ldi	r24, 0x50	; 80
    6fb8:	0e 94 ee 35 	call	0x6bdc	; 0x6bdc <DC_Motor_Set_Speed>

	return ;


}
    6fbc:	cf 91       	pop	r28
    6fbe:	df 91       	pop	r29
    6fc0:	08 95       	ret

00006fc2 <move_Forward>:

void move_Forward(void)
{
    6fc2:	df 93       	push	r29
    6fc4:	cf 93       	push	r28
    6fc6:	cd b7       	in	r28, 0x3d	; 61
    6fc8:	de b7       	in	r29, 0x3e	; 62
	DC_Motor_Set_Direction(DC_Motor_Channel_0,DC_Motor_Forward);
    6fca:	80 e0       	ldi	r24, 0x00	; 0
    6fcc:	61 e0       	ldi	r22, 0x01	; 1
    6fce:	0e 94 fe 35 	call	0x6bfc	; 0x6bfc <DC_Motor_Set_Direction>
	DC_Motor_Set_Direction(DC_Motor_Channel_1,DC_Motor_Forward);
    6fd2:	81 e0       	ldi	r24, 0x01	; 1
    6fd4:	61 e0       	ldi	r22, 0x01	; 1
    6fd6:	0e 94 fe 35 	call	0x6bfc	; 0x6bfc <DC_Motor_Set_Direction>

	return ;


}
    6fda:	cf 91       	pop	r28
    6fdc:	df 91       	pop	r29
    6fde:	08 95       	ret

00006fe0 <move_Backward>:
void move_Backward(void)
{
    6fe0:	df 93       	push	r29
    6fe2:	cf 93       	push	r28
    6fe4:	cd b7       	in	r28, 0x3d	; 61
    6fe6:	de b7       	in	r29, 0x3e	; 62
	DC_Motor_Set_Direction(DC_Motor_Channel_0,DC_Motor_Back);
    6fe8:	80 e0       	ldi	r24, 0x00	; 0
    6fea:	60 e0       	ldi	r22, 0x00	; 0
    6fec:	0e 94 fe 35 	call	0x6bfc	; 0x6bfc <DC_Motor_Set_Direction>
	DC_Motor_Set_Direction(DC_Motor_Channel_1,DC_Motor_Back);
    6ff0:	81 e0       	ldi	r24, 0x01	; 1
    6ff2:	60 e0       	ldi	r22, 0x00	; 0
    6ff4:	0e 94 fe 35 	call	0x6bfc	; 0x6bfc <DC_Motor_Set_Direction>

	return ;


}
    6ff8:	cf 91       	pop	r28
    6ffa:	df 91       	pop	r29
    6ffc:	08 95       	ret

00006ffe <move_RotateRight>:
void move_RotateRight(void)
{
    6ffe:	df 93       	push	r29
    7000:	cf 93       	push	r28
    7002:	cd b7       	in	r28, 0x3d	; 61
    7004:	de b7       	in	r29, 0x3e	; 62
	DC_Motor_Set_Direction(DC_Motor_Channel_0,DC_Motor_Right);
    7006:	80 e0       	ldi	r24, 0x00	; 0
    7008:	62 e0       	ldi	r22, 0x02	; 2
    700a:	0e 94 fe 35 	call	0x6bfc	; 0x6bfc <DC_Motor_Set_Direction>
	DC_Motor_Set_Direction(DC_Motor_Channel_1,DC_Motor_Right);
    700e:	81 e0       	ldi	r24, 0x01	; 1
    7010:	62 e0       	ldi	r22, 0x02	; 2
    7012:	0e 94 fe 35 	call	0x6bfc	; 0x6bfc <DC_Motor_Set_Direction>

	return ;



}
    7016:	cf 91       	pop	r28
    7018:	df 91       	pop	r29
    701a:	08 95       	ret

0000701c <move_RotateLeft>:
void move_RotateLeft(void)
{
    701c:	df 93       	push	r29
    701e:	cf 93       	push	r28
    7020:	cd b7       	in	r28, 0x3d	; 61
    7022:	de b7       	in	r29, 0x3e	; 62
	DC_Motor_Set_Direction(DC_Motor_Channel_0,DC_Motor_Left);
    7024:	80 e0       	ldi	r24, 0x00	; 0
    7026:	63 e0       	ldi	r22, 0x03	; 3
    7028:	0e 94 fe 35 	call	0x6bfc	; 0x6bfc <DC_Motor_Set_Direction>
	DC_Motor_Set_Direction(DC_Motor_Channel_1,DC_Motor_Left);
    702c:	81 e0       	ldi	r24, 0x01	; 1
    702e:	63 e0       	ldi	r22, 0x03	; 3
    7030:	0e 94 fe 35 	call	0x6bfc	; 0x6bfc <DC_Motor_Set_Direction>

	return ;


}
    7034:	cf 91       	pop	r28
    7036:	df 91       	pop	r29
    7038:	08 95       	ret

0000703a <Stop>:
void Stop(void)
{
    703a:	df 93       	push	r29
    703c:	cf 93       	push	r28
    703e:	cd b7       	in	r28, 0x3d	; 61
    7040:	de b7       	in	r29, 0x3e	; 62

	DC_Motor_Stop(DC_Motor_Channel_0);
    7042:	80 e0       	ldi	r24, 0x00	; 0
    7044:	0e 94 c8 36 	call	0x6d90	; 0x6d90 <DC_Motor_Stop>
	DC_Motor_Stop(DC_Motor_Channel_1);
    7048:	81 e0       	ldi	r24, 0x01	; 1
    704a:	0e 94 c8 36 	call	0x6d90	; 0x6d90 <DC_Motor_Stop>

	return ;



}
    704e:	cf 91       	pop	r28
    7050:	df 91       	pop	r29
    7052:	08 95       	ret

00007054 <Motor_Speed>:

void Motor_Speed(uint8 speed)
{
    7054:	df 93       	push	r29
    7056:	cf 93       	push	r28
    7058:	0f 92       	push	r0
    705a:	cd b7       	in	r28, 0x3d	; 61
    705c:	de b7       	in	r29, 0x3e	; 62
    705e:	89 83       	std	Y+1, r24	; 0x01

	DC_Motor_Set_Speed(speed);
    7060:	89 81       	ldd	r24, Y+1	; 0x01
    7062:	0e 94 ee 35 	call	0x6bdc	; 0x6bdc <DC_Motor_Set_Speed>



	return ;
}
    7066:	0f 90       	pop	r0
    7068:	cf 91       	pop	r28
    706a:	df 91       	pop	r29
    706c:	08 95       	ret

0000706e <globalInterruptManipulate>:
#include "Libraries/LIBRARIES_INCLUDES/LTYPES.h"
#include "Libraries/LIBRARIES_INCLUDES/LUTILS.h"
#include "INTERRUPT.h"

void globalInterruptManipulate(uint8 globalInterruptState)
{
    706e:	df 93       	push	r29
    7070:	cf 93       	push	r28
    7072:	00 d0       	rcall	.+0      	; 0x7074 <globalInterruptManipulate+0x6>
    7074:	0f 92       	push	r0
    7076:	cd b7       	in	r28, 0x3d	; 61
    7078:	de b7       	in	r29, 0x3e	; 62
    707a:	89 83       	std	Y+1, r24	; 0x01

	switch(globalInterruptState)
    707c:	89 81       	ldd	r24, Y+1	; 0x01
    707e:	28 2f       	mov	r18, r24
    7080:	30 e0       	ldi	r19, 0x00	; 0
    7082:	3b 83       	std	Y+3, r19	; 0x03
    7084:	2a 83       	std	Y+2, r18	; 0x02
    7086:	8a 81       	ldd	r24, Y+2	; 0x02
    7088:	9b 81       	ldd	r25, Y+3	; 0x03
    708a:	00 97       	sbiw	r24, 0x00	; 0
    708c:	69 f0       	breq	.+26     	; 0x70a8 <globalInterruptManipulate+0x3a>
    708e:	2a 81       	ldd	r18, Y+2	; 0x02
    7090:	3b 81       	ldd	r19, Y+3	; 0x03
    7092:	21 30       	cpi	r18, 0x01	; 1
    7094:	31 05       	cpc	r19, r1
    7096:	79 f4       	brne	.+30     	; 0x70b6 <globalInterruptManipulate+0x48>
	{

	case GLOBAL_INTERRUPT_ENABLE:
		SET_BIT(SREG,SREG_I);
    7098:	af e5       	ldi	r26, 0x5F	; 95
    709a:	b0 e0       	ldi	r27, 0x00	; 0
    709c:	ef e5       	ldi	r30, 0x5F	; 95
    709e:	f0 e0       	ldi	r31, 0x00	; 0
    70a0:	80 81       	ld	r24, Z
    70a2:	80 68       	ori	r24, 0x80	; 128
    70a4:	8c 93       	st	X, r24
    70a6:	07 c0       	rjmp	.+14     	; 0x70b6 <globalInterruptManipulate+0x48>
		break;
	case GLOBAL_INTERRUPT_DISABLE:
		CLEAR_BIT(SREG,SREG_I);
    70a8:	af e5       	ldi	r26, 0x5F	; 95
    70aa:	b0 e0       	ldi	r27, 0x00	; 0
    70ac:	ef e5       	ldi	r30, 0x5F	; 95
    70ae:	f0 e0       	ldi	r31, 0x00	; 0
    70b0:	80 81       	ld	r24, Z
    70b2:	8f 77       	andi	r24, 0x7F	; 127
    70b4:	8c 93       	st	X, r24
		break;

	}

	return;
}
    70b6:	0f 90       	pop	r0
    70b8:	0f 90       	pop	r0
    70ba:	0f 90       	pop	r0
    70bc:	cf 91       	pop	r28
    70be:	df 91       	pop	r29
    70c0:	08 95       	ret

000070c2 <pcCommunicationInit>:
static uint8 endCharacter = '-';



void pcCommunicationInit(void)
{
    70c2:	df 93       	push	r29
    70c4:	cf 93       	push	r28
    70c6:	cd b7       	in	r28, 0x3d	; 61
    70c8:	de b7       	in	r29, 0x3e	; 62


	AVE_gpioPinDirection(PORTD,BIT0,INPUT);
    70ca:	83 e0       	ldi	r24, 0x03	; 3
    70cc:	61 e0       	ldi	r22, 0x01	; 1
    70ce:	40 e0       	ldi	r20, 0x00	; 0
    70d0:	0e 94 76 28 	call	0x50ec	; 0x50ec <AVE_gpioPinDirection>
	AVE_gpioPinDirection(PORTD,BIT1,OUTPUT);
    70d4:	83 e0       	ldi	r24, 0x03	; 3
    70d6:	62 e0       	ldi	r22, 0x02	; 2
    70d8:	42 e0       	ldi	r20, 0x02	; 2
    70da:	0e 94 76 28 	call	0x50ec	; 0x50ec <AVE_gpioPinDirection>
	usart_Init();
    70de:	0e 94 cb 10 	call	0x2196	; 0x2196 <usart_Init>
	SpiManipulateMode(SPI_MASTER);
    70e2:	80 e0       	ldi	r24, 0x00	; 0
    70e4:	0e 94 88 3a 	call	0x7510	; 0x7510 <SpiManipulateMode>

	intializePButtons();
    70e8:	0e 94 e2 33 	call	0x67c4	; 0x67c4 <intializePButtons>


}
    70ec:	cf 91       	pop	r28
    70ee:	df 91       	pop	r29
    70f0:	08 95       	ret

000070f2 <asTD>:



void asTD(uint8* value)
{
    70f2:	df 93       	push	r29
    70f4:	cf 93       	push	r28
    70f6:	00 d0       	rcall	.+0      	; 0x70f8 <asTD+0x6>
    70f8:	cd b7       	in	r28, 0x3d	; 61
    70fa:	de b7       	in	r29, 0x3e	; 62
    70fc:	9a 83       	std	Y+2, r25	; 0x02
    70fe:	89 83       	std	Y+1, r24	; 0x01

	*value = *value - 48;
    7100:	e9 81       	ldd	r30, Y+1	; 0x01
    7102:	fa 81       	ldd	r31, Y+2	; 0x02
    7104:	80 81       	ld	r24, Z
    7106:	80 53       	subi	r24, 0x30	; 48
    7108:	e9 81       	ldd	r30, Y+1	; 0x01
    710a:	fa 81       	ldd	r31, Y+2	; 0x02
    710c:	80 83       	st	Z, r24

	return;
}
    710e:	0f 90       	pop	r0
    7110:	0f 90       	pop	r0
    7112:	cf 91       	pop	r28
    7114:	df 91       	pop	r29
    7116:	08 95       	ret

00007118 <sendInitialization>:


static void sendInitialization(void)
{
    7118:	ef 92       	push	r14
    711a:	ff 92       	push	r15
    711c:	0f 93       	push	r16
    711e:	1f 93       	push	r17
    7120:	df 93       	push	r29
    7122:	cf 93       	push	r28
    7124:	00 d0       	rcall	.+0      	; 0x7126 <sendInitialization+0xe>
    7126:	cd b7       	in	r28, 0x3d	; 61
    7128:	de b7       	in	r29, 0x3e	; 62


	for(uint8 i = 0;i<=0;i++)
    712a:	1a 82       	std	Y+2, r1	; 0x02
    712c:	41 c0       	rjmp	.+130    	; 0x71b0 <sendInitialization+0x98>
	{
		SpiSendData((InitialTime>>(8*(i))),SEND);
    712e:	20 91 03 02 	lds	r18, 0x0203
    7132:	30 91 04 02 	lds	r19, 0x0204
    7136:	40 91 05 02 	lds	r20, 0x0205
    713a:	50 91 06 02 	lds	r21, 0x0206
    713e:	8a 81       	ldd	r24, Y+2	; 0x02
    7140:	88 2f       	mov	r24, r24
    7142:	90 e0       	ldi	r25, 0x00	; 0
    7144:	88 0f       	add	r24, r24
    7146:	99 1f       	adc	r25, r25
    7148:	88 0f       	add	r24, r24
    714a:	99 1f       	adc	r25, r25
    714c:	88 0f       	add	r24, r24
    714e:	99 1f       	adc	r25, r25
    7150:	79 01       	movw	r14, r18
    7152:	8a 01       	movw	r16, r20
    7154:	04 c0       	rjmp	.+8      	; 0x715e <sendInitialization+0x46>
    7156:	16 95       	lsr	r17
    7158:	07 95       	ror	r16
    715a:	f7 94       	ror	r15
    715c:	e7 94       	ror	r14
    715e:	8a 95       	dec	r24
    7160:	d2 f7       	brpl	.-12     	; 0x7156 <sendInitialization+0x3e>
    7162:	d8 01       	movw	r26, r16
    7164:	c7 01       	movw	r24, r14
    7166:	60 e0       	ldi	r22, 0x00	; 0
    7168:	0e 94 df 3a 	call	0x75be	; 0x75be <SpiSendData>
		usartSendPolling((InitialTime>>(8*(i)))+'0');
    716c:	20 91 03 02 	lds	r18, 0x0203
    7170:	30 91 04 02 	lds	r19, 0x0204
    7174:	40 91 05 02 	lds	r20, 0x0205
    7178:	50 91 06 02 	lds	r21, 0x0206
    717c:	8a 81       	ldd	r24, Y+2	; 0x02
    717e:	88 2f       	mov	r24, r24
    7180:	90 e0       	ldi	r25, 0x00	; 0
    7182:	88 0f       	add	r24, r24
    7184:	99 1f       	adc	r25, r25
    7186:	88 0f       	add	r24, r24
    7188:	99 1f       	adc	r25, r25
    718a:	88 0f       	add	r24, r24
    718c:	99 1f       	adc	r25, r25
    718e:	79 01       	movw	r14, r18
    7190:	8a 01       	movw	r16, r20
    7192:	04 c0       	rjmp	.+8      	; 0x719c <sendInitialization+0x84>
    7194:	16 95       	lsr	r17
    7196:	07 95       	ror	r16
    7198:	f7 94       	ror	r15
    719a:	e7 94       	ror	r14
    719c:	8a 95       	dec	r24
    719e:	d2 f7       	brpl	.-12     	; 0x7194 <sendInitialization+0x7c>
    71a0:	d8 01       	movw	r26, r16
    71a2:	c7 01       	movw	r24, r14
    71a4:	c0 96       	adiw	r24, 0x30	; 48
    71a6:	0e 94 1e 11 	call	0x223c	; 0x223c <usartSendPolling>

static void sendInitialization(void)
{


	for(uint8 i = 0;i<=0;i++)
    71aa:	8a 81       	ldd	r24, Y+2	; 0x02
    71ac:	8f 5f       	subi	r24, 0xFF	; 255
    71ae:	8a 83       	std	Y+2, r24	; 0x02
    71b0:	8a 81       	ldd	r24, Y+2	; 0x02
    71b2:	88 23       	and	r24, r24
    71b4:	09 f4       	brne	.+2      	; 0x71b8 <sendInitialization+0xa0>
    71b6:	bb cf       	rjmp	.-138    	; 0x712e <sendInitialization+0x16>
	{
		SpiSendData((InitialTime>>(8*(i))),SEND);
		usartSendPolling((InitialTime>>(8*(i)))+'0');

	}
	for(uint8 i = 0;i<=0;i++)
    71b8:	19 82       	std	Y+1, r1	; 0x01
    71ba:	41 c0       	rjmp	.+130    	; 0x723e <sendInitialization+0x126>
	{
		SpiSendData((InitialSpeed>>(8*(i))),SEND);
    71bc:	20 91 07 02 	lds	r18, 0x0207
    71c0:	30 91 08 02 	lds	r19, 0x0208
    71c4:	40 91 09 02 	lds	r20, 0x0209
    71c8:	50 91 0a 02 	lds	r21, 0x020A
    71cc:	89 81       	ldd	r24, Y+1	; 0x01
    71ce:	88 2f       	mov	r24, r24
    71d0:	90 e0       	ldi	r25, 0x00	; 0
    71d2:	88 0f       	add	r24, r24
    71d4:	99 1f       	adc	r25, r25
    71d6:	88 0f       	add	r24, r24
    71d8:	99 1f       	adc	r25, r25
    71da:	88 0f       	add	r24, r24
    71dc:	99 1f       	adc	r25, r25
    71de:	79 01       	movw	r14, r18
    71e0:	8a 01       	movw	r16, r20
    71e2:	04 c0       	rjmp	.+8      	; 0x71ec <sendInitialization+0xd4>
    71e4:	16 95       	lsr	r17
    71e6:	07 95       	ror	r16
    71e8:	f7 94       	ror	r15
    71ea:	e7 94       	ror	r14
    71ec:	8a 95       	dec	r24
    71ee:	d2 f7       	brpl	.-12     	; 0x71e4 <sendInitialization+0xcc>
    71f0:	d8 01       	movw	r26, r16
    71f2:	c7 01       	movw	r24, r14
    71f4:	60 e0       	ldi	r22, 0x00	; 0
    71f6:	0e 94 df 3a 	call	0x75be	; 0x75be <SpiSendData>
		usartSendPolling((InitialSpeed>>(8*(i)))+'0');
    71fa:	20 91 07 02 	lds	r18, 0x0207
    71fe:	30 91 08 02 	lds	r19, 0x0208
    7202:	40 91 09 02 	lds	r20, 0x0209
    7206:	50 91 0a 02 	lds	r21, 0x020A
    720a:	89 81       	ldd	r24, Y+1	; 0x01
    720c:	88 2f       	mov	r24, r24
    720e:	90 e0       	ldi	r25, 0x00	; 0
    7210:	88 0f       	add	r24, r24
    7212:	99 1f       	adc	r25, r25
    7214:	88 0f       	add	r24, r24
    7216:	99 1f       	adc	r25, r25
    7218:	88 0f       	add	r24, r24
    721a:	99 1f       	adc	r25, r25
    721c:	79 01       	movw	r14, r18
    721e:	8a 01       	movw	r16, r20
    7220:	04 c0       	rjmp	.+8      	; 0x722a <sendInitialization+0x112>
    7222:	16 95       	lsr	r17
    7224:	07 95       	ror	r16
    7226:	f7 94       	ror	r15
    7228:	e7 94       	ror	r14
    722a:	8a 95       	dec	r24
    722c:	d2 f7       	brpl	.-12     	; 0x7222 <sendInitialization+0x10a>
    722e:	d8 01       	movw	r26, r16
    7230:	c7 01       	movw	r24, r14
    7232:	c0 96       	adiw	r24, 0x30	; 48
    7234:	0e 94 1e 11 	call	0x223c	; 0x223c <usartSendPolling>
	{
		SpiSendData((InitialTime>>(8*(i))),SEND);
		usartSendPolling((InitialTime>>(8*(i)))+'0');

	}
	for(uint8 i = 0;i<=0;i++)
    7238:	89 81       	ldd	r24, Y+1	; 0x01
    723a:	8f 5f       	subi	r24, 0xFF	; 255
    723c:	89 83       	std	Y+1, r24	; 0x01
    723e:	89 81       	ldd	r24, Y+1	; 0x01
    7240:	88 23       	and	r24, r24
    7242:	09 f4       	brne	.+2      	; 0x7246 <sendInitialization+0x12e>
    7244:	bb cf       	rjmp	.-138    	; 0x71bc <sendInitialization+0xa4>
		usartSendPolling((InitialSpeed>>(8*(i)))+'0');

	}
	//SpiSendData(((uint8)InitialSpeed),SEND);

}
    7246:	0f 90       	pop	r0
    7248:	0f 90       	pop	r0
    724a:	cf 91       	pop	r28
    724c:	df 91       	pop	r29
    724e:	1f 91       	pop	r17
    7250:	0f 91       	pop	r16
    7252:	ff 90       	pop	r15
    7254:	ef 90       	pop	r14
    7256:	08 95       	ret

00007258 <setInitialValues>:

void setInitialValues(void)
{
    7258:	df 93       	push	r29
    725a:	cf 93       	push	r28
    725c:	0f 92       	push	r0
    725e:	cd b7       	in	r28, 0x3d	; 61
    7260:	de b7       	in	r29, 0x3e	; 62
	static volatile uint8 counter = 0;

	static volatile uint8 flag = 0;
	uint8 value = getDataPolling();
    7262:	0e 94 50 11 	call	0x22a0	; 0x22a0 <getDataPolling>
    7266:	89 83       	std	Y+1, r24	; 0x01
	//usartSendPolling(value);
	asTD(&value);
    7268:	ce 01       	movw	r24, r28
    726a:	01 96       	adiw	r24, 0x01	; 1
    726c:	0e 94 79 38 	call	0x70f2	; 0x70f2 <asTD>
    7270:	3c c0       	rjmp	.+120    	; 0x72ea <setInitialValues+0x92>
	//counter++;


	while(flag == 0)
	{
		InitialTime |= ((uint32)value<<(8*counter));
    7272:	89 81       	ldd	r24, Y+1	; 0x01
    7274:	28 2f       	mov	r18, r24
    7276:	30 e0       	ldi	r19, 0x00	; 0
    7278:	40 e0       	ldi	r20, 0x00	; 0
    727a:	50 e0       	ldi	r21, 0x00	; 0
    727c:	80 91 0c 02 	lds	r24, 0x020C
    7280:	88 2f       	mov	r24, r24
    7282:	90 e0       	ldi	r25, 0x00	; 0
    7284:	88 0f       	add	r24, r24
    7286:	99 1f       	adc	r25, r25
    7288:	88 0f       	add	r24, r24
    728a:	99 1f       	adc	r25, r25
    728c:	88 0f       	add	r24, r24
    728e:	99 1f       	adc	r25, r25
    7290:	04 c0       	rjmp	.+8      	; 0x729a <setInitialValues+0x42>
    7292:	22 0f       	add	r18, r18
    7294:	33 1f       	adc	r19, r19
    7296:	44 1f       	adc	r20, r20
    7298:	55 1f       	adc	r21, r21
    729a:	8a 95       	dec	r24
    729c:	d2 f7       	brpl	.-12     	; 0x7292 <setInitialValues+0x3a>
    729e:	80 91 03 02 	lds	r24, 0x0203
    72a2:	90 91 04 02 	lds	r25, 0x0204
    72a6:	a0 91 05 02 	lds	r26, 0x0205
    72aa:	b0 91 06 02 	lds	r27, 0x0206
    72ae:	82 2b       	or	r24, r18
    72b0:	93 2b       	or	r25, r19
    72b2:	a4 2b       	or	r26, r20
    72b4:	b5 2b       	or	r27, r21
    72b6:	80 93 03 02 	sts	0x0203, r24
    72ba:	90 93 04 02 	sts	0x0204, r25
    72be:	a0 93 05 02 	sts	0x0205, r26
    72c2:	b0 93 06 02 	sts	0x0206, r27
		value = getDataPolling();
    72c6:	0e 94 50 11 	call	0x22a0	; 0x22a0 <getDataPolling>
    72ca:	89 83       	std	Y+1, r24	; 0x01
		if(value=='-')
    72cc:	89 81       	ldd	r24, Y+1	; 0x01
    72ce:	8d 32       	cpi	r24, 0x2D	; 45
    72d0:	19 f4       	brne	.+6      	; 0x72d8 <setInitialValues+0x80>
		{
			flag = 1;
    72d2:	81 e0       	ldi	r24, 0x01	; 1
    72d4:	80 93 0b 02 	sts	0x020B, r24
		}
		asTD(&value);
    72d8:	ce 01       	movw	r24, r28
    72da:	01 96       	adiw	r24, 0x01	; 1
    72dc:	0e 94 79 38 	call	0x70f2	; 0x70f2 <asTD>
		counter++;
    72e0:	80 91 0c 02 	lds	r24, 0x020C
    72e4:	8f 5f       	subi	r24, 0xFF	; 255
    72e6:	80 93 0c 02 	sts	0x020C, r24
	asTD(&value);

	//counter++;


	while(flag == 0)
    72ea:	80 91 0b 02 	lds	r24, 0x020B
    72ee:	88 23       	and	r24, r24
    72f0:	09 f4       	brne	.+2      	; 0x72f4 <setInitialValues+0x9c>
    72f2:	bf cf       	rjmp	.-130    	; 0x7272 <setInitialValues+0x1a>
			flag = 1;
		}
		asTD(&value);
		counter++;
	}
	counter = 0;
    72f4:	10 92 0c 02 	sts	0x020C, r1
    72f8:	45 c0       	rjmp	.+138    	; 0x7384 <setInitialValues+0x12c>
	while(flag == 1)
	{

		value = getDataPolling();
    72fa:	0e 94 50 11 	call	0x22a0	; 0x22a0 <getDataPolling>
    72fe:	89 83       	std	Y+1, r24	; 0x01
		if(value!='-')
    7300:	89 81       	ldd	r24, Y+1	; 0x01
    7302:	8d 32       	cpi	r24, 0x2D	; 45
    7304:	a1 f1       	breq	.+104    	; 0x736e <setInitialValues+0x116>
		{
			asTD(&value);
    7306:	ce 01       	movw	r24, r28
    7308:	01 96       	adiw	r24, 0x01	; 1
    730a:	0e 94 79 38 	call	0x70f2	; 0x70f2 <asTD>

			InitialSpeed |= ((uint32)value<<(8*counter));//((uint32)value<<(7*(counter)));
    730e:	89 81       	ldd	r24, Y+1	; 0x01
    7310:	28 2f       	mov	r18, r24
    7312:	30 e0       	ldi	r19, 0x00	; 0
    7314:	40 e0       	ldi	r20, 0x00	; 0
    7316:	50 e0       	ldi	r21, 0x00	; 0
    7318:	80 91 0c 02 	lds	r24, 0x020C
    731c:	88 2f       	mov	r24, r24
    731e:	90 e0       	ldi	r25, 0x00	; 0
    7320:	88 0f       	add	r24, r24
    7322:	99 1f       	adc	r25, r25
    7324:	88 0f       	add	r24, r24
    7326:	99 1f       	adc	r25, r25
    7328:	88 0f       	add	r24, r24
    732a:	99 1f       	adc	r25, r25
    732c:	04 c0       	rjmp	.+8      	; 0x7336 <setInitialValues+0xde>
    732e:	22 0f       	add	r18, r18
    7330:	33 1f       	adc	r19, r19
    7332:	44 1f       	adc	r20, r20
    7334:	55 1f       	adc	r21, r21
    7336:	8a 95       	dec	r24
    7338:	d2 f7       	brpl	.-12     	; 0x732e <setInitialValues+0xd6>
    733a:	80 91 07 02 	lds	r24, 0x0207
    733e:	90 91 08 02 	lds	r25, 0x0208
    7342:	a0 91 09 02 	lds	r26, 0x0209
    7346:	b0 91 0a 02 	lds	r27, 0x020A
    734a:	82 2b       	or	r24, r18
    734c:	93 2b       	or	r25, r19
    734e:	a4 2b       	or	r26, r20
    7350:	b5 2b       	or	r27, r21
    7352:	80 93 07 02 	sts	0x0207, r24
    7356:	90 93 08 02 	sts	0x0208, r25
    735a:	a0 93 09 02 	sts	0x0209, r26
    735e:	b0 93 0a 02 	sts	0x020A, r27

			counter++;
    7362:	80 91 0c 02 	lds	r24, 0x020C
    7366:	8f 5f       	subi	r24, 0xFF	; 255
    7368:	80 93 0c 02 	sts	0x020C, r24
    736c:	0b c0       	rjmp	.+22     	; 0x7384 <setInitialValues+0x12c>
		}
		else if(value=='-')
    736e:	89 81       	ldd	r24, Y+1	; 0x01
    7370:	8d 32       	cpi	r24, 0x2D	; 45
    7372:	41 f4       	brne	.+16     	; 0x7384 <setInitialValues+0x12c>
		{
			flag = 2;
    7374:	82 e0       	ldi	r24, 0x02	; 2
    7376:	80 93 0b 02 	sts	0x020B, r24
//			{
//
//				usartSendPolling(((uint32)InitialTime>>(8*i))+'0');
//
//			}
			sendInitialization();
    737a:	0e 94 8c 38 	call	0x7118	; 0x7118 <sendInitialization>
			endInit=1;
    737e:	81 e0       	ldi	r24, 0x01	; 1
    7380:	80 93 02 02 	sts	0x0202, r24
		}
		asTD(&value);
		counter++;
	}
	counter = 0;
	while(flag == 1)
    7384:	80 91 0b 02 	lds	r24, 0x020B
    7388:	81 30       	cpi	r24, 0x01	; 1
    738a:	09 f4       	brne	.+2      	; 0x738e <setInitialValues+0x136>
    738c:	b6 cf       	rjmp	.-148    	; 0x72fa <setInitialValues+0xa2>


#endif


}
    738e:	0f 90       	pop	r0
    7390:	cf 91       	pop	r28
    7392:	df 91       	pop	r29
    7394:	08 95       	ret

00007396 <updateSpeed>:

void updateSpeed(void)
{
    7396:	df 93       	push	r29
    7398:	cf 93       	push	r28
    739a:	00 d0       	rcall	.+0      	; 0x739c <updateSpeed+0x6>
    739c:	cd b7       	in	r28, 0x3d	; 61
    739e:	de b7       	in	r29, 0x3e	; 62
	static volatile uint8 pressedButton1 = 0;
	static volatile uint8 pressedButton2 = 0;
	uint8 PBReadValue1,PBReadValue2;

	readPButton(PORTC,BIT4,&PBReadValue1);
    73a0:	82 e0       	ldi	r24, 0x02	; 2
    73a2:	60 e1       	ldi	r22, 0x10	; 16
    73a4:	9e 01       	movw	r18, r28
    73a6:	2f 5f       	subi	r18, 0xFF	; 255
    73a8:	3f 4f       	sbci	r19, 0xFF	; 255
    73aa:	a9 01       	movw	r20, r18
    73ac:	0e 94 06 34 	call	0x680c	; 0x680c <readPButton>
	readPButton(PORTB,BIT2,&PBReadValue2);
    73b0:	9e 01       	movw	r18, r28
    73b2:	2e 5f       	subi	r18, 0xFE	; 254
    73b4:	3f 4f       	sbci	r19, 0xFF	; 255
    73b6:	81 e0       	ldi	r24, 0x01	; 1
    73b8:	64 e0       	ldi	r22, 0x04	; 4
    73ba:	a9 01       	movw	r20, r18
    73bc:	0e 94 06 34 	call	0x680c	; 0x680c <readPButton>

	if(InitialSpeed >= 9)
    73c0:	80 91 07 02 	lds	r24, 0x0207
    73c4:	90 91 08 02 	lds	r25, 0x0208
    73c8:	a0 91 09 02 	lds	r26, 0x0209
    73cc:	b0 91 0a 02 	lds	r27, 0x020A
    73d0:	89 30       	cpi	r24, 0x09	; 9
    73d2:	91 05       	cpc	r25, r1
    73d4:	a1 05       	cpc	r26, r1
    73d6:	b1 05       	cpc	r27, r1
    73d8:	48 f0       	brcs	.+18     	; 0x73ec <updateSpeed+0x56>
	{
		InitialSpeed = 0;
    73da:	10 92 07 02 	sts	0x0207, r1
    73de:	10 92 08 02 	sts	0x0208, r1
    73e2:	10 92 09 02 	sts	0x0209, r1
    73e6:	10 92 0a 02 	sts	0x020A, r1
    73ea:	18 c0       	rjmp	.+48     	; 0x741c <updateSpeed+0x86>
	}
	else if(InitialSpeed<=0)
    73ec:	80 91 07 02 	lds	r24, 0x0207
    73f0:	90 91 08 02 	lds	r25, 0x0208
    73f4:	a0 91 09 02 	lds	r26, 0x0209
    73f8:	b0 91 0a 02 	lds	r27, 0x020A
    73fc:	00 97       	sbiw	r24, 0x00	; 0
    73fe:	a1 05       	cpc	r26, r1
    7400:	b1 05       	cpc	r27, r1
    7402:	61 f4       	brne	.+24     	; 0x741c <updateSpeed+0x86>
	{
		InitialSpeed = 1;
    7404:	81 e0       	ldi	r24, 0x01	; 1
    7406:	90 e0       	ldi	r25, 0x00	; 0
    7408:	a0 e0       	ldi	r26, 0x00	; 0
    740a:	b0 e0       	ldi	r27, 0x00	; 0
    740c:	80 93 07 02 	sts	0x0207, r24
    7410:	90 93 08 02 	sts	0x0208, r25
    7414:	a0 93 09 02 	sts	0x0209, r26
    7418:	b0 93 0a 02 	sts	0x020A, r27
	}

	if(!pressedButton1&&PBReadValue1)
    741c:	80 91 0e 02 	lds	r24, 0x020E
    7420:	88 23       	and	r24, r24
    7422:	69 f5       	brne	.+90     	; 0x747e <updateSpeed+0xe8>
    7424:	89 81       	ldd	r24, Y+1	; 0x01
    7426:	88 23       	and	r24, r24
    7428:	51 f1       	breq	.+84     	; 0x747e <updateSpeed+0xe8>
	{
		pressedButton1 =1 ;
    742a:	81 e0       	ldi	r24, 0x01	; 1
    742c:	80 93 0e 02 	sts	0x020E, r24
		InitialSpeed++;
    7430:	80 91 07 02 	lds	r24, 0x0207
    7434:	90 91 08 02 	lds	r25, 0x0208
    7438:	a0 91 09 02 	lds	r26, 0x0209
    743c:	b0 91 0a 02 	lds	r27, 0x020A
    7440:	01 96       	adiw	r24, 0x01	; 1
    7442:	a1 1d       	adc	r26, r1
    7444:	b1 1d       	adc	r27, r1
    7446:	80 93 07 02 	sts	0x0207, r24
    744a:	90 93 08 02 	sts	0x0208, r25
    744e:	a0 93 09 02 	sts	0x0209, r26
    7452:	b0 93 0a 02 	sts	0x020A, r27
		SpiSendData(InitialSpeed,SEND);
    7456:	80 91 07 02 	lds	r24, 0x0207
    745a:	90 91 08 02 	lds	r25, 0x0208
    745e:	a0 91 09 02 	lds	r26, 0x0209
    7462:	b0 91 0a 02 	lds	r27, 0x020A
    7466:	60 e0       	ldi	r22, 0x00	; 0
    7468:	0e 94 df 3a 	call	0x75be	; 0x75be <SpiSendData>
		pressedButton2 =0;
    746c:	10 92 0d 02 	sts	0x020D, r1
		SW_Delay_ms(300);
    7470:	6c e2       	ldi	r22, 0x2C	; 44
    7472:	71 e0       	ldi	r23, 0x01	; 1
    7474:	80 e0       	ldi	r24, 0x00	; 0
    7476:	90 e0       	ldi	r25, 0x00	; 0
    7478:	0e 94 41 30 	call	0x6082	; 0x6082 <SW_Delay_ms>
    747c:	3b c0       	rjmp	.+118    	; 0x74f4 <updateSpeed+0x15e>

	}
	else if(!pressedButton2&&PBReadValue2)
    747e:	80 91 0d 02 	lds	r24, 0x020D
    7482:	88 23       	and	r24, r24
    7484:	69 f5       	brne	.+90     	; 0x74e0 <updateSpeed+0x14a>
    7486:	8a 81       	ldd	r24, Y+2	; 0x02
    7488:	88 23       	and	r24, r24
    748a:	51 f1       	breq	.+84     	; 0x74e0 <updateSpeed+0x14a>
	{
		pressedButton2 = 1;
    748c:	81 e0       	ldi	r24, 0x01	; 1
    748e:	80 93 0d 02 	sts	0x020D, r24
		InitialSpeed--;
    7492:	80 91 07 02 	lds	r24, 0x0207
    7496:	90 91 08 02 	lds	r25, 0x0208
    749a:	a0 91 09 02 	lds	r26, 0x0209
    749e:	b0 91 0a 02 	lds	r27, 0x020A
    74a2:	01 97       	sbiw	r24, 0x01	; 1
    74a4:	a1 09       	sbc	r26, r1
    74a6:	b1 09       	sbc	r27, r1
    74a8:	80 93 07 02 	sts	0x0207, r24
    74ac:	90 93 08 02 	sts	0x0208, r25
    74b0:	a0 93 09 02 	sts	0x0209, r26
    74b4:	b0 93 0a 02 	sts	0x020A, r27
		SpiSendData(InitialSpeed,SEND);
    74b8:	80 91 07 02 	lds	r24, 0x0207
    74bc:	90 91 08 02 	lds	r25, 0x0208
    74c0:	a0 91 09 02 	lds	r26, 0x0209
    74c4:	b0 91 0a 02 	lds	r27, 0x020A
    74c8:	60 e0       	ldi	r22, 0x00	; 0
    74ca:	0e 94 df 3a 	call	0x75be	; 0x75be <SpiSendData>
		pressedButton1 = 0;
    74ce:	10 92 0e 02 	sts	0x020E, r1
		SW_Delay_ms(300);
    74d2:	6c e2       	ldi	r22, 0x2C	; 44
    74d4:	71 e0       	ldi	r23, 0x01	; 1
    74d6:	80 e0       	ldi	r24, 0x00	; 0
    74d8:	90 e0       	ldi	r25, 0x00	; 0
    74da:	0e 94 41 30 	call	0x6082	; 0x6082 <SW_Delay_ms>
    74de:	0a c0       	rjmp	.+20     	; 0x74f4 <updateSpeed+0x15e>
	}
	else
	{
		pressedButton2 = 0;
    74e0:	10 92 0d 02 	sts	0x020D, r1
		pressedButton1 = 0;
    74e4:	10 92 0e 02 	sts	0x020E, r1
		SW_Delay_ms(300);
    74e8:	6c e2       	ldi	r22, 0x2C	; 44
    74ea:	71 e0       	ldi	r23, 0x01	; 1
    74ec:	80 e0       	ldi	r24, 0x00	; 0
    74ee:	90 e0       	ldi	r25, 0x00	; 0
    74f0:	0e 94 41 30 	call	0x6082	; 0x6082 <SW_Delay_ms>
	}



}
    74f4:	0f 90       	pop	r0
    74f6:	0f 90       	pop	r0
    74f8:	cf 91       	pop	r28
    74fa:	df 91       	pop	r29
    74fc:	08 95       	ret

000074fe <getInitStatus>:

uint8 getInitStatus(void)
{
    74fe:	df 93       	push	r29
    7500:	cf 93       	push	r28
    7502:	cd b7       	in	r28, 0x3d	; 61
    7504:	de b7       	in	r29, 0x3e	; 62
	return endInit;
    7506:	80 91 02 02 	lds	r24, 0x0202
}
    750a:	cf 91       	pop	r28
    750c:	df 91       	pop	r29
    750e:	08 95       	ret

00007510 <SpiManipulateMode>:
uint8 arrOfSlavesPorts[NUMBER_OF_SLAVES] = {PORTB};
uint8 arrOfSlavesPins[NUMBER_OF_SLAVES]  = {BIT4};


void SpiManipulateMode(uint8 spiMode)
{
    7510:	df 93       	push	r29
    7512:	cf 93       	push	r28
    7514:	00 d0       	rcall	.+0      	; 0x7516 <SpiManipulateMode+0x6>
    7516:	00 d0       	rcall	.+0      	; 0x7518 <SpiManipulateMode+0x8>
    7518:	cd b7       	in	r28, 0x3d	; 61
    751a:	de b7       	in	r29, 0x3e	; 62
    751c:	8a 83       	std	Y+2, r24	; 0x02


	switch(spiMode)
    751e:	8a 81       	ldd	r24, Y+2	; 0x02
    7520:	28 2f       	mov	r18, r24
    7522:	30 e0       	ldi	r19, 0x00	; 0
    7524:	3c 83       	std	Y+4, r19	; 0x04
    7526:	2b 83       	std	Y+3, r18	; 0x03
    7528:	8b 81       	ldd	r24, Y+3	; 0x03
    752a:	9c 81       	ldd	r25, Y+4	; 0x04
    752c:	00 97       	sbiw	r24, 0x00	; 0
    752e:	31 f0       	breq	.+12     	; 0x753c <SpiManipulateMode+0x2c>
    7530:	2b 81       	ldd	r18, Y+3	; 0x03
    7532:	3c 81       	ldd	r19, Y+4	; 0x04
    7534:	21 30       	cpi	r18, 0x01	; 1
    7536:	31 05       	cpc	r19, r1
    7538:	19 f1       	breq	.+70     	; 0x7580 <SpiManipulateMode+0x70>
    753a:	36 c0       	rjmp	.+108    	; 0x75a8 <SpiManipulateMode+0x98>
	{
	case SPI_MASTER:

		AVE_gpioPinDirection(CFG_PORT,MOSI,OUTPUT);
    753c:	81 e0       	ldi	r24, 0x01	; 1
    753e:	60 e2       	ldi	r22, 0x20	; 32
    7540:	42 e0       	ldi	r20, 0x02	; 2
    7542:	0e 94 76 28 	call	0x50ec	; 0x50ec <AVE_gpioPinDirection>
		AVE_gpioPinDirection(CFG_PORT,MISO,INPUT);
    7546:	81 e0       	ldi	r24, 0x01	; 1
    7548:	60 e4       	ldi	r22, 0x40	; 64
    754a:	40 e0       	ldi	r20, 0x00	; 0
    754c:	0e 94 76 28 	call	0x50ec	; 0x50ec <AVE_gpioPinDirection>
		AVE_gpioPinDirection(CFG_PORT,SPI_CLK,OUTPUT);
    7550:	81 e0       	ldi	r24, 0x01	; 1
    7552:	60 e8       	ldi	r22, 0x80	; 128
    7554:	42 e0       	ldi	r20, 0x02	; 2
    7556:	0e 94 76 28 	call	0x50ec	; 0x50ec <AVE_gpioPinDirection>
		for(uint8 i = 0;i<NUMBER_OF_SLAVES;i++)
    755a:	19 82       	std	Y+1, r1	; 0x01
    755c:	0d c0       	rjmp	.+26     	; 0x7578 <SpiManipulateMode+0x68>
		{
			AVE_gpioPinDirection(PORTB,BIT4,OUTPUT);
    755e:	81 e0       	ldi	r24, 0x01	; 1
    7560:	60 e1       	ldi	r22, 0x10	; 16
    7562:	42 e0       	ldi	r20, 0x02	; 2
    7564:	0e 94 76 28 	call	0x50ec	; 0x50ec <AVE_gpioPinDirection>
			AVE_gpioPinWrite(PORTB,BIT4,LOW);
    7568:	81 e0       	ldi	r24, 0x01	; 1
    756a:	60 e1       	ldi	r22, 0x10	; 16
    756c:	40 e0       	ldi	r20, 0x00	; 0
    756e:	0e 94 b7 29 	call	0x536e	; 0x536e <AVE_gpioPinWrite>
	case SPI_MASTER:

		AVE_gpioPinDirection(CFG_PORT,MOSI,OUTPUT);
		AVE_gpioPinDirection(CFG_PORT,MISO,INPUT);
		AVE_gpioPinDirection(CFG_PORT,SPI_CLK,OUTPUT);
		for(uint8 i = 0;i<NUMBER_OF_SLAVES;i++)
    7572:	89 81       	ldd	r24, Y+1	; 0x01
    7574:	8f 5f       	subi	r24, 0xFF	; 255
    7576:	89 83       	std	Y+1, r24	; 0x01
    7578:	89 81       	ldd	r24, Y+1	; 0x01
    757a:	88 23       	and	r24, r24
    757c:	81 f3       	breq	.-32     	; 0x755e <SpiManipulateMode+0x4e>
    757e:	14 c0       	rjmp	.+40     	; 0x75a8 <SpiManipulateMode+0x98>



		break;
	case SPI_SLAVE:
		AVE_gpioPinDirection(CFG_PORT,MOSI,INPUT);
    7580:	81 e0       	ldi	r24, 0x01	; 1
    7582:	60 e2       	ldi	r22, 0x20	; 32
    7584:	40 e0       	ldi	r20, 0x00	; 0
    7586:	0e 94 76 28 	call	0x50ec	; 0x50ec <AVE_gpioPinDirection>
		AVE_gpioPinDirection(CFG_PORT,MISO,OUTPUT);
    758a:	81 e0       	ldi	r24, 0x01	; 1
    758c:	60 e4       	ldi	r22, 0x40	; 64
    758e:	42 e0       	ldi	r20, 0x02	; 2
    7590:	0e 94 76 28 	call	0x50ec	; 0x50ec <AVE_gpioPinDirection>
		AVE_gpioPinDirection(CFG_PORT,SPI_CLK,INPUT);
    7594:	81 e0       	ldi	r24, 0x01	; 1
    7596:	60 e8       	ldi	r22, 0x80	; 128
    7598:	40 e0       	ldi	r20, 0x00	; 0
    759a:	0e 94 76 28 	call	0x50ec	; 0x50ec <AVE_gpioPinDirection>
		AVE_gpioPinDirection(CFG_PORT,SLAVE_SELECT_PIN,INPUT);
    759e:	81 e0       	ldi	r24, 0x01	; 1
    75a0:	60 e1       	ldi	r22, 0x10	; 16
    75a2:	40 e0       	ldi	r20, 0x00	; 0
    75a4:	0e 94 76 28 	call	0x50ec	; 0x50ec <AVE_gpioPinDirection>



	}

	Spi_Init(&spiCfg);
    75a8:	82 e7       	ldi	r24, 0x72	; 114
    75aa:	91 e0       	ldi	r25, 0x01	; 1
    75ac:	0e 94 80 21 	call	0x4300	; 0x4300 <Spi_Init>


}
    75b0:	0f 90       	pop	r0
    75b2:	0f 90       	pop	r0
    75b4:	0f 90       	pop	r0
    75b6:	0f 90       	pop	r0
    75b8:	cf 91       	pop	r28
    75ba:	df 91       	pop	r29
    75bc:	08 95       	ret

000075be <SpiSendData>:

uint8 SpiSendData(uint8 data,uint8 flag)
{
    75be:	df 93       	push	r29
    75c0:	cf 93       	push	r28
    75c2:	00 d0       	rcall	.+0      	; 0x75c4 <SpiSendData+0x6>
    75c4:	00 d0       	rcall	.+0      	; 0x75c6 <SpiSendData+0x8>
    75c6:	0f 92       	push	r0
    75c8:	cd b7       	in	r28, 0x3d	; 61
    75ca:	de b7       	in	r29, 0x3e	; 62
    75cc:	8a 83       	std	Y+2, r24	; 0x02
    75ce:	6b 83       	std	Y+3, r22	; 0x03

	uint8 receivedData = 1;
    75d0:	81 e0       	ldi	r24, 0x01	; 1
    75d2:	89 83       	std	Y+1, r24	; 0x01

	switch(flag)
    75d4:	8b 81       	ldd	r24, Y+3	; 0x03
    75d6:	28 2f       	mov	r18, r24
    75d8:	30 e0       	ldi	r19, 0x00	; 0
    75da:	3d 83       	std	Y+5, r19	; 0x05
    75dc:	2c 83       	std	Y+4, r18	; 0x04
    75de:	8c 81       	ldd	r24, Y+4	; 0x04
    75e0:	9d 81       	ldd	r25, Y+5	; 0x05
    75e2:	00 97       	sbiw	r24, 0x00	; 0
    75e4:	31 f0       	breq	.+12     	; 0x75f2 <SpiSendData+0x34>
    75e6:	2c 81       	ldd	r18, Y+4	; 0x04
    75e8:	3d 81       	ldd	r19, Y+5	; 0x05
    75ea:	21 30       	cpi	r18, 0x01	; 1
    75ec:	31 05       	cpc	r19, r1
    75ee:	29 f0       	breq	.+10     	; 0x75fa <SpiSendData+0x3c>
    75f0:	07 c0       	rjmp	.+14     	; 0x7600 <SpiSendData+0x42>
	{
	case SEND:
		SpiTransferPolling(data);
    75f2:	8a 81       	ldd	r24, Y+2	; 0x02
    75f4:	0e 94 a4 22 	call	0x4548	; 0x4548 <SpiTransferPolling>
    75f8:	03 c0       	rjmp	.+6      	; 0x7600 <SpiSendData+0x42>
		break;
	case RECEIVE:
		receivedData=SpiGetPolling();
    75fa:	0e 94 b7 22 	call	0x456e	; 0x456e <SpiGetPolling>
    75fe:	89 83       	std	Y+1, r24	; 0x01
		break;

	}

	return receivedData;
    7600:	89 81       	ldd	r24, Y+1	; 0x01

}
    7602:	0f 90       	pop	r0
    7604:	0f 90       	pop	r0
    7606:	0f 90       	pop	r0
    7608:	0f 90       	pop	r0
    760a:	0f 90       	pop	r0
    760c:	cf 91       	pop	r28
    760e:	df 91       	pop	r29
    7610:	08 95       	ret

00007612 <togg>:
//}
//
//

void togg(void)
{
    7612:	df 93       	push	r29
    7614:	cf 93       	push	r28
    7616:	cd b7       	in	r28, 0x3d	; 61
    7618:	de b7       	in	r29, 0x3e	; 62

	if(flag == 0)
    761a:	80 91 0f 02 	lds	r24, 0x020F
    761e:	88 23       	and	r24, r24
    7620:	49 f4       	brne	.+18     	; 0x7634 <togg+0x22>
	{

		AVEManipulateLed(BIT4,PORTB,LED_ON);
    7622:	80 e1       	ldi	r24, 0x10	; 16
    7624:	61 e0       	ldi	r22, 0x01	; 1
    7626:	41 e0       	ldi	r20, 0x01	; 1
    7628:	0e 94 c1 34 	call	0x6982	; 0x6982 <AVEManipulateLed>
		flag = 1;
    762c:	81 e0       	ldi	r24, 0x01	; 1
    762e:	80 93 0f 02 	sts	0x020F, r24
    7632:	07 c0       	rjmp	.+14     	; 0x7642 <togg+0x30>
	}
	else
	{
		AVEManipulateLed(BIT4,PORTB,LED_OFF);
    7634:	80 e1       	ldi	r24, 0x10	; 16
    7636:	61 e0       	ldi	r22, 0x01	; 1
    7638:	40 e0       	ldi	r20, 0x00	; 0
    763a:	0e 94 c1 34 	call	0x6982	; 0x6982 <AVEManipulateLed>
		flag = 0;
    763e:	10 92 0f 02 	sts	0x020F, r1
	}


}
    7642:	cf 91       	pop	r28
    7644:	df 91       	pop	r29
    7646:	08 95       	ret

00007648 <main>:
 */
#endif


int main(void)
{
    7648:	df 93       	push	r29
    764a:	cf 93       	push	r28
    764c:	cd b7       	in	r28, 0x3d	; 61
    764e:	de b7       	in	r29, 0x3e	; 62
//	AVE_gpioPinWrite(PORTB,BIT4,LOW);


	//SpiManipulateMode(SPI_MASTER);

	pcCommunicationInit();
    7650:	0e 94 61 38 	call	0x70c2	; 0x70c2 <pcCommunicationInit>

//	usartSendPolling(47);
	while(1)
	{

		if(!getInitStatus())
    7654:	0e 94 7f 3a 	call	0x74fe	; 0x74fe <getInitStatus>
    7658:	88 23       	and	r24, r24
    765a:	19 f4       	brne	.+6      	; 0x7662 <main+0x1a>
		{
			setInitialValues();
    765c:	0e 94 2c 39 	call	0x7258	; 0x7258 <setInitialValues>
    7660:	f9 cf       	rjmp	.-14     	; 0x7654 <main+0xc>

		}
		else
		{
			//usartSendPolling('a');
			updateSpeed();
    7662:	0e 94 cb 39 	call	0x7396	; 0x7396 <updateSpeed>
    7666:	f6 cf       	rjmp	.-20     	; 0x7654 <main+0xc>

00007668 <__mulsi3>:
    7668:	62 9f       	mul	r22, r18
    766a:	d0 01       	movw	r26, r0
    766c:	73 9f       	mul	r23, r19
    766e:	f0 01       	movw	r30, r0
    7670:	82 9f       	mul	r24, r18
    7672:	e0 0d       	add	r30, r0
    7674:	f1 1d       	adc	r31, r1
    7676:	64 9f       	mul	r22, r20
    7678:	e0 0d       	add	r30, r0
    767a:	f1 1d       	adc	r31, r1
    767c:	92 9f       	mul	r25, r18
    767e:	f0 0d       	add	r31, r0
    7680:	83 9f       	mul	r24, r19
    7682:	f0 0d       	add	r31, r0
    7684:	74 9f       	mul	r23, r20
    7686:	f0 0d       	add	r31, r0
    7688:	65 9f       	mul	r22, r21
    768a:	f0 0d       	add	r31, r0
    768c:	99 27       	eor	r25, r25
    768e:	72 9f       	mul	r23, r18
    7690:	b0 0d       	add	r27, r0
    7692:	e1 1d       	adc	r30, r1
    7694:	f9 1f       	adc	r31, r25
    7696:	63 9f       	mul	r22, r19
    7698:	b0 0d       	add	r27, r0
    769a:	e1 1d       	adc	r30, r1
    769c:	f9 1f       	adc	r31, r25
    769e:	bd 01       	movw	r22, r26
    76a0:	cf 01       	movw	r24, r30
    76a2:	11 24       	eor	r1, r1
    76a4:	08 95       	ret

000076a6 <__udivmodhi4>:
    76a6:	aa 1b       	sub	r26, r26
    76a8:	bb 1b       	sub	r27, r27
    76aa:	51 e1       	ldi	r21, 0x11	; 17
    76ac:	07 c0       	rjmp	.+14     	; 0x76bc <__udivmodhi4_ep>

000076ae <__udivmodhi4_loop>:
    76ae:	aa 1f       	adc	r26, r26
    76b0:	bb 1f       	adc	r27, r27
    76b2:	a6 17       	cp	r26, r22
    76b4:	b7 07       	cpc	r27, r23
    76b6:	10 f0       	brcs	.+4      	; 0x76bc <__udivmodhi4_ep>
    76b8:	a6 1b       	sub	r26, r22
    76ba:	b7 0b       	sbc	r27, r23

000076bc <__udivmodhi4_ep>:
    76bc:	88 1f       	adc	r24, r24
    76be:	99 1f       	adc	r25, r25
    76c0:	5a 95       	dec	r21
    76c2:	a9 f7       	brne	.-22     	; 0x76ae <__udivmodhi4_loop>
    76c4:	80 95       	com	r24
    76c6:	90 95       	com	r25
    76c8:	bc 01       	movw	r22, r24
    76ca:	cd 01       	movw	r24, r26
    76cc:	08 95       	ret

000076ce <__udivmodsi4>:
    76ce:	a1 e2       	ldi	r26, 0x21	; 33
    76d0:	1a 2e       	mov	r1, r26
    76d2:	aa 1b       	sub	r26, r26
    76d4:	bb 1b       	sub	r27, r27
    76d6:	fd 01       	movw	r30, r26
    76d8:	0d c0       	rjmp	.+26     	; 0x76f4 <__udivmodsi4_ep>

000076da <__udivmodsi4_loop>:
    76da:	aa 1f       	adc	r26, r26
    76dc:	bb 1f       	adc	r27, r27
    76de:	ee 1f       	adc	r30, r30
    76e0:	ff 1f       	adc	r31, r31
    76e2:	a2 17       	cp	r26, r18
    76e4:	b3 07       	cpc	r27, r19
    76e6:	e4 07       	cpc	r30, r20
    76e8:	f5 07       	cpc	r31, r21
    76ea:	20 f0       	brcs	.+8      	; 0x76f4 <__udivmodsi4_ep>
    76ec:	a2 1b       	sub	r26, r18
    76ee:	b3 0b       	sbc	r27, r19
    76f0:	e4 0b       	sbc	r30, r20
    76f2:	f5 0b       	sbc	r31, r21

000076f4 <__udivmodsi4_ep>:
    76f4:	66 1f       	adc	r22, r22
    76f6:	77 1f       	adc	r23, r23
    76f8:	88 1f       	adc	r24, r24
    76fa:	99 1f       	adc	r25, r25
    76fc:	1a 94       	dec	r1
    76fe:	69 f7       	brne	.-38     	; 0x76da <__udivmodsi4_loop>
    7700:	60 95       	com	r22
    7702:	70 95       	com	r23
    7704:	80 95       	com	r24
    7706:	90 95       	com	r25
    7708:	9b 01       	movw	r18, r22
    770a:	ac 01       	movw	r20, r24
    770c:	bd 01       	movw	r22, r26
    770e:	cf 01       	movw	r24, r30
    7710:	08 95       	ret

00007712 <__prologue_saves__>:
    7712:	2f 92       	push	r2
    7714:	3f 92       	push	r3
    7716:	4f 92       	push	r4
    7718:	5f 92       	push	r5
    771a:	6f 92       	push	r6
    771c:	7f 92       	push	r7
    771e:	8f 92       	push	r8
    7720:	9f 92       	push	r9
    7722:	af 92       	push	r10
    7724:	bf 92       	push	r11
    7726:	cf 92       	push	r12
    7728:	df 92       	push	r13
    772a:	ef 92       	push	r14
    772c:	ff 92       	push	r15
    772e:	0f 93       	push	r16
    7730:	1f 93       	push	r17
    7732:	cf 93       	push	r28
    7734:	df 93       	push	r29
    7736:	cd b7       	in	r28, 0x3d	; 61
    7738:	de b7       	in	r29, 0x3e	; 62
    773a:	ca 1b       	sub	r28, r26
    773c:	db 0b       	sbc	r29, r27
    773e:	0f b6       	in	r0, 0x3f	; 63
    7740:	f8 94       	cli
    7742:	de bf       	out	0x3e, r29	; 62
    7744:	0f be       	out	0x3f, r0	; 63
    7746:	cd bf       	out	0x3d, r28	; 61
    7748:	09 94       	ijmp

0000774a <__epilogue_restores__>:
    774a:	2a 88       	ldd	r2, Y+18	; 0x12
    774c:	39 88       	ldd	r3, Y+17	; 0x11
    774e:	48 88       	ldd	r4, Y+16	; 0x10
    7750:	5f 84       	ldd	r5, Y+15	; 0x0f
    7752:	6e 84       	ldd	r6, Y+14	; 0x0e
    7754:	7d 84       	ldd	r7, Y+13	; 0x0d
    7756:	8c 84       	ldd	r8, Y+12	; 0x0c
    7758:	9b 84       	ldd	r9, Y+11	; 0x0b
    775a:	aa 84       	ldd	r10, Y+10	; 0x0a
    775c:	b9 84       	ldd	r11, Y+9	; 0x09
    775e:	c8 84       	ldd	r12, Y+8	; 0x08
    7760:	df 80       	ldd	r13, Y+7	; 0x07
    7762:	ee 80       	ldd	r14, Y+6	; 0x06
    7764:	fd 80       	ldd	r15, Y+5	; 0x05
    7766:	0c 81       	ldd	r16, Y+4	; 0x04
    7768:	1b 81       	ldd	r17, Y+3	; 0x03
    776a:	aa 81       	ldd	r26, Y+2	; 0x02
    776c:	b9 81       	ldd	r27, Y+1	; 0x01
    776e:	ce 0f       	add	r28, r30
    7770:	d1 1d       	adc	r29, r1
    7772:	0f b6       	in	r0, 0x3f	; 63
    7774:	f8 94       	cli
    7776:	de bf       	out	0x3e, r29	; 62
    7778:	0f be       	out	0x3f, r0	; 63
    777a:	cd bf       	out	0x3d, r28	; 61
    777c:	ed 01       	movw	r28, r26
    777e:	08 95       	ret

00007780 <_exit>:
    7780:	f8 94       	cli

00007782 <__stop_program>:
    7782:	ff cf       	rjmp	.-2      	; 0x7782 <__stop_program>
